/* eslint-disable no-unused-expressions */
/* eslint-disable no-underscore-dangle */
import { __awaiter, __extends, __generator, __read, __values } from "tslib";
import { ViewController, createDuplicateIframeWarning, createURL, createModalNotReadyError } from '@magic-sdk/provider';
/**
 * Magic `<iframe>` overlay styles. These base styles enable `<iframe>` UI
 * to render above all other DOM content.
 */
var overlayStyles = {
    display: 'none',
    position: 'fixed',
    top: '0',
    right: '0',
    width: '100%',
    height: '100%',
    borderRadius: '0',
    border: 'none',
    zIndex: '2147483647',
};
/**
 * Apply iframe styles to the given element.
 * @param elem - An element to apply styles using CSSOM.
 */
function applyOverlayStyles(elem) {
    var e_1, _a;
    try {
        for (var _b = __values(Object.entries(overlayStyles)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = __read(_c.value, 2), cssProperty = _d[0], value = _d[1];
            /* eslint-disable-next-line no-param-reassign */
            elem.style[cssProperty] = value;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
}
/**
 * Checks if the given query params are associated with an active `<iframe>`
 * instance.
 *
 * @param parameters - The unique, encoded query parameters to check for
 * duplicates against.
 */
function checkForSameSrcInstances(parameters) {
    var iframes = [].slice.call(document.querySelectorAll('.magic-iframe'));
    return Boolean(iframes.find(function (iframe) { return iframe.src.includes(parameters); }));
}
/**
 * View controller for the Magic `<iframe>` overlay.
 */
var IframeController = /** @class */ (function (_super) {
    __extends(IframeController, _super);
    function IframeController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.activeElement = null;
        return _this;
    }
    IframeController.prototype.init = function () {
        var _this = this;
        this.iframe = new Promise(function (resolve) {
            var onload = function () {
                if (!checkForSameSrcInstances(encodeURIComponent(_this.parameters))) {
                    var iframe = document.createElement('iframe');
                    iframe.classList.add('magic-iframe');
                    iframe.dataset.magicIframeLabel = createURL(_this.endpoint).host;
                    iframe.title = 'Secure Modal';
                    iframe.src = createURL("/send?params=" + encodeURIComponent(_this.parameters), _this.endpoint).href;
                    applyOverlayStyles(iframe);
                    document.body.appendChild(iframe);
                    resolve(iframe);
                }
                else {
                    createDuplicateIframeWarning().log();
                }
            };
            // Check DOM state and load...
            if (['loaded', 'interactive', 'complete'].includes(document.readyState)) {
                onload();
            }
            else {
                // ...or check load events to load
                window.addEventListener('load', onload, false);
            }
        });
    };
    IframeController.prototype.showOverlay = function () {
        return __awaiter(this, void 0, void 0, function () {
            var iframe;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.iframe];
                    case 1:
                        iframe = _a.sent();
                        iframe.style.display = 'block';
                        this.activeElement = document.activeElement;
                        iframe.focus();
                        return [2 /*return*/];
                }
            });
        });
    };
    IframeController.prototype.hideOverlay = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var iframe;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.iframe];
                    case 1:
                        iframe = _b.sent();
                        iframe.style.display = 'none';
                        if ((_a = this.activeElement) === null || _a === void 0 ? void 0 : _a.focus)
                            this.activeElement.focus();
                        this.activeElement = null;
                        return [2 /*return*/];
                }
            });
        });
    };
    IframeController.prototype.postMessage = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var iframe;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.iframe];
                    case 1:
                        iframe = _a.sent();
                        if (iframe && iframe.contentWindow) {
                            iframe.contentWindow.postMessage(data, this.endpoint);
                        }
                        else {
                            throw createModalNotReadyError();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    return IframeController;
}(ViewController));
export { IframeController };
//# sourceMappingURL=iframe-controller.js.map