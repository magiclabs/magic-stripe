/* eslint-disable no-underscore-dangle, no-param-reassign */
import { isJsonRpcResponsePayload } from '../util/type-guards';
import { getPayloadId } from '../util/get-payload-id';
var payloadPreprocessedSymbol = Symbol('Payload pre-processed by Magic SDK');
/**
 * To avoid "pre-processing" a payload more than once (and needlessly
 * incrementing our payload ID generator), we attach a symbol to detect a
 * payloads we've already visited.
 */
function markPayloadAsPreprocessed(payload) {
    Object.defineProperty(payload, payloadPreprocessedSymbol, {
        value: true,
        enumerable: false,
    });
    return payload;
}
/**
 * Returns `true` if the payload has been visited by our "pre-processing," in
 * `standardizeJsonRpcRequestPayload(...)`.
 */
function isPayloadPreprocessed(payload) {
    return !!payload[payloadPreprocessedSymbol];
}
/**
 * Returns a full `JsonRpcRequestPayload` from a potentially incomplete payload
 * object. This method mutates the given `payload` to preserve compatibility
 * with external libraries that perform their own `JsonRpcRequestPayload.id`
 * check to associate responses (such as `web3`).
 *
 * This function is no-op if the payload has already been processed before.
 */
export function standardizeJsonRpcRequestPayload(payload) {
    var _a, _b, _c;
    if (!isPayloadPreprocessed(payload)) {
        payload.jsonrpc = (_a = payload.jsonrpc) !== null && _a !== void 0 ? _a : '2.0';
        payload.id = getPayloadId();
        payload.method = (_b = payload.method) !== null && _b !== void 0 ? _b : 'noop';
        payload.params = (_c = payload.params) !== null && _c !== void 0 ? _c : [];
        markPayloadAsPreprocessed(payload);
    }
    /* eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion */
    return payload;
}
/**
 * Build a valid JSON RPC payload for emitting to the Magic SDK iframe relayer.
 */
export function createJsonRpcRequestPayload(method, params) {
    if (params === void 0) { params = []; }
    return markPayloadAsPreprocessed({
        params: params,
        method: method,
        jsonrpc: '2.0',
        id: getPayloadId(),
    });
}
/**
 * Formats and standardizes a JSON RPC 2.0 response from a number of potential
 * sources.
 */
var JsonRpcResponse = /** @class */ (function () {
    function JsonRpcResponse(responseOrPayload) {
        if (responseOrPayload instanceof JsonRpcResponse) {
            this._jsonrpc = responseOrPayload.payload.jsonrpc;
            this._id = responseOrPayload.payload.id;
            this._result = responseOrPayload.payload.result;
            this._error = responseOrPayload.payload.error;
        }
        else if (isJsonRpcResponsePayload(responseOrPayload)) {
            this._jsonrpc = responseOrPayload.jsonrpc;
            this._id = responseOrPayload.id;
            this._result = responseOrPayload.result;
            this._error = responseOrPayload.error;
        }
        else {
            this._jsonrpc = responseOrPayload.jsonrpc;
            this._id = responseOrPayload.id;
            this._result = undefined;
            this._error = undefined;
        }
    }
    JsonRpcResponse.prototype.applyError = function (error) {
        this._error = error;
        return this;
    };
    JsonRpcResponse.prototype.applyResult = function (result) {
        this._result = result;
        return this;
    };
    Object.defineProperty(JsonRpcResponse.prototype, "hasError", {
        get: function () {
            return typeof this._error !== 'undefined' && this._error !== null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JsonRpcResponse.prototype, "hasResult", {
        get: function () {
            return typeof this._result !== 'undefined';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JsonRpcResponse.prototype, "payload", {
        get: function () {
            return {
                jsonrpc: this._jsonrpc,
                id: this._id,
                result: this._result,
                error: this._error,
            };
        },
        enumerable: true,
        configurable: true
    });
    return JsonRpcResponse;
}());
export { JsonRpcResponse };
//# sourceMappingURL=json-rpc.js.map