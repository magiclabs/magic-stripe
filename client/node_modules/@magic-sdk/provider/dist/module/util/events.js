import { __extends } from "tslib";
import EventEmitter from 'eventemitter3';
/**
 * An extension of `EventEmitter` (provided by `eventemitter3`) with an adjusted
 * type interface that supports the unique structure of Magic SDK modules.
 */
var TypedEmitter = /** @class */ (function (_super) {
    __extends(TypedEmitter, _super);
    function TypedEmitter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TypedEmitter;
}(EventEmitter));
export { TypedEmitter };
/**
 * Creates a `TypedEmitter` instance and returns helper functions for easily
 * mixing `TypedEmitter` methods into other objects.
 */
export function createTypedEmitter() {
    var emitter = new TypedEmitter();
    var createChainingEmitterMethod = function (method, source) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            emitter[method].apply(emitter, args);
            return source;
        };
    };
    var createBoundEmitterMethod = function (method) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return emitter[method].apply(emitter, args);
        };
    };
    return {
        emitter: emitter,
        createChainingEmitterMethod: createChainingEmitterMethod,
        createBoundEmitterMethod: createBoundEmitterMethod,
    };
}
//# sourceMappingURL=events.js.map