/* eslint-disable consistent-return, prefer-spread */
import { __assign, __extends } from "tslib";
import { MagicOutgoingWindowMessage, } from '@magic-sdk/types';
import { BaseModule } from './base-module';
import { createInvalidArgumentError, MagicRPCError, createSynchronousWeb3MethodWarning } from '../core/sdk-exceptions';
import { createJsonRpcRequestPayload, standardizeJsonRpcRequestPayload, JsonRpcResponse } from '../core/json-rpc';
import { createTypedEmitter } from '../util/events';
var _a = createTypedEmitter(), createBoundEmitterMethod = _a.createBoundEmitterMethod, createChainingEmitterMethod = _a.createChainingEmitterMethod;
/** */
var RPCProviderModule = /** @class */ (function (_super) {
    __extends(RPCProviderModule, _super);
    function RPCProviderModule() {
        // Implements EIP 1193:
        // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isMagic = true;
        _this.on = createChainingEmitterMethod('on', _this);
        _this.once = createChainingEmitterMethod('once', _this);
        _this.addListener = createChainingEmitterMethod('addListener', _this);
        _this.off = createChainingEmitterMethod('off', _this);
        _this.removeListener = createChainingEmitterMethod('removeListener', _this);
        _this.removeAllListeners = createChainingEmitterMethod('removeAllListeners', _this);
        _this.emit = createBoundEmitterMethod('emit');
        _this.eventNames = createBoundEmitterMethod('eventNames');
        _this.listeners = createBoundEmitterMethod('listeners');
        _this.listenerCount = createBoundEmitterMethod('listenerCount');
        return _this;
    }
    /* eslint-enable prettier/prettier */
    RPCProviderModule.prototype.sendAsync = function (payload, onRequestComplete) {
        if (!onRequestComplete) {
            throw createInvalidArgumentError({
                procedure: 'Magic.rpcProvider.sendAsync',
                argument: 1,
                expected: 'function',
                received: onRequestComplete === null ? 'null' : typeof onRequestComplete,
            });
        }
        if (Array.isArray(payload)) {
            this.transport
                .post(this.overlay, MagicOutgoingWindowMessage.MAGIC_HANDLE_REQUEST, payload.map(function (p) { return standardizeJsonRpcRequestPayload(p); }))
                .then(function (batchResponse) {
                onRequestComplete(null, batchResponse.map(function (response) { return (__assign(__assign({}, response.payload), { error: response.hasError ? new MagicRPCError(response.payload.error) : null })); }));
            });
        }
        else {
            var finalPayload = standardizeJsonRpcRequestPayload(payload);
            this.transport
                .post(this.overlay, MagicOutgoingWindowMessage.MAGIC_HANDLE_REQUEST, finalPayload)
                .then(function (response) {
                onRequestComplete(response.hasError ? new MagicRPCError(response.payload.error) : null, response.payload);
            });
        }
    };
    /* eslint-enable prettier/prettier */
    RPCProviderModule.prototype.send = function (payloadOrMethod, onRequestCompleteOrParams) {
        // Case #1
        // Web3 >= 1.0.0-beta.38 calls `send` with method and parameters.
        if (typeof payloadOrMethod === 'string') {
            var payload = createJsonRpcRequestPayload(payloadOrMethod, Array.isArray(onRequestCompleteOrParams) ? onRequestCompleteOrParams : []);
            return this.request(payload);
        }
        // Case #2
        // Web3 <= 1.0.0-beta.37 uses `send` with a callback for async queries.
        if (Array.isArray(payloadOrMethod) || !!onRequestCompleteOrParams) {
            /* eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion */
            this.sendAsync(payloadOrMethod, onRequestCompleteOrParams);
            return;
        }
        // Case #3
        // Legacy synchronous methods (unsupported).
        var warning = createSynchronousWeb3MethodWarning();
        warning.log();
        return new JsonRpcResponse(payloadOrMethod).applyError({
            code: -32603,
            message: warning.rawMessage,
        }).payload;
    };
    RPCProviderModule.prototype.enable = function () {
        var requestPayload = createJsonRpcRequestPayload('eth_accounts');
        return this.request(requestPayload);
    };
    return RPCProviderModule;
}(BaseModule));
export { RPCProviderModule };
//# sourceMappingURL=rpc-provider.js.map