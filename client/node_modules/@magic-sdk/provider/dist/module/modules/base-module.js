import { __read, __spread } from "tslib";
import { MagicOutgoingWindowMessage, MagicIncomingWindowMessage } from '@magic-sdk/types';
import { createMalformedResponseError, MagicRPCError } from '../core/sdk-exceptions';
import { standardizeJsonRpcRequestPayload } from '../core/json-rpc';
import { createPromiEvent } from '../util/promise-tools';
var BaseModule = /** @class */ (function () {
    function BaseModule(sdk) {
        this.sdk = sdk;
    }
    Object.defineProperty(BaseModule.prototype, "transport", {
        /**
         * The `PayloadTransport` for the SDK instance registered to this module.
         */
        get: function () {
            return this.sdk.transport;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseModule.prototype, "overlay", {
        /**
         * The `ViewController` for the SDK instance registered to this module.
         */
        get: function () {
            return this.sdk.overlay;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Emits promisified requests to the Magic `<iframe>` context.
     */
    BaseModule.prototype.request = function (payload) {
        var responsePromise = this.transport.post(this.overlay, MagicOutgoingWindowMessage.MAGIC_HANDLE_REQUEST, standardizeJsonRpcRequestPayload(payload));
        // PromiEvent-ify the response.
        var promiEvent = createPromiEvent(function (resolve, reject) {
            responsePromise
                .then(function (res) {
                cleanupEvents();
                if (res.hasError)
                    reject(new MagicRPCError(res.payload.error));
                else if (res.hasResult)
                    resolve(res.payload.result);
                else
                    throw createMalformedResponseError();
            })
                .catch(function (err) {
                cleanupEvents();
                reject(err);
            });
        });
        // Listen for events from the `<iframe>` associated with the current payload
        // and emit those to `PromiEvent` subscribers.
        var cleanupEvents = this.transport.on(MagicIncomingWindowMessage.MAGIC_HANDLE_EVENT, function (evt) {
            var _a;
            var response = evt.data.response;
            if (response.id === payload.id && ((_a = response.result) === null || _a === void 0 ? void 0 : _a.event)) {
                var _b = response.result, event_1 = _b.event, _c = _b.params, params = _c === void 0 ? [] : _c;
                promiEvent.emit.apply(promiEvent, __spread([event_1], params));
            }
        });
        return promiEvent;
    };
    return BaseModule;
}());
export { BaseModule };
//# sourceMappingURL=base-module.js.map