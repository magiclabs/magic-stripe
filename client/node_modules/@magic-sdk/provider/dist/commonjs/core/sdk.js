"use strict";
/* eslint-disable no-underscore-dangle, no-param-reassign  */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var satisfies_1 = tslib_1.__importDefault(require("semver/functions/satisfies"));
var base64_json_1 = require("../util/base64-json");
var sdk_exceptions_1 = require("./sdk-exceptions");
var auth_1 = require("../modules/auth");
var user_1 = require("../modules/user");
var rpc_provider_1 = require("../modules/rpc-provider");
var url_1 = require("../util/url");
var base_extension_1 = require("../modules/base-extension");
var type_guards_1 = require("../util/type-guards");
var sdk_environment_1 = require("./sdk-environment");
/**
 * Checks if the given `ext` is compatible with the platform & version of Magic
 * SDK currently in use.
 */
function checkExtensionCompat(ext) {
    if (ext.compat) {
        // Check web compatibility
        if (sdk_environment_1.SDKEnvironment.sdkName === 'magic-sdk') {
            return typeof ext.compat['magic-sdk'] === 'string'
                ? satisfies_1.default(sdk_environment_1.SDKEnvironment.version, ext.compat['magic-sdk'])
                : !!ext.compat['magic-sdk'];
        }
        // Check React Native compatibility
        /* istanbul ignore else */
        if (sdk_environment_1.SDKEnvironment.sdkName === '@magic-sdk/react-native') {
            return typeof ext.compat['@magic-sdk/react-native'] === 'string'
                ? satisfies_1.default(sdk_environment_1.SDKEnvironment.version, ext.compat['@magic-sdk/react-native'])
                : !!ext.compat['@magic-sdk/react-native'];
        }
        // Else case should be impossible here...
    }
    // To gracefully support older extensions, we assume
    // compatibility when the `compat` field is missing.
    return true;
}
/**
 * Initializes SDK extensions, checks for platform/version compatiblity issues,
 * then consolidates any global configurations provided by those extensions.
 */
function prepareExtensions(options) {
    var _this = this;
    var _a;
    var extensions = (_a = options === null || options === void 0 ? void 0 : options.extensions) !== null && _a !== void 0 ? _a : [];
    var extConfig = {};
    var incompatibleExtensions = [];
    if (Array.isArray(extensions)) {
        extensions.forEach(function (ext) {
            if (checkExtensionCompat(ext)) {
                ext.init(_this);
                _this[ext.name] = ext;
                if (ext instanceof base_extension_1.Extension.Internal) {
                    if (!type_guards_1.isEmpty(ext.config))
                        extConfig[ext.name] = ext.config;
                }
            }
            else {
                incompatibleExtensions.push(ext);
            }
        });
    }
    else {
        Object.keys(extensions).forEach(function (name) {
            if (checkExtensionCompat(extensions[name])) {
                extensions[name].init(_this);
                var ext = extensions[name];
                _this[name] = ext;
                if (ext instanceof base_extension_1.Extension.Internal) {
                    if (!type_guards_1.isEmpty(ext.config))
                        extConfig[extensions[name].name] = ext.config;
                }
            }
            else {
                incompatibleExtensions.push(extensions[name]);
            }
        });
    }
    if (incompatibleExtensions.length) {
        throw sdk_exceptions_1.createIncompatibleExtensionsError(incompatibleExtensions);
    }
    return extConfig;
}
var SDKBase = /** @class */ (function () {
    /**
     * Creates an instance of Magic SDK.
     */
    function SDKBase(apiKey, options) {
        var _a;
        this.apiKey = apiKey;
        if (!apiKey)
            throw sdk_exceptions_1.createMissingApiKeyError();
        if (sdk_environment_1.SDKEnvironment.platform === 'react-native' && (options === null || options === void 0 ? void 0 : options.endpoint)) {
            sdk_exceptions_1.createReactNativeEndpointConfigurationWarning().log();
        }
        var defaultEndpoint = sdk_environment_1.SDKEnvironment.defaultEndpoint, version = sdk_environment_1.SDKEnvironment.version;
        this.endpoint = url_1.createURL((_a = options === null || options === void 0 ? void 0 : options.endpoint) !== null && _a !== void 0 ? _a : defaultEndpoint).origin;
        // Prepare built-in modules
        this.auth = new auth_1.AuthModule(this);
        this.user = new user_1.UserModule(this);
        this.rpcProvider = new rpc_provider_1.RPCProviderModule(this);
        // Prepare extensions
        var extConfig = prepareExtensions.call(this, options);
        // Encode parameters as base64-JSON
        this.parameters = base64_json_1.encodeJSON({
            API_KEY: this.apiKey,
            DOMAIN_ORIGIN: window.location ? window.location.origin : '',
            ETH_NETWORK: options === null || options === void 0 ? void 0 : options.network,
            host: url_1.createURL(this.endpoint).host,
            sdk: sdk_environment_1.sdkNameToEnvName[sdk_environment_1.SDKEnvironment.sdkName],
            version: version,
            ext: type_guards_1.isEmpty(extConfig) ? undefined : extConfig,
            locale: (options === null || options === void 0 ? void 0 : options.locale) || 'en_US',
        });
    }
    Object.defineProperty(SDKBase.prototype, "transport", {
        /**
         * Represents the JSON RPC payload message channel associated with this
         * `MagicSDK` instance.
         */
        get: function () {
            if (!SDKBase.__transports__.has(this.parameters)) {
                SDKBase.__transports__.set(this.parameters, new sdk_environment_1.SDKEnvironment.PayloadTransport(this.endpoint, this.parameters));
            }
            return SDKBase.__transports__.get(this.parameters);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SDKBase.prototype, "overlay", {
        /**
         * Represents the view controller associated with this `MagicSDK` instance.
         */
        get: function () {
            if (!SDKBase.__overlays__.has(this.parameters)) {
                var controller = new sdk_environment_1.SDKEnvironment.ViewController(this.transport);
                SDKBase.__overlays__.set(this.parameters, controller);
            }
            return SDKBase.__overlays__.get(this.parameters);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Preloads the Magic view, allowing for faster initial requests in browser
     * environments. Awaiting the returned promise will signal when the Magic view
     * has completed loading and is ready for requests.
     */
    SDKBase.prototype.preload = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.overlay.ready];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    SDKBase.__transports__ = new Map();
    SDKBase.__overlays__ = new Map();
    return SDKBase;
}());
exports.SDKBase = SDKBase;
//# sourceMappingURL=sdk.js.map