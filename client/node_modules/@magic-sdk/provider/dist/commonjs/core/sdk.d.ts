import { EthNetworkConfiguration } from '@magic-sdk/types';
import { PayloadTransport } from './payload-transport';
import { AuthModule } from '../modules/auth';
import { UserModule } from '../modules/user';
import { RPCProviderModule } from '../modules/rpc-provider';
import { ViewController } from './view-controller';
import { Extension } from '../modules/base-extension';
export interface MagicSDKAdditionalConfiguration<TCustomExtName extends string = string, TExt extends Extension<string>[] | {
    [P in TCustomExtName]: Extension<string>;
} = any> {
    endpoint?: string;
    locale?: 'en_US' | 'pl_PL' | 'af' | 'az' | 'ca' | 'cy' | 'da' | 'de' | 'et' | 'en' | 'es' | 'fr' | 'hr' | 'id' | 'it' | 'lv' | 'lt' | 'hu' | 'nl' | 'no' | 'pl' | 'pt' | 'ro' | 'sk' | 'sl' | 'fi' | 'sv' | 'tr' | 'vi' | 'cs' | 'el' | 'bg' | 'mk' | 'ru' | 'sr' | 'th' | 'zh_TW' | 'zh_CN' | 'ja' | 'ko';
    network?: EthNetworkConfiguration;
    extensions?: TExt;
}
export declare class SDKBase {
    readonly apiKey: string;
    private static readonly __transports__;
    private static readonly __overlays__;
    protected readonly endpoint: string;
    protected readonly parameters: string;
    /**
     * Contains methods for starting a Magic SDK authentication flow.
     */
    readonly auth: AuthModule;
    /**
     * Contains methods for interacting with user data, checking login
     * status, generating cryptographically-secure ID tokens, and more.
     */
    readonly user: UserModule;
    /**
     * Contains a Web3-compliant provider. Pass this module to your Web3/Ethers
     * instance for automatic compatibility with Ethereum methods.
     */
    readonly rpcProvider: RPCProviderModule;
    /**
     * Creates an instance of Magic SDK.
     */
    constructor(apiKey: string, options?: MagicSDKAdditionalConfiguration);
    /**
     * Represents the JSON RPC payload message channel associated with this
     * `MagicSDK` instance.
     */
    protected get transport(): PayloadTransport;
    /**
     * Represents the view controller associated with this `MagicSDK` instance.
     */
    protected get overlay(): ViewController;
    /**
     * Preloads the Magic view, allowing for faster initial requests in browser
     * environments. Awaiting the returned promise will signal when the Magic view
     * has completed loading and is ready for requests.
     */
    preload(): Promise<void>;
}
