"use strict";
/**
 * This file contains our type guards.
 *
 * Type guards are a feature of TypeScript which narrow the type signature of
 * intesection types (types that can be one thing or another).
 *
 * @see
 * https://www.typescriptlang.org/docs/handbook/advanced-types.html#type-guards-and-differentiating-types
 */
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("@magic-sdk/types");
/**
 * Assert `value` is `undefined`.
 */
function isUndefined(value) {
    return typeof value === 'undefined';
}
/**
 * Assert `value` is `null`.
 */
function isNull(value) {
    return value === null;
}
/**
 * Assert `value` is `null` or `undefined`.
 */
function isNil(value) {
    return isNull(value) || isUndefined(value);
}
/**
 * Assert `value` is a `JsonRpcRequestPayload` object.
 */
function isJsonRpcRequestPayload(value) {
    if (isNil(value))
        return false;
    return (!isUndefined(value.jsonrpc) && !isUndefined(value.id) && !isUndefined(value.method) && !isUndefined(value.params));
}
exports.isJsonRpcRequestPayload = isJsonRpcRequestPayload;
/**
 * Assert `value` is a `JsonRpcResponsePayload` object.
 */
function isJsonRpcResponsePayload(value) {
    if (isNil(value))
        return false;
    return (!isUndefined(value.jsonrpc) && !isUndefined(value.id) && (!isUndefined(value.result) || !isUndefined(value.error)));
}
exports.isJsonRpcResponsePayload = isJsonRpcResponsePayload;
/**
 * Assert `value` is a Magic SDK payload method identifier.
 */
function isMagicPayloadMethod(value) {
    if (isNil(value))
        return false;
    return typeof value === 'string' && Object.values(types_1.MagicPayloadMethod).includes(value);
}
exports.isMagicPayloadMethod = isMagicPayloadMethod;
/**
 * Assert `value` is an expected JSON RPC error code.
 */
function isJsonRpcErrorCode(value) {
    if (isNil(value))
        return false;
    return typeof value === 'number' && Object.values(types_1.RPCErrorCode).includes(value);
}
exports.isJsonRpcErrorCode = isJsonRpcErrorCode;
/**
 * Assert `value` is an empty, plain object.
 */
function isEmpty(value) {
    if (!value)
        return true;
    for (var key in value) {
        /* istanbul ignore else */
        if (Object.hasOwnProperty.call(value, key)) {
            return false;
        }
    }
    return true;
}
exports.isEmpty = isEmpty;
//# sourceMappingURL=type-guards.js.map