{"ast":null,"code":"import React, { useContext, useState, useLayoutEffect, createContext } from 'react';\nimport { SSRProvider as SSRProvider$1 } from '@react-aria/ssr';\nconst canUseDOM = /* @__PURE__ */Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);\nconst defaultSSRContext = {\n  isServer: !canUseDOM,\n  isClient: canUseDOM\n};\nconst SSRContext = /* @__PURE__ */createContext(defaultSSRContext);\n\nconst SSRProvider = props => {\n  const {\n    children\n  } = props; // Copy the default context so that strict equality\n  // checks against the context value are falsey.\n\n  const ctx = Object.assign({}, defaultSSRContext);\n  return React.createElement(SSRContext.Provider, {\n    value: ctx\n  }, React.createElement(SSRProvider$1, null, children));\n};\n\nfunction useSSR() {\n  const ctx = useContext(SSRContext);\n  const isInSSRContext = ctx !== defaultSSRContext;\n  const [isHydrating, setIsHydrating] = useState(canUseDOM && isInSSRContext);\n\n  if (canUseDOM) {\n    useLayoutEffect(() => setIsHydrating(false), []);\n  }\n\n  return Object.assign(Object.assign({}, ctx), {\n    isHydrating\n  });\n}\n\nexport { SSRProvider, useSSR };","map":{"version":3,"sources":["../../../src/components/ssr-provider.tsx"],"names":["ReactAriaSSRProvider"],"mappings":";;AAGA,MAAM,SAAS,GAAA,eAAmB,OAAO,CACvC,OAAO,MAAP,KAAkB,WAAlB,IAAiC,MAAM,CAAC,QAAxC,IAAoD,MAAM,CAAC,QAAP,CAAgB,aAD7B,CAAzC;AASA,MAAM,iBAAiB,GAAe;AAAE,EAAA,QAAQ,EAAE,CAAC,SAAb;AAAwB,EAAA,QAAQ,EAAE;AAAlC,CAAtC;AAEA,MAAM,UAAU,GAAA,eAAmB,aAAa,CAAa,iBAAb,CAAhD;;MAEa,WAAW,GAAc,KAAD,IAAM;AACzC,QAAM;AAAE,IAAA;AAAF,MAAe,KAArB,CADyC,C;;;AAKzC,QAAM,GAAG,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAQ,iBAAR,CAAT;AAEA,SACE,KAAA,CAAA,aAAA,CAAC,UAAU,CAAC,QAAZ,EAAoB;AAAC,IAAA,KAAK,EAAE;AAAR,GAApB,EACE,KAAA,CAAA,aAAA,CAACA,aAAD,EAAqB,IAArB,EAAuB,QAAvB,CADF,CADF;AAKF,C;;SAEgB,M,GAAM;AACpB,QAAM,GAAG,GAAG,UAAU,CAAC,UAAD,CAAtB;AACA,QAAM,cAAc,GAAG,GAAG,KAAK,iBAA/B;AACA,QAAM,CAAC,WAAD,EAAc,cAAd,IAAgC,QAAQ,CAAC,SAAS,IAAI,cAAd,CAA9C;;AAEA,MAAI,SAAJ,EAAe;AACb,IAAA,eAAe,CAAC,MAAM,cAAc,CAAC,KAAD,CAArB,EAA8B,EAA9B,CAAf;AACD;;AAED,SAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAY,GAAZ,CAAA,EAAe;AAAE,IAAA;AAAF,GAAf,CAAA;AACF","sourcesContent":["import React, { createContext, useContext, useLayoutEffect, useState } from 'react';\nimport { SSRProvider as ReactAriaSSRProvider } from '@react-aria/ssr';\n\nconst canUseDOM = /* @__PURE__ */ Boolean(\n  typeof window !== 'undefined' && window.document && window.document.createElement,\n);\n\ninterface SSRContext {\n  isServer: boolean;\n  isClient: boolean;\n}\n\nconst defaultSSRContext: SSRContext = { isServer: !canUseDOM, isClient: canUseDOM };\n\nconst SSRContext = /* @__PURE__ */ createContext<SSRContext>(defaultSSRContext);\n\nexport const SSRProvider: React.FC = (props) => {\n  const { children } = props;\n\n  // Copy the default context so that strict equality\n  // checks against the context value are falsey.\n  const ctx = { ...defaultSSRContext };\n\n  return (\n    <SSRContext.Provider value={ctx}>\n      <ReactAriaSSRProvider>{children}</ReactAriaSSRProvider>\n    </SSRContext.Provider>\n  );\n};\n\nexport function useSSR() {\n  const ctx = useContext(SSRContext);\n  const isInSSRContext = ctx !== defaultSSRContext;\n  const [isHydrating, setIsHydrating] = useState(canUseDOM && isInSSRContext);\n\n  if (canUseDOM) {\n    useLayoutEffect(() => setIsHydrating(false), []);\n  }\n\n  return { ...ctx, isHydrating };\n}\n"]},"metadata":{},"sourceType":"module"}