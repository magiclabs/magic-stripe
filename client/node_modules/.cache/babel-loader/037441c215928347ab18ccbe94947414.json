{"ast":null,"code":"'use strict';\n\nconst utils = require('./utils');\n\nfunction getRequestOpts(self, requestArgs, spec, overrideData) {\n  // Extract spec values with defaults.\n  const commandPath = utils.makeURLInterpolator(spec.path || '');\n  const requestMethod = (spec.method || 'GET').toUpperCase();\n  const urlParams = spec.urlParams || [];\n\n  const encode = spec.encode || (data => data);\n\n  const host = spec.host;\n  const path = self.createResourcePathWithSymbols(spec.path); // Don't mutate args externally.\n\n  const args = [].slice.call(requestArgs); // Generate and validate url params.\n\n  const urlData = urlParams.reduce((urlData, param) => {\n    const arg = args.shift();\n\n    if (typeof arg !== 'string') {\n      throw new Error(`Stripe: Argument \"${param}\" must be a string, but got: ${arg} (on API request to \\`${requestMethod} ${path}\\`)`);\n    }\n\n    urlData[param] = arg;\n    return urlData;\n  }, {}); // Pull request data and options (headers, auth) from args.\n\n  const dataFromArgs = utils.getDataFromArgs(args);\n  const data = encode(Object.assign({}, dataFromArgs, overrideData));\n  const options = utils.getOptionsFromArgs(args); // Validate that there are no more args.\n\n  if (args.filter(x => x != null).length) {\n    throw new Error(`Stripe: Unknown arguments (${args}). Did you mean to pass an options object? See https://github.com/stripe/stripe-node/wiki/Passing-Options. (on API request to ${requestMethod} \\`${path}\\`)`);\n  }\n\n  const requestPath = self.createFullPath(commandPath, urlData);\n  const headers = Object.assign(options.headers, spec.headers);\n\n  if (spec.validator) {\n    spec.validator(data, {\n      headers\n    });\n  }\n\n  const dataInQuery = spec.method === 'GET' || spec.method === 'DELETE';\n  const bodyData = dataInQuery ? {} : data;\n  const queryData = dataInQuery ? data : {};\n  return {\n    requestMethod,\n    requestPath,\n    bodyData,\n    queryData,\n    auth: options.auth,\n    headers,\n    host,\n    settings: options.settings\n  };\n}\n\nfunction makeRequest(self, requestArgs, spec, overrideData) {\n  return new Promise((resolve, reject) => {\n    let opts;\n\n    try {\n      opts = getRequestOpts(self, requestArgs, spec, overrideData);\n    } catch (err) {\n      reject(err);\n      return;\n    }\n\n    function requestCallback(err, response) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(spec.transformResponseData ? spec.transformResponseData(response) : response);\n      }\n    }\n\n    const emptyQuery = Object.keys(opts.queryData).length === 0;\n    const path = [opts.requestPath, emptyQuery ? '' : '?', utils.stringifyRequestData(opts.queryData)].join('');\n    const {\n      headers,\n      settings\n    } = opts;\n\n    self._request(opts.requestMethod, opts.host, path, opts.bodyData, opts.auth, {\n      headers,\n      settings\n    }, requestCallback);\n  });\n}\n\nmodule.exports = makeRequest;","map":{"version":3,"sources":["/Users/maricrisbonzo/Desktop/magic-apps/magic-stripe/node_modules/stripe/lib/makeRequest.js"],"names":["utils","require","getRequestOpts","self","requestArgs","spec","overrideData","commandPath","makeURLInterpolator","path","requestMethod","method","toUpperCase","urlParams","encode","data","host","createResourcePathWithSymbols","args","slice","call","urlData","reduce","param","arg","shift","Error","dataFromArgs","getDataFromArgs","Object","assign","options","getOptionsFromArgs","filter","x","length","requestPath","createFullPath","headers","validator","dataInQuery","bodyData","queryData","auth","settings","makeRequest","Promise","resolve","reject","opts","err","requestCallback","response","transformResponseData","emptyQuery","keys","stringifyRequestData","join","_request","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst utils = require('./utils');\n\nfunction getRequestOpts(self, requestArgs, spec, overrideData) {\n  // Extract spec values with defaults.\n  const commandPath = utils.makeURLInterpolator(spec.path || '');\n  const requestMethod = (spec.method || 'GET').toUpperCase();\n  const urlParams = spec.urlParams || [];\n  const encode = spec.encode || ((data) => data);\n  const host = spec.host;\n  const path = self.createResourcePathWithSymbols(spec.path);\n\n  // Don't mutate args externally.\n  const args = [].slice.call(requestArgs);\n\n  // Generate and validate url params.\n  const urlData = urlParams.reduce((urlData, param) => {\n    const arg = args.shift();\n    if (typeof arg !== 'string') {\n      throw new Error(\n        `Stripe: Argument \"${param}\" must be a string, but got: ${arg} (on API request to \\`${requestMethod} ${path}\\`)`\n      );\n    }\n\n    urlData[param] = arg;\n    return urlData;\n  }, {});\n\n  // Pull request data and options (headers, auth) from args.\n  const dataFromArgs = utils.getDataFromArgs(args);\n  const data = encode(Object.assign({}, dataFromArgs, overrideData));\n  const options = utils.getOptionsFromArgs(args);\n\n  // Validate that there are no more args.\n  if (args.filter((x) => x != null).length) {\n    throw new Error(\n      `Stripe: Unknown arguments (${args}). Did you mean to pass an options object? See https://github.com/stripe/stripe-node/wiki/Passing-Options. (on API request to ${requestMethod} \\`${path}\\`)`\n    );\n  }\n\n  const requestPath = self.createFullPath(commandPath, urlData);\n  const headers = Object.assign(options.headers, spec.headers);\n\n  if (spec.validator) {\n    spec.validator(data, {headers});\n  }\n\n  const dataInQuery = spec.method === 'GET' || spec.method === 'DELETE';\n  const bodyData = dataInQuery ? {} : data;\n  const queryData = dataInQuery ? data : {};\n\n  return {\n    requestMethod,\n    requestPath,\n    bodyData,\n    queryData,\n    auth: options.auth,\n    headers,\n    host,\n    settings: options.settings,\n  };\n}\n\nfunction makeRequest(self, requestArgs, spec, overrideData) {\n  return new Promise((resolve, reject) => {\n    let opts;\n    try {\n      opts = getRequestOpts(self, requestArgs, spec, overrideData);\n    } catch (err) {\n      reject(err);\n      return;\n    }\n\n    function requestCallback(err, response) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(\n          spec.transformResponseData\n            ? spec.transformResponseData(response)\n            : response\n        );\n      }\n    }\n\n    const emptyQuery = Object.keys(opts.queryData).length === 0;\n    const path = [\n      opts.requestPath,\n      emptyQuery ? '' : '?',\n      utils.stringifyRequestData(opts.queryData),\n    ].join('');\n\n    const {headers, settings} = opts;\n\n    self._request(\n      opts.requestMethod,\n      opts.host,\n      path,\n      opts.bodyData,\n      opts.auth,\n      {headers, settings},\n      requestCallback\n    );\n  });\n}\n\nmodule.exports = makeRequest;\n"]},"metadata":{},"sourceType":"script"}