{"ast":null,"code":"import { __rest } from '../../../_virtual/_tslib.js';\nimport React from 'react';\nimport { usePress } from '@react-aria/interactions';\nimport { classNames } from '../../../libs/class-names.js';\nimport { mergeProps } from '../../../libs/merge-props.js';\nimport { forwardRefWrapper } from '../../../libs/forward-ref-wrapper.js';\nimport modules_f608f1d4 from './linkable.less.js';\n/* eslint-disable jsx-a11y/no-noninteractive-tabindex */\n\nconst Linkable = /* @__PURE__ */forwardRefWrapper('Linkable', (props, externalRef) => {\n  const {\n    children,\n    onPress,\n    ambientUnderline,\n    className\n  } = props,\n        otherProps = __rest(props, [\"children\", \"onPress\", \"ambientUnderline\", \"className\"]);\n\n  const isTextChild = typeof children === 'string' || typeof children === 'number';\n  const {\n    pressProps\n  } = usePress({\n    onPress\n  });\n  return React.createElement(\"span\", Object.assign({\n    className: classNames([className, modules_f608f1d4.Linkable, ambientUnderline && modules_f608f1d4.ambientUnderline, isTextChild && modules_f608f1d4.isTextChild]),\n    role: isTextChild ? 'link' : undefined,\n    tabIndex: isTextChild ? 0 : -1\n  }, mergeProps(onPress ? pressProps : {}, otherProps), {\n    ref: externalRef\n  }), children);\n});\nexport { Linkable };","map":{"version":3,"sources":["../../../../../src/components/primitives/linkable/linkable.tsx"],"names":["styles"],"mappings":";;;;;;;AAAA;;MAgBa,QAAQ,GAAA,eAAmB,iBAAiB,CACvD,UADuD,EAGvD,CAAC,KAAD,EAAQ,WAAR,KAAmB;AACjB,QAAM;AAAE,IAAA,QAAF;AAAY,IAAA,OAAZ;AAAqB,IAAA,gBAArB;AAAuC,IAAA;AAAvC,MAAoE,KAA1E;AAAA,QAA2D,UAAU,GAAA,MAAA,CAAK,KAAL,EAA/D,CAAA,UAAA,EAAA,SAAA,EAAA,kBAAA,EAAA,WAAA,CAA+D,CAArE;;AAEA,QAAM,WAAW,GAAG,OAAO,QAAP,KAAoB,QAApB,IAAgC,OAAO,QAAP,KAAoB,QAAxE;AAEA,QAAM;AAAE,IAAA;AAAF,MAAiB,QAAQ,CAAC;AAAE,IAAA;AAAF,GAAD,CAA/B;AAEA,SACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACE,IAAA,SAAS,EAAE,UAAU,CAAC,CACpB,SADoB,EAEpBA,gBAAM,CAAC,QAFa,EAGpB,gBAAgB,IAAIA,gBAAM,CAAC,gBAHP,EAIpB,WAAW,IAAIA,gBAAM,CAAC,WAJF,CAAD,CADvB;AAOE,IAAA,IAAI,EAAE,WAAW,GAAG,MAAH,GAAY,SAP/B;AAQE,IAAA,QAAQ,EAAE,WAAW,GAAG,CAAH,GAAO,CAAC;AAR/B,GAAA,EASM,UAAU,CAAC,OAAO,GAAG,UAAH,GAAgB,EAAxB,EAA4B,UAA5B,CAThB,EASuD;AACrD,IAAA,GAAG,EAAE;AADgD,GATvD,CAAA,EAYG,QAZH,CADF;AAgBD,CA1BsD,C","sourcesContent":["/* eslint-disable jsx-a11y/no-noninteractive-tabindex */\n\nimport React from 'react';\nimport { PressEvent } from '@react-types/shared';\nimport { usePress } from '@react-aria/interactions';\nimport { mergeProps } from '../../../libs/merge-props';\nimport { classNames } from '../../../libs/class-names';\nimport { forwardRefWrapper } from '../../../libs/forward-ref-wrapper';\n\nimport styles from './linkable.less';\n\ninterface LinkableProps extends React.HTMLAttributes<HTMLSpanElement> {\n  onPress?: (event: PressEvent) => void;\n  ambientUnderline?: boolean;\n}\n\nexport const Linkable = /* @__PURE__ */ forwardRefWrapper<HTMLSpanElement, LinkableProps>(\n  'Linkable',\n\n  (props, externalRef) => {\n    const { children, onPress, ambientUnderline, className, ...otherProps } = props;\n\n    const isTextChild = typeof children === 'string' || typeof children === 'number';\n\n    const { pressProps } = usePress({ onPress });\n\n    return (\n      <span\n        className={classNames([\n          className,\n          styles.Linkable,\n          ambientUnderline && styles.ambientUnderline,\n          isTextChild && styles.isTextChild,\n        ])}\n        role={isTextChild ? 'link' : undefined}\n        tabIndex={isTextChild ? 0 : -1}\n        {...mergeProps(onPress ? pressProps : {}, otherProps)}\n        ref={externalRef as any}\n      >\n        {children}\n      </span>\n    );\n  },\n);\n"]},"metadata":{},"sourceType":"module"}