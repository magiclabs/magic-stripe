{"ast":null,"code":"import { useContext, createContext } from 'react';\nimport { createTheme } from '../../libs/theme/create-theme.js';\nimport { DEFAULT_THEME } from '../../libs/theme/default-theme.js';\nimport '@artsy/fresnel';\nconst ThemeContext = /* @__PURE__ */createContext({\n  theme: null\n});\n\nfunction useTheme(options) {\n  var _a;\n\n  const theme = (_a = useContext(ThemeContext).theme) !== null && _a !== void 0 ? _a : DEFAULT_THEME;\n\n  if (options === null || options === void 0 ? void 0 : options.inverseSemantics) {\n    const themeWithInverseSemantics = createTheme(Object.assign(Object.assign({}, theme.config), {\n      inverseSemantics: true\n    }));\n    return themeWithInverseSemantics;\n  }\n\n  return theme;\n}\n\nexport { ThemeContext, useTheme };","map":{"version":3,"sources":["../../../../src/components/theme/use-theme.ts"],"names":[],"mappings":";;;;MAOa,YAAY,GAAA,eAAmB,aAAa,CAAe;AACtE,EAAA,KAAK,EAAE;AAD+D,CAAf,C;;SAezC,Q,CAAS,O,EAAyB;;;AAChD,QAAM,KAAK,GAAA,CAAA,EAAA,GAAG,UAAU,CAAC,YAAD,CAAV,CAAyB,KAA5B,MAAiC,IAAjC,IAAiC,EAAA,KAAA,KAAA,CAAjC,GAAiC,EAAjC,GAAqC,aAAhD;;AAEA,MAAI,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,gBAAb,EAA+B;AAC7B,UAAM,yBAAyB,GAAG,WAAW,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAM,KAAK,CAAC,MAAZ,CAAA,EAAkB;AAAE,MAAA,gBAAgB,EAAE;AAApB,KAAlB,CAAA,CAA7C;AACA,WAAO,yBAAP;AACD;;AAED,SAAO,KAAP;AACF","sourcesContent":["import { useContext, createContext } from 'react';\nimport { Theme, DEFAULT_THEME, createTheme } from '../../libs/theme';\n\nexport interface ThemeContext {\n  theme: Theme | null;\n}\n\nexport const ThemeContext = /* @__PURE__ */ createContext<ThemeContext>({\n  theme: null,\n});\n\ninterface UseThemeOptions {\n  /**\n   * There are some design cases where `{color}_lighter` / `{color}_darker`\n   * semantics should be reversed. When this option is true, `{color}_lighter`\n   * becomes `{color}_darker` and vice versa.\n   *\n   * Use with care.\n   */\n  inverseSemantics?: boolean;\n}\n\nexport function useTheme(options?: UseThemeOptions) {\n  const theme = useContext(ThemeContext).theme ?? DEFAULT_THEME;\n\n  if (options?.inverseSemantics) {\n    const themeWithInverseSemantics = createTheme({ ...theme.config, inverseSemantics: true });\n    return themeWithInverseSemantics;\n  }\n\n  return theme;\n}\n"]},"metadata":{},"sourceType":"module"}