{"ast":null,"code":"import { createMedia } from './create-media.js';\n\nfunction getThemeVariables(theme) {\n  const createCSSVariableGroup = (name, rgba) => ({\n    [`--mg__${name}`]: rgba.base.array().slice(0, 3).join(', '),\n    [`--mg__${name}_lighter`]: rgba.lighter.array().slice(0, 3).join(', '),\n    [`--mg__${name}_lightest`]: rgba.lightest.array().slice(0, 3).join(', '),\n    [`--mg__${name}_darker`]: rgba.darker.array().slice(0, 3).join(', '),\n    [`--mg__${name}_darkest`]: rgba.darkest.array().slice(0, 3).join(', ')\n  });\n\n  const variables = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, createCSSVariableGroup('primary', theme.rgba.primary)), createCSSVariableGroup('secondary', theme.rgba.secondary)), createCSSVariableGroup('tertiary', theme.rgba.tertiary)), createCSSVariableGroup('success', theme.rgba.success)), createCSSVariableGroup('warning', theme.rgba.warning)), createCSSVariableGroup('error', theme.rgba.error)), createCSSVariableGroup('light', theme.rgba.light)), createCSSVariableGroup('dark', theme.rgba.dark)), createCSSVariableGroup('mid', theme.rgba.mid)), {\n    '--mg__font_sansSerif': theme.font.sansSerif,\n    '--mg__font_monospace': theme.font.monospace\n  });\n  return {\n    variables,\n\n    toCSS() {\n      /* eslint-disable prettier/prettier */\n      // Map theme variables to `:root` CSS block\n      const cssVars = Object.keys(variables).map(property => `  ${property}:${variables[property]};`).join('\\n');\n      const cssVarsFormatted = ['/* [@magiclabs/ui] Root CSS Variables */', ':root {', cssVars, '}'].join('\\n'); // Convert media queries to CSS (via `@artsy/fresnel`)\n\n      const mediaStyles = createMedia(theme.breakpoints).createMediaStyle();\n      const mediaStylesFormatted = ['/* [@artsy/fresnel] Media Queries */', mediaStyles].join('\\n');\n      /* eslint-enable prettier/prettier */\n      // Put it all together with nice formatting!\n\n      return [cssVarsFormatted, mediaStylesFormatted].join('\\n\\n');\n    },\n\n    applyToDocument() {\n      // For each CSS variable, we'll map it to the current `Document`.\n      for (const property of Object.keys(variables)) {\n        document.documentElement.style.setProperty(property, variables[property]);\n      } // FYI: We don't need to do anything with media queries from `@artsy/fresnel`\n      // here, those are handled client-side by that package internally.\n\n    }\n\n  };\n}\n\nexport { getThemeVariables };","map":{"version":3,"sources":["../../../../src/libs/theme/theme-variables.ts"],"names":[],"mappings":"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","sourcesContent":["import { createMedia } from './create-media';\nimport { Theme } from './theme-types';\n\ntype ThemeVariable =\n  | '--mg__primary'\n  | '--mg__primary_lighter'\n  | '--mg__primary_lightest'\n  | '--mg__primary_darker'\n  | '--mg__primary_darkest'\n  | '--mg__secondary'\n  | '--mg__secondary_lighter'\n  | '--mg__secondary_lightest'\n  | '--mg__secondary_darker'\n  | '--mg__secondary_darkest'\n  | '--mg__tertiary'\n  | '--mg__tertiary_lighter'\n  | '--mg__tertiary_lightest'\n  | '--mg__tertiary_darker'\n  | '--mg__tertiary_darkest'\n  | '--mg__success'\n  | '--mg__success_lighter'\n  | '--mg__success_lightest'\n  | '--mg__success_darker'\n  | '--mg__success_darkest'\n  | '--mg__warning'\n  | '--mg__warning_lighter'\n  | '--mg__warning_lightest'\n  | '--mg__warning_darker'\n  | '--mg__warning_darkest'\n  | '--mg__error'\n  | '--mg__error_lighter'\n  | '--mg__error_lightest'\n  | '--mg__error_darker'\n  | '--mg__error_darkest'\n  | '--mg__light'\n  | '--mg__light_lighter'\n  | '--mg__light_lightest'\n  | '--mg__light_darker'\n  | '--mg__light_darkest'\n  | '--mg__dark'\n  | '--mg__dark_lighter'\n  | '--mg__dark_lightest'\n  | '--mg__dark_darker'\n  | '--mg__dark_darkest'\n  | '--mg__mid'\n  | '--mg__mid_lighter'\n  | '--mg__mid_lightest'\n  | '--mg__mid_darker'\n  | '--mg__mid_darkest'\n  | '--mg__font_sansSerif'\n  | '--mg__font_monospace';\n\nexport function getThemeVariables(theme: Theme) {\n  const createCSSVariableGroup = <T extends keyof typeof theme['rgba']>(name: T, rgba: typeof theme['rgba'][T]) =>\n    ({\n      [`--mg__${name}`]: rgba.base.array().slice(0, 3).join(', '),\n      [`--mg__${name}_lighter`]: rgba.lighter.array().slice(0, 3).join(', '),\n      [`--mg__${name}_lightest`]: rgba.lightest.array().slice(0, 3).join(', '),\n      [`--mg__${name}_darker`]: rgba.darker.array().slice(0, 3).join(', '),\n      [`--mg__${name}_darkest`]: rgba.darkest.array().slice(0, 3).join(', '),\n    } as any);\n\n  const variables: Record<ThemeVariable, string> = {\n    ...createCSSVariableGroup('primary', theme.rgba.primary),\n    ...createCSSVariableGroup('secondary', theme.rgba.secondary),\n    ...createCSSVariableGroup('tertiary', theme.rgba.tertiary),\n    ...createCSSVariableGroup('success', theme.rgba.success),\n    ...createCSSVariableGroup('warning', theme.rgba.warning),\n    ...createCSSVariableGroup('error', theme.rgba.error),\n    ...createCSSVariableGroup('light', theme.rgba.light),\n    ...createCSSVariableGroup('dark', theme.rgba.dark),\n    ...createCSSVariableGroup('mid', theme.rgba.mid),\n    '--mg__font_sansSerif': theme.font.sansSerif,\n    '--mg__font_monospace': theme.font.monospace,\n  };\n\n  return {\n    variables,\n\n    toCSS() {\n      /* eslint-disable prettier/prettier */\n\n      // Map theme variables to `:root` CSS block\n      const cssVars = Object.keys(variables).map((property) => `  ${property}:${variables[property]};`).join('\\n');\n      const cssVarsFormatted = ['/* [@magiclabs/ui] Root CSS Variables */', ':root {', cssVars, '}'].join('\\n');\n\n      // Convert media queries to CSS (via `@artsy/fresnel`)\n      const mediaStyles = createMedia(theme.breakpoints).createMediaStyle();\n      const mediaStylesFormatted = ['/* [@artsy/fresnel] Media Queries */', mediaStyles].join('\\n');\n\n      /* eslint-enable prettier/prettier */\n\n      // Put it all together with nice formatting!\n      return [cssVarsFormatted, mediaStylesFormatted].join('\\n\\n');\n    },\n\n    applyToDocument() {\n      // For each CSS variable, we'll map it to the current `Document`.\n      for (const property of Object.keys(variables)) {\n        document.documentElement.style.setProperty(property, variables[property]);\n      }\n\n      // FYI: We don't need to do anything with media queries from `@artsy/fresnel`\n      // here, those are handled client-side by that package internally.\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}