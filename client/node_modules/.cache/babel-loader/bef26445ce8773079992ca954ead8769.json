{"ast":null,"code":"import Color from 'color';\nimport md5 from 'blueimp-md5'; // @see https://github.com/Qix-/color/issues/53\n\nfunction lightenBy(color, ratio) {\n  const lightness = color.lightness();\n  /* eslint-disable-next-line @typescript-eslint/restrict-plus-operands */\n\n  return color.lightness(lightness + (100 - lightness) * ratio);\n} // @see https://github.com/Qix-/color/issues/53\n\n\nfunction darkenBy(color, ratio) {\n  const lightness = color.lightness();\n  return color.lightness(lightness - lightness * ratio);\n}\n/**\r\n * Creates an object of resolver functions for the given RGBA color name and\r\n * color representation.\r\n */\n\n\nfunction createRgbaColorResolvers(colorRepresentation) {\n  const color = Color(colorRepresentation);\n  return {\n    string: (alpha = 1) => {\n      const rgbString = color.rgb().array().join(', ');\n      return `rgba(${rgbString}, ${alpha})`;\n    },\n    array: (alpha = 1) => [...color.rgb().array().map(val => String(val)), String(alpha)]\n  };\n}\n/**\r\n * Return a partial `ThemeContext` object with `secondaryColor` and `tertiary`\r\n * set for greatest contrast.\r\n */\n\n\nfunction createTheme(config) {\n  var _a, _b, _c, _d, _e, _f; // Theme type (\"dark\", \"light\", or \"auto\").\n\n\n  const themeType = (_a = config.type) !== null && _a !== void 0 ? _a : 'auto'; // Color values\n\n  const primaryColor = Color(typeof config.primaryColor === 'string' ? config.primaryColor : config.primaryColor.base);\n  const lightColor = Color(typeof config.lightColor === 'string' ? config.lightColor : config.lightColor.base);\n  const darkColor = Color(typeof config.darkColor === 'string' ? config.darkColor : config.darkColor.base);\n  const midColor = Color(typeof config.midColor === 'string' ? config.midColor : config.midColor.base);\n  const successColor = Color(typeof config.successColor === 'string' ? config.successColor : config.successColor.base);\n  const warningColor = Color(typeof config.warningColor === 'string' ? config.warningColor : config.warningColor.base);\n  const errorColor = Color(typeof config.errorColor === 'string' ? config.errorColor : config.errorColor.base); // Font values\n\n  const sansSerif = (_c = (_b = config.font) === null || _b === void 0 ? void 0 : _b.sansSerif) !== null && _c !== void 0 ? _c : 'ProximaNova, -apple-system, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif';\n  const monospace = (_e = (_d = config.font) === null || _d === void 0 ? void 0 : _d.monospace) !== null && _e !== void 0 ? _e : 'monospace'; // Responsive values\n\n  const breakpoints = config.breakpoints ? Object.assign({\n    xs: 0\n  }, config.breakpoints) : {\n    xs: 0,\n    sm: 768,\n    md: 1024,\n    lg: 1216,\n    xl: 1408\n  }; // Determine secondary/tertiary colors with best contrast\n\n  const isDarkTheme =\n  /* eslint-disable-next-line no-nested-ternary */\n  themeType === 'dark' ? true : themeType === 'light' ? false : !primaryColor.isDark();\n  const isLowContrast = isDarkTheme !== !primaryColor.isDark();\n  const secondaryColor = isDarkTheme ? darkColor : lightColor;\n  const tertiaryColor = isDarkTheme ? lightColor : darkColor; // Determine how far to shift the color value for 'Darker/Lighter' variants.\n  // Stronger contrast === larger shift\n\n  const [colorValueShift, colorValueShiftFurther] = (_f = config.shift) !== null && _f !== void 0 ? _f : [0.5, 0.75]; // --- Hex values\n\n  const createHexGroup = (base, def) => {\n    const withDefaultSemantics = {\n      base: base.hex(),\n      lighter: typeof def === 'string' ? lightenBy(base, colorValueShift).hex() : Color(def.lighter).hex(),\n      lightest: typeof def === 'string' ? lightenBy(base, colorValueShiftFurther).hex() : Color(def.lightest).hex(),\n      darker: typeof def === 'string' ? darkenBy(base, colorValueShift).hex() : Color(def.darker).hex(),\n      darkest: typeof def === 'string' ? darkenBy(base, colorValueShiftFurther).hex() : Color(def.darkest).hex()\n    }; //   `darker` -> `lighter`\n    // `lightest` -> `darkest`\n    // ...and so forth\n\n    const withInverseSemantics = {\n      base: withDefaultSemantics.base,\n      lighter: withDefaultSemantics.darker,\n      lightest: withDefaultSemantics.darkest,\n      darker: withDefaultSemantics.lighter,\n      darkest: withDefaultSemantics.lightest\n    };\n    return config.inverseSemantics ? withInverseSemantics : withDefaultSemantics;\n  };\n\n  const hexResult = {\n    primary: createHexGroup(primaryColor, config.primaryColor),\n    secondary: createHexGroup(secondaryColor, isDarkTheme ? config.darkColor : config.lightColor),\n    tertiary: createHexGroup(tertiaryColor, isDarkTheme ? config.lightColor : config.darkColor),\n    success: createHexGroup(successColor, config.successColor),\n    warning: createHexGroup(warningColor, config.warningColor),\n    error: createHexGroup(errorColor, config.errorColor),\n    light: createHexGroup(lightColor, config.lightColor),\n    dark: createHexGroup(darkColor, config.darkColor),\n    mid: createHexGroup(midColor, config.midColor)\n  }; // --- RGBA values\n\n  const createRgbaGroup = hex => ({\n    base: createRgbaColorResolvers(hex.base),\n    lighter: createRgbaColorResolvers(hex.lighter),\n    lightest: createRgbaColorResolvers(hex.lightest),\n    darker: createRgbaColorResolvers(hex.darker),\n    darkest: createRgbaColorResolvers(hex.darkest)\n  });\n\n  const rgbaResult = {\n    primary: createRgbaGroup(hexResult.primary),\n    secondary: createRgbaGroup(hexResult.secondary),\n    tertiary: createRgbaGroup(hexResult.tertiary),\n    success: createRgbaGroup(hexResult.success),\n    warning: createRgbaGroup(hexResult.warning),\n    error: createRgbaGroup(hexResult.error),\n    light: createRgbaGroup(hexResult.light),\n    dark: createRgbaGroup(hexResult.dark),\n    mid: createRgbaGroup(hexResult.mid)\n  }; // --- Color instance values\n\n  const createColorGroup = hex => ({\n    base: Color(hex.base),\n    lighter: Color(hex.lighter),\n    lightest: Color(hex.lightest),\n    darker: Color(hex.darker),\n    darkest: Color(hex.darkest)\n  });\n\n  const colorResult = {\n    primary: createColorGroup(hexResult.primary),\n    secondary: createColorGroup(hexResult.secondary),\n    tertiary: createColorGroup(hexResult.tertiary),\n    success: createColorGroup(hexResult.success),\n    warning: createColorGroup(hexResult.warning),\n    error: createColorGroup(hexResult.error),\n    light: createColorGroup(hexResult.light),\n    dark: createColorGroup(hexResult.dark),\n    mid: createColorGroup(hexResult.mid)\n  }; // --- Create a hash of the theme to track changes\n\n  let key = Object.keys(hexResult).reduce((p1, c1) => {\n    return `${p1}:${Object.keys(hexResult[c1]).reduce((p2, c2) => {\n      return `${p2}:${hexResult[c1][c2]}`;\n    }, c1)}`;\n  }, 'theme');\n  key += isDarkTheme ? ':dark' : ':light';\n  key += isLowContrast ? ':lowcontrast' : '';\n  key += `:${sansSerif}:${monospace}`;\n  key += `:${config.inverseSemantics ? 'inverse_semantics' : 'default_semantics'}`;\n  key += Object.keys(breakpoints).reduce((a, b) => `${a}:${b}`, 'breakpoints');\n  key = md5(key); // ---\n\n  return {\n    isDarkTheme,\n    isLightTheme: !isDarkTheme,\n    isLowContrast,\n    hex: hexResult,\n    rgba: rgbaResult,\n    color: colorResult,\n    font: {\n      sansSerif,\n      monospace\n    },\n    breakpoints,\n    key,\n    config\n  };\n}\n\nexport { createTheme };","map":{"version":3,"sources":["../../../../src/libs/theme/create-theme.ts"],"names":[],"mappings":"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","sourcesContent":["import Color from 'color';\nimport md5 from 'blueimp-md5';\nimport { Breakpoint, BreakpointConfig, ThemeType } from './theme-types';\n\ntype ColorParam = Color | string | ArrayLike<number> | number | { [key: string]: any };\n\ninterface RgbaResolver {\n  string(alpha?: string | number): string;\n  array(alpha?: string | number): [string, string, string, string]; // [R, G, B, A]\n}\n\n// @see https://github.com/Qix-/color/issues/53\nfunction lightenBy(color: Color, ratio: number) {\n  const lightness = color.lightness();\n  /* eslint-disable-next-line @typescript-eslint/restrict-plus-operands */\n  return color.lightness(lightness + (100 - lightness) * ratio);\n}\n\n// @see https://github.com/Qix-/color/issues/53\nfunction darkenBy(color: Color, ratio: number) {\n  const lightness = color.lightness();\n  return color.lightness(lightness - lightness * ratio);\n}\n\n/**\n * Creates an object of resolver functions for the given RGBA color name and\n * color representation.\n */\nfunction createRgbaColorResolvers(colorRepresentation: ColorParam): RgbaResolver {\n  const color = Color(colorRepresentation);\n\n  return {\n    string: (alpha = 1) => {\n      const rgbString = color.rgb().array().join(', ');\n      return `rgba(${rgbString}, ${alpha})`;\n    },\n\n    array: (alpha = 1) =>\n      [\n        ...color\n          .rgb()\n          .array()\n          .map((val) => String(val)),\n        String(alpha),\n      ] as [string, string, string, string],\n  };\n}\n\ntype ColorDefinition =\n  | string\n  | {\n      base: string;\n      lighter: string;\n      lightest: string;\n      darker: string;\n      darkest: string;\n    };\n\ninterface ThemeConfig {\n  // Colors\n  primaryColor: ColorDefinition;\n  lightColor: ColorDefinition;\n  darkColor: ColorDefinition;\n  midColor: ColorDefinition;\n  successColor: ColorDefinition;\n  warningColor: ColorDefinition;\n  errorColor: ColorDefinition;\n\n  // Misc.\n  shift?: [number, number];\n  type?: ThemeType;\n  font?: { sansSerif?: string; monospace?: string };\n  breakpoints?: Record<Exclude<Breakpoint, 'xs'>, number>;\n\n  /**\n   * There are some design cases where `{color}_lighter` / `{color}_darker`\n   * semantics should be reversed. When this option is true, `{color}_lighter`\n   * becomes `{color}_darker` and vice versa.\n   *\n   * Use with care.\n   */\n  inverseSemantics?: boolean;\n}\n\n/**\n * Return a partial `ThemeContext` object with `secondaryColor` and `tertiary`\n * set for greatest contrast.\n */\nexport function createTheme<T extends ThemeConfig>(config: T) {\n  // Theme type (\"dark\", \"light\", or \"auto\").\n  const themeType = config.type ?? 'auto';\n\n  // Color values\n  const primaryColor = Color(typeof config.primaryColor === 'string' ? config.primaryColor : config.primaryColor.base);\n  const lightColor = Color(typeof config.lightColor === 'string' ? config.lightColor : config.lightColor.base);\n  const darkColor = Color(typeof config.darkColor === 'string' ? config.darkColor : config.darkColor.base);\n  const midColor = Color(typeof config.midColor === 'string' ? config.midColor : config.midColor.base);\n  const successColor = Color(typeof config.successColor === 'string' ? config.successColor : config.successColor.base);\n  const warningColor = Color(typeof config.warningColor === 'string' ? config.warningColor : config.warningColor.base);\n  const errorColor = Color(typeof config.errorColor === 'string' ? config.errorColor : config.errorColor.base);\n\n  // Font values\n  const sansSerif =\n    config.font?.sansSerif ??\n    'ProximaNova, -apple-system, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif';\n  const monospace = config.font?.monospace ?? 'monospace';\n\n  // Responsive values\n  const breakpoints: BreakpointConfig = config.breakpoints\n    ? { xs: 0, ...config.breakpoints }\n    : { xs: 0, sm: 768, md: 1024, lg: 1216, xl: 1408 };\n\n  // Determine secondary/tertiary colors with best contrast\n  const isDarkTheme =\n    /* eslint-disable-next-line no-nested-ternary */\n    themeType === 'dark' ? true : themeType === 'light' ? false : !primaryColor.isDark();\n  const isLowContrast = isDarkTheme !== !primaryColor.isDark();\n  const secondaryColor = isDarkTheme ? darkColor : lightColor;\n  const tertiaryColor = isDarkTheme ? lightColor : darkColor;\n\n  // Determine how far to shift the color value for 'Darker/Lighter' variants.\n  // Stronger contrast === larger shift\n  const [colorValueShift, colorValueShiftFurther] = config.shift ?? [0.5, 0.75];\n\n  // --- Hex values\n\n  const createHexGroup = (base: Color, def: ColorDefinition) => {\n    const withDefaultSemantics = {\n      base: base.hex(),\n      lighter: typeof def === 'string' ? lightenBy(base, colorValueShift).hex() : Color(def.lighter).hex(),\n      lightest: typeof def === 'string' ? lightenBy(base, colorValueShiftFurther).hex() : Color(def.lightest).hex(),\n      darker: typeof def === 'string' ? darkenBy(base, colorValueShift).hex() : Color(def.darker).hex(),\n      darkest: typeof def === 'string' ? darkenBy(base, colorValueShiftFurther).hex() : Color(def.darkest).hex(),\n    };\n\n    //   `darker` -> `lighter`\n    // `lightest` -> `darkest`\n    // ...and so forth\n    const withInverseSemantics = {\n      base: withDefaultSemantics.base,\n      lighter: withDefaultSemantics.darker,\n      lightest: withDefaultSemantics.darkest,\n      darker: withDefaultSemantics.lighter,\n      darkest: withDefaultSemantics.lightest,\n    };\n\n    return config.inverseSemantics ? withInverseSemantics : withDefaultSemantics;\n  };\n\n  const hexResult = {\n    primary: createHexGroup(primaryColor, config.primaryColor),\n    secondary: createHexGroup(secondaryColor, isDarkTheme ? config.darkColor : config.lightColor),\n    tertiary: createHexGroup(tertiaryColor, isDarkTheme ? config.lightColor : config.darkColor),\n    success: createHexGroup(successColor, config.successColor),\n    warning: createHexGroup(warningColor, config.warningColor),\n    error: createHexGroup(errorColor, config.errorColor),\n    light: createHexGroup(lightColor, config.lightColor),\n    dark: createHexGroup(darkColor, config.darkColor),\n    mid: createHexGroup(midColor, config.midColor),\n  };\n\n  // --- RGBA values\n\n  const createRgbaGroup = <T extends keyof typeof hexResult>(hex: typeof hexResult[T]) => ({\n    base: createRgbaColorResolvers(hex.base),\n    lighter: createRgbaColorResolvers(hex.lighter),\n    lightest: createRgbaColorResolvers(hex.lightest),\n    darker: createRgbaColorResolvers(hex.darker),\n    darkest: createRgbaColorResolvers(hex.darkest),\n  });\n\n  const rgbaResult = {\n    primary: createRgbaGroup(hexResult.primary),\n    secondary: createRgbaGroup(hexResult.secondary),\n    tertiary: createRgbaGroup(hexResult.tertiary),\n    success: createRgbaGroup(hexResult.success),\n    warning: createRgbaGroup(hexResult.warning),\n    error: createRgbaGroup(hexResult.error),\n    light: createRgbaGroup(hexResult.light),\n    dark: createRgbaGroup(hexResult.dark),\n    mid: createRgbaGroup(hexResult.mid),\n  };\n\n  // --- Color instance values\n\n  const createColorGroup = <T extends keyof typeof hexResult>(hex: typeof hexResult[T]) => ({\n    base: Color(hex.base),\n    lighter: Color(hex.lighter),\n    lightest: Color(hex.lightest),\n    darker: Color(hex.darker),\n    darkest: Color(hex.darkest),\n  });\n\n  const colorResult = {\n    primary: createColorGroup(hexResult.primary),\n    secondary: createColorGroup(hexResult.secondary),\n    tertiary: createColorGroup(hexResult.tertiary),\n    success: createColorGroup(hexResult.success),\n    warning: createColorGroup(hexResult.warning),\n    error: createColorGroup(hexResult.error),\n    light: createColorGroup(hexResult.light),\n    dark: createColorGroup(hexResult.dark),\n    mid: createColorGroup(hexResult.mid),\n  };\n\n  // --- Create a hash of the theme to track changes\n\n  let key = Object.keys(hexResult).reduce((p1, c1) => {\n    return `${p1}:${Object.keys(hexResult[c1]).reduce((p2, c2) => {\n      return `${p2}:${hexResult[c1][c2]}`;\n    }, c1)}`;\n  }, 'theme');\n\n  key += isDarkTheme ? ':dark' : ':light';\n  key += isLowContrast ? ':lowcontrast' : '';\n  key += `:${sansSerif}:${monospace}`;\n  key += `:${config.inverseSemantics ? 'inverse_semantics' : 'default_semantics'}`;\n  key += Object.keys(breakpoints).reduce((a, b) => `${a}:${b}`, 'breakpoints');\n\n  key = md5(key);\n\n  // ---\n\n  return {\n    isDarkTheme,\n    isLightTheme: !isDarkTheme,\n    isLowContrast,\n    hex: hexResult,\n    rgba: rgbaResult,\n    color: colorResult,\n    font: { sansSerif, monospace },\n    breakpoints,\n    key,\n    config,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}