{"ast":null,"code":"/* eslint-disable no-underscore-dangle, no-param-reassign  */\nimport { __awaiter, __generator } from \"tslib\";\nimport semverSatisfies from 'semver/functions/satisfies';\nimport { encodeJSON } from '../util/base64-json';\nimport { createMissingApiKeyError, createReactNativeEndpointConfigurationWarning, createIncompatibleExtensionsError } from './sdk-exceptions';\nimport { AuthModule } from '../modules/auth';\nimport { UserModule } from '../modules/user';\nimport { RPCProviderModule } from '../modules/rpc-provider';\nimport { createURL } from '../util/url';\nimport { Extension } from '../modules/base-extension';\nimport { isEmpty } from '../util/type-guards';\nimport { SDKEnvironment, sdkNameToEnvName } from './sdk-environment';\n/**\n * Checks if the given `ext` is compatible with the platform & version of Magic\n * SDK currently in use.\n */\n\nfunction checkExtensionCompat(ext) {\n  if (ext.compat) {\n    // Check web compatibility\n    if (SDKEnvironment.sdkName === 'magic-sdk') {\n      return typeof ext.compat['magic-sdk'] === 'string' ? semverSatisfies(SDKEnvironment.version, ext.compat['magic-sdk']) : !!ext.compat['magic-sdk'];\n    } // Check React Native compatibility\n\n    /* istanbul ignore else */\n\n\n    if (SDKEnvironment.sdkName === '@magic-sdk/react-native') {\n      return typeof ext.compat['@magic-sdk/react-native'] === 'string' ? semverSatisfies(SDKEnvironment.version, ext.compat['@magic-sdk/react-native']) : !!ext.compat['@magic-sdk/react-native'];\n    } // Else case should be impossible here...\n\n  } // To gracefully support older extensions, we assume\n  // compatibility when the `compat` field is missing.\n\n\n  return true;\n}\n/**\n * Initializes SDK extensions, checks for platform/version compatiblity issues,\n * then consolidates any global configurations provided by those extensions.\n */\n\n\nfunction prepareExtensions(options) {\n  var _this = this;\n\n  var _a;\n\n  var extensions = (_a = options === null || options === void 0 ? void 0 : options.extensions) !== null && _a !== void 0 ? _a : [];\n  var extConfig = {};\n  var incompatibleExtensions = [];\n\n  if (Array.isArray(extensions)) {\n    extensions.forEach(function (ext) {\n      if (checkExtensionCompat(ext)) {\n        ext.init(_this);\n        _this[ext.name] = ext;\n\n        if (ext instanceof Extension.Internal) {\n          if (!isEmpty(ext.config)) extConfig[ext.name] = ext.config;\n        }\n      } else {\n        incompatibleExtensions.push(ext);\n      }\n    });\n  } else {\n    Object.keys(extensions).forEach(function (name) {\n      if (checkExtensionCompat(extensions[name])) {\n        extensions[name].init(_this);\n        var ext = extensions[name];\n        _this[name] = ext;\n\n        if (ext instanceof Extension.Internal) {\n          if (!isEmpty(ext.config)) extConfig[extensions[name].name] = ext.config;\n        }\n      } else {\n        incompatibleExtensions.push(extensions[name]);\n      }\n    });\n  }\n\n  if (incompatibleExtensions.length) {\n    throw createIncompatibleExtensionsError(incompatibleExtensions);\n  }\n\n  return extConfig;\n}\n\nvar SDKBase =\n/** @class */\nfunction () {\n  /**\n   * Creates an instance of Magic SDK.\n   */\n  function SDKBase(apiKey, options) {\n    var _a;\n\n    this.apiKey = apiKey;\n    if (!apiKey) throw createMissingApiKeyError();\n\n    if (SDKEnvironment.platform === 'react-native' && (options === null || options === void 0 ? void 0 : options.endpoint)) {\n      createReactNativeEndpointConfigurationWarning().log();\n    }\n\n    var defaultEndpoint = SDKEnvironment.defaultEndpoint,\n        version = SDKEnvironment.version;\n    this.endpoint = createURL((_a = options === null || options === void 0 ? void 0 : options.endpoint) !== null && _a !== void 0 ? _a : defaultEndpoint).origin; // Prepare built-in modules\n\n    this.auth = new AuthModule(this);\n    this.user = new UserModule(this);\n    this.rpcProvider = new RPCProviderModule(this); // Prepare extensions\n\n    var extConfig = prepareExtensions.call(this, options); // Encode parameters as base64-JSON\n\n    this.parameters = encodeJSON({\n      API_KEY: this.apiKey,\n      DOMAIN_ORIGIN: window.location ? window.location.origin : '',\n      ETH_NETWORK: options === null || options === void 0 ? void 0 : options.network,\n      host: createURL(this.endpoint).host,\n      sdk: sdkNameToEnvName[SDKEnvironment.sdkName],\n      version: version,\n      ext: isEmpty(extConfig) ? undefined : extConfig,\n      locale: (options === null || options === void 0 ? void 0 : options.locale) || 'en_US'\n    });\n  }\n\n  Object.defineProperty(SDKBase.prototype, \"transport\", {\n    /**\n     * Represents the JSON RPC payload message channel associated with this\n     * `MagicSDK` instance.\n     */\n    get: function () {\n      if (!SDKBase.__transports__.has(this.parameters)) {\n        SDKBase.__transports__.set(this.parameters, new SDKEnvironment.PayloadTransport(this.endpoint, this.parameters));\n      }\n\n      return SDKBase.__transports__.get(this.parameters);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SDKBase.prototype, \"overlay\", {\n    /**\n     * Represents the view controller associated with this `MagicSDK` instance.\n     */\n    get: function () {\n      if (!SDKBase.__overlays__.has(this.parameters)) {\n        var controller = new SDKEnvironment.ViewController(this.transport);\n\n        SDKBase.__overlays__.set(this.parameters, controller);\n      }\n\n      return SDKBase.__overlays__.get(this.parameters);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Preloads the Magic view, allowing for faster initial requests in browser\n   * environments. Awaiting the returned promise will signal when the Magic view\n   * has completed loading and is ready for requests.\n   */\n\n  SDKBase.prototype.preload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.overlay.ready];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SDKBase.__transports__ = new Map();\n  SDKBase.__overlays__ = new Map();\n  return SDKBase;\n}();\n\nexport { SDKBase };","map":{"version":3,"sources":["../../../src/core/sdk.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/* eslint-disable no-underscore-dangle, no-param-reassign  */\nimport { __awaiter, __generator } from \"tslib\";\nimport semverSatisfies from 'semver/functions/satisfies';\nimport { encodeJSON } from '../util/base64-json';\nimport { createMissingApiKeyError, createReactNativeEndpointConfigurationWarning, createIncompatibleExtensionsError, } from './sdk-exceptions';\nimport { AuthModule } from '../modules/auth';\nimport { UserModule } from '../modules/user';\nimport { RPCProviderModule } from '../modules/rpc-provider';\nimport { createURL } from '../util/url';\nimport { Extension } from '../modules/base-extension';\nimport { isEmpty } from '../util/type-guards';\nimport { SDKEnvironment, sdkNameToEnvName } from './sdk-environment';\n/**\n * Checks if the given `ext` is compatible with the platform & version of Magic\n * SDK currently in use.\n */\nfunction checkExtensionCompat(ext) {\n    if (ext.compat) {\n        // Check web compatibility\n        if (SDKEnvironment.sdkName === 'magic-sdk') {\n            return typeof ext.compat['magic-sdk'] === 'string'\n                ? semverSatisfies(SDKEnvironment.version, ext.compat['magic-sdk'])\n                : !!ext.compat['magic-sdk'];\n        }\n        // Check React Native compatibility\n        /* istanbul ignore else */\n        if (SDKEnvironment.sdkName === '@magic-sdk/react-native') {\n            return typeof ext.compat['@magic-sdk/react-native'] === 'string'\n                ? semverSatisfies(SDKEnvironment.version, ext.compat['@magic-sdk/react-native'])\n                : !!ext.compat['@magic-sdk/react-native'];\n        }\n        // Else case should be impossible here...\n    }\n    // To gracefully support older extensions, we assume\n    // compatibility when the `compat` field is missing.\n    return true;\n}\n/**\n * Initializes SDK extensions, checks for platform/version compatiblity issues,\n * then consolidates any global configurations provided by those extensions.\n */\nfunction prepareExtensions(options) {\n    var _this = this;\n    var _a;\n    var extensions = (_a = options === null || options === void 0 ? void 0 : options.extensions) !== null && _a !== void 0 ? _a : [];\n    var extConfig = {};\n    var incompatibleExtensions = [];\n    if (Array.isArray(extensions)) {\n        extensions.forEach(function (ext) {\n            if (checkExtensionCompat(ext)) {\n                ext.init(_this);\n                _this[ext.name] = ext;\n                if (ext instanceof Extension.Internal) {\n                    if (!isEmpty(ext.config))\n                        extConfig[ext.name] = ext.config;\n                }\n            }\n            else {\n                incompatibleExtensions.push(ext);\n            }\n        });\n    }\n    else {\n        Object.keys(extensions).forEach(function (name) {\n            if (checkExtensionCompat(extensions[name])) {\n                extensions[name].init(_this);\n                var ext = extensions[name];\n                _this[name] = ext;\n                if (ext instanceof Extension.Internal) {\n                    if (!isEmpty(ext.config))\n                        extConfig[extensions[name].name] = ext.config;\n                }\n            }\n            else {\n                incompatibleExtensions.push(extensions[name]);\n            }\n        });\n    }\n    if (incompatibleExtensions.length) {\n        throw createIncompatibleExtensionsError(incompatibleExtensions);\n    }\n    return extConfig;\n}\nvar SDKBase = /** @class */ (function () {\n    /**\n     * Creates an instance of Magic SDK.\n     */\n    function SDKBase(apiKey, options) {\n        var _a;\n        this.apiKey = apiKey;\n        if (!apiKey)\n            throw createMissingApiKeyError();\n        if (SDKEnvironment.platform === 'react-native' && (options === null || options === void 0 ? void 0 : options.endpoint)) {\n            createReactNativeEndpointConfigurationWarning().log();\n        }\n        var defaultEndpoint = SDKEnvironment.defaultEndpoint, version = SDKEnvironment.version;\n        this.endpoint = createURL((_a = options === null || options === void 0 ? void 0 : options.endpoint) !== null && _a !== void 0 ? _a : defaultEndpoint).origin;\n        // Prepare built-in modules\n        this.auth = new AuthModule(this);\n        this.user = new UserModule(this);\n        this.rpcProvider = new RPCProviderModule(this);\n        // Prepare extensions\n        var extConfig = prepareExtensions.call(this, options);\n        // Encode parameters as base64-JSON\n        this.parameters = encodeJSON({\n            API_KEY: this.apiKey,\n            DOMAIN_ORIGIN: window.location ? window.location.origin : '',\n            ETH_NETWORK: options === null || options === void 0 ? void 0 : options.network,\n            host: createURL(this.endpoint).host,\n            sdk: sdkNameToEnvName[SDKEnvironment.sdkName],\n            version: version,\n            ext: isEmpty(extConfig) ? undefined : extConfig,\n            locale: (options === null || options === void 0 ? void 0 : options.locale) || 'en_US',\n        });\n    }\n    Object.defineProperty(SDKBase.prototype, \"transport\", {\n        /**\n         * Represents the JSON RPC payload message channel associated with this\n         * `MagicSDK` instance.\n         */\n        get: function () {\n            if (!SDKBase.__transports__.has(this.parameters)) {\n                SDKBase.__transports__.set(this.parameters, new SDKEnvironment.PayloadTransport(this.endpoint, this.parameters));\n            }\n            return SDKBase.__transports__.get(this.parameters);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SDKBase.prototype, \"overlay\", {\n        /**\n         * Represents the view controller associated with this `MagicSDK` instance.\n         */\n        get: function () {\n            if (!SDKBase.__overlays__.has(this.parameters)) {\n                var controller = new SDKEnvironment.ViewController(this.transport);\n                SDKBase.__overlays__.set(this.parameters, controller);\n            }\n            return SDKBase.__overlays__.get(this.parameters);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Preloads the Magic view, allowing for faster initial requests in browser\n     * environments. Awaiting the returned promise will signal when the Magic view\n     * has completed loading and is ready for requests.\n     */\n    SDKBase.prototype.preload = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.overlay.ready];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    SDKBase.__transports__ = new Map();\n    SDKBase.__overlays__ = new Map();\n    return SDKBase;\n}());\nexport { SDKBase };\n//# sourceMappingURL=sdk.js.map"]},"metadata":{},"sourceType":"module"}