{"ast":null,"code":"import { __rest } from '../../../_virtual/_tslib.js';\nimport React, { useRef, useEffect } from 'react';\nimport { usePress, useHover } from '@react-aria/interactions';\nimport { useFocusRing } from '@react-aria/focus';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport { classNames } from '../../../libs/class-names.js';\nimport { mergeProps } from '../../../libs/merge-props.js';\nimport 'color';\nimport 'blueimp-md5';\nimport '@artsy/fresnel';\nimport { forwardRefWrapper } from '../../../libs/forward-ref-wrapper.js';\nimport { Icon } from '../../icons/icon-base.js';\nimport 'usable-react';\nimport composeRefs from '@seznam/compose-react-refs';\nimport '../../theme/inverse-theme-semantics.js';\nimport '@react-aria/ssr';\nimport '../../theme/theme-provider.js';\nimport { Spacer } from '../../layout/spacer.js';\nimport { useScaleIn, useScale } from '../../../hooks/transitions.js';\nimport 'react-dom';\nimport 'watch-resize';\nimport modules_d386e407 from './checkbox.less.js';\n/* eslint-disable jsx-a11y/label-has-associated-control */\n\nconst CheckmarkIcon = {\n  SVGContents: ({\n    fill\n  }) => {\n    return React.createElement(\"path\", Object.assign({\n      d: \"M12.9374 0.446429L13.2945 0.848214C13.5177 1.02679 13.5177 1.38393 13.2945 1.60714L5.25879 9.59822C5.03558 9.77679 4.67843 9.77679 4.49986 9.59822L0.660575 5.71429C0.43736 5.49107 0.43736 5.17857 0.660575 4.95536L1.01772 4.59821C1.24093 4.375 1.59807 4.375 1.77665 4.59821L4.857 7.67857L12.1784 0.446429C12.357 0.267857 12.7141 0.267857 12.9374 0.446429Z\"\n    }, fill));\n  },\n  viewbox: [0, 0, 14, 10],\n  color: theme => theme.hex.secondary.base\n};\nconst Checkbox = /* @__PURE__ */forwardRefWrapper('Checkbox', {\n  color: 'primary'\n}, (props, externalRef) => {\n  const {\n    onPress,\n    disabled,\n    checked,\n    label,\n    indeterminate,\n    color\n  } = props,\n        otherProps = __rest(props, [\"onPress\", \"disabled\", \"checked\", \"label\", \"indeterminate\", \"color\"]);\n\n  const inputRef = useRef(null);\n  const {\n    isFocusVisible,\n    focusProps\n  } = useFocusRing();\n  const {\n    pressProps,\n    isPressed\n  } = usePress({\n    onPress,\n    isDisabled: disabled\n  });\n  const {\n    isHovered,\n    hoverProps\n  } = useHover({\n    isDisabled: disabled\n  });\n  const getScaleInProps = useScaleIn();\n  const getScaleProps = useScale();\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.indeterminate = !!indeterminate;\n    }\n  }, [indeterminate]);\n  return React.createElement(\"label\", {\n    className: modules_d386e407.Checkbox\n  }, React.createElement(\"input\", Object.assign({\n    type: \"checkbox\",\n    disabled: disabled,\n    \"aria-disabled\": disabled,\n    checked: checked,\n    tabIndex: 0\n  }, mergeProps(pressProps, focusProps, hoverProps, otherProps), {\n    ref: composeRefs(inputRef, externalRef)\n  })), React.createElement(\"span\", {\n    className: classNames([modules_d386e407.checkmark, modules_d386e407[`color_${color}`], disabled && modules_d386e407.disabled, checked && modules_d386e407.checked, isFocusVisible && modules_d386e407.focusVisible, isPressed && modules_d386e407.active, isHovered && modules_d386e407.hover, indeterminate && modules_d386e407.indeterminate]),\n    \"aria-hidden\": \"true\"\n  }, React.createElement(AnimatePresence, null, isFocusVisible && React.createElement(motion.span, Object.assign({\n    \"aria-hidden\": \"true\",\n    className: modules_d386e407.focusRing\n  }, getScaleInProps(1.1)))), React.createElement(AnimatePresence, {\n    initial: false\n  }, checked && !indeterminate && React.createElement(motion.span, Object.assign({\n    className: modules_d386e407.checkmarkIcon\n  }, getScaleProps(0.7), {\n    key: 0\n  }), React.createElement(Icon, {\n    size: 14,\n    type: CheckmarkIcon\n  })), checked && !!indeterminate && React.createElement(motion.span, Object.assign({\n    className: modules_d386e407.indeterminancyIcon\n  }, getScaleProps(0.7), {\n    key: 1\n  }), React.createElement(\"span\", null)))), label && React.createElement(React.Fragment, null, React.createElement(Spacer, {\n    size: 8,\n    inline: true\n  }), React.createElement(\"span\", null, label)));\n});\nexport { Checkbox };","map":{"version":3,"sources":["../../../../../src/components/primitives/checkbox/checkbox.tsx"],"names":["styles"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/label-has-associated-control */\n\nimport React, { useEffect, useRef } from 'react';\nimport { PressEvent } from '@react-types/shared';\nimport { usePress, useHover } from '@react-aria/interactions';\nimport composeRefs from '@seznam/compose-react-refs';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport { useFocusRing } from '@react-aria/focus';\nimport { mergeProps } from '../../../libs/merge-props';\nimport { classNames } from '../../../libs/class-names';\nimport { Spacer } from '../../layout';\nimport { Icon, MonochromeIconDefinition } from '../../icons';\nimport { useScale, useScaleIn } from '../../../hooks/transitions';\nimport { forwardRefWrapper } from '../../../libs/forward-ref-wrapper';\n\nimport styles from './checkbox.less';\n\nconst CheckmarkIcon: MonochromeIconDefinition = {\n  SVGContents: ({ fill }) => {\n    return (\n      <path\n        d=\"M12.9374 0.446429L13.2945 0.848214C13.5177 1.02679 13.5177 1.38393 13.2945 1.60714L5.25879 9.59822C5.03558 9.77679 4.67843 9.77679 4.49986 9.59822L0.660575 5.71429C0.43736 5.49107 0.43736 5.17857 0.660575 4.95536L1.01772 4.59821C1.24093 4.375 1.59807 4.375 1.77665 4.59821L4.857 7.67857L12.1784 0.446429C12.357 0.267857 12.7141 0.267857 12.9374 0.446429Z\"\n        {...fill}\n      />\n    );\n  },\n\n  viewbox: [0, 0, 14, 10],\n\n  color: (theme) => theme.hex.secondary.base,\n};\n\ninterface CheckboxProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  label?: string;\n  color?: 'primary' | 'success' | 'warning' | 'error';\n  indeterminate?: boolean;\n  onPress?: (event: PressEvent) => void;\n}\n\nexport const Checkbox = /* @__PURE__ */ forwardRefWrapper<HTMLInputElement, CheckboxProps>(\n  'Checkbox',\n\n  { color: 'primary' },\n\n  (props, externalRef) => {\n    const { onPress, disabled, checked, label, indeterminate, color, ...otherProps } = props;\n\n    const inputRef = useRef<HTMLInputElement | null>(null);\n    const { isFocusVisible, focusProps } = useFocusRing();\n    const { pressProps, isPressed } = usePress({ onPress, isDisabled: disabled });\n    const { isHovered, hoverProps } = useHover({ isDisabled: disabled });\n    const getScaleInProps = useScaleIn();\n    const getScaleProps = useScale();\n\n    useEffect(() => {\n      if (inputRef.current) {\n        inputRef.current.indeterminate = !!indeterminate;\n      }\n    }, [indeterminate]);\n\n    return (\n      <label className={styles.Checkbox}>\n        <input\n          type=\"checkbox\"\n          disabled={disabled}\n          aria-disabled={disabled}\n          checked={checked}\n          tabIndex={0}\n          {...mergeProps(pressProps, focusProps, hoverProps, otherProps)}\n          ref={composeRefs(inputRef, externalRef)}\n        />\n\n        <span\n          className={classNames([\n            styles.checkmark,\n            styles[`color_${color}`],\n            disabled && styles.disabled,\n            checked && styles.checked,\n            isFocusVisible && styles.focusVisible,\n            isPressed && styles.active,\n            isHovered && styles.hover,\n            indeterminate && styles.indeterminate,\n          ])}\n          aria-hidden=\"true\"\n        >\n          <AnimatePresence>\n            {isFocusVisible && (\n              <motion.span aria-hidden=\"true\" className={styles.focusRing} {...getScaleInProps(1.1)} />\n            )}\n          </AnimatePresence>\n\n          <AnimatePresence initial={false}>\n            {checked && !indeterminate && (\n              <motion.span className={styles.checkmarkIcon} {...getScaleProps(0.7)} key={0}>\n                <Icon size={14} type={CheckmarkIcon} />\n              </motion.span>\n            )}\n\n            {checked && !!indeterminate && (\n              <motion.span className={styles.indeterminancyIcon} {...getScaleProps(0.7)} key={1}>\n                <span />\n              </motion.span>\n            )}\n          </AnimatePresence>\n        </span>\n\n        {label && (\n          <>\n            <Spacer size={8} inline />\n            <span>{label}</span>\n          </>\n        )}\n      </label>\n    );\n  },\n);\n"]},"metadata":{},"sourceType":"module"}