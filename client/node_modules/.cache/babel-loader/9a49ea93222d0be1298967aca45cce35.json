{"ast":null,"code":"import React, { useState, useRef, useCallback, useEffect } from 'react';\nimport { useIsMounted, useDomEvent } from 'usable-react';\nimport { Tab } from './tab/tab.js';\nimport { TabList } from './tab-list/tab-list.js';\nimport { TabPanel } from './tab-panel.js';\n\nfunction formatTabID(tablistID = 0, key) {\n  return `mg-useTabs-tabID__${tablistID}-${key}`;\n}\n\nfunction formatPanelID(tablistID = 0, key) {\n  return `mg-useTabs-panelID__${tablistID}-${key}`;\n}\n\nfunction useTabs(config) {\n  const {\n    id: tablistID,\n    label: tablistLabel,\n    size = 'md',\n    orientation = 'horizontal',\n    tabs\n  } = config;\n  const isMounted = useIsMounted();\n  const tabIDs = tabs.map(({\n    id\n  }) => formatTabID(tablistID, id));\n  const panelIDs = tabs.map(({\n    id\n  }) => formatPanelID(tablistID, id));\n  const [useAnimation, setUseAnimation] = useState(false);\n  const [activeTabID, setActiveTabID] = useState(tabIDs[0]);\n  const [indicatorAttributes, setIndicatorAttributes] = useState({\n    width: 0,\n    height: 0,\n    offsetLeft: 0,\n    offsetTop: 0\n  }); // We save a `tabsRef` using the `tabsRefCallback` to get a current list of\n  // React refs for each rendered tab button.\n\n  const tabRefs = useRef({});\n  const tabRefsCallback = useCallback(node => {\n    if (node) tabRefs.current[node.id] = node;\n  }, []);\n  /**\r\n   * Updates the saved `width` and `offsetLeft` attributes to re-position the\r\n   * selected tab indicator.\r\n   */\n\n  const updateAttributes = useCallback(tabID => {\n    const ref = tabRefs.current[tabID];\n\n    if (ref && isMounted()) {\n      setIndicatorAttributes({\n        width: ref.getBoundingClientRect().width,\n        height: ref.getBoundingClientRect().height,\n        offsetLeft: ref.offsetLeft,\n        offsetTop: ref.offsetTop\n      });\n    }\n  }, []);\n  /**\r\n   * Sets the active tab ID and updates the selected tab indicator attributes.\r\n   */\n\n  const activateTab = useCallback(tabID => {\n    if (isMounted()) {\n      setActiveTabID(tabID);\n      updateAttributes(tabID);\n      setUseAnimation(true);\n    }\n  }, [updateAttributes]); // Set the initial selected tab indicator attributes.\n\n  useEffect(() => {\n    updateAttributes(activeTabID);\n  }, []); // If the `window` resizes, we update the selected tab indicator attributes.\n\n  const addEvent = useDomEvent(window);\n  addEvent('resize', () => {\n    updateAttributes(activeTabID);\n    setUseAnimation(true);\n  });\n  const tablist = React.createElement(TabList, {\n    orientation: orientation,\n    label: tablistLabel,\n    indicatorAttributes: indicatorAttributes,\n    useAnimation: useAnimation\n  }, tabs.map(({\n    id,\n    label,\n    icon\n  }, i) => {\n    const isSelected = activeTabID === tabIDs[i];\n    return React.createElement(Tab, {\n      id: tabIDs[i],\n      panelID: panelIDs[i],\n      allTabIDs: tabIDs,\n      index: i,\n      activateTab: activateTab,\n      selected: isSelected,\n      orientation: orientation,\n      size: size,\n      useAnimation: useAnimation,\n      ref: tabRefsCallback,\n      icon: icon,\n      key: id\n    }, label);\n  }));\n  const tabpanel = tabs.map(({\n    id,\n    content\n  }, i) => {\n    return React.createElement(TabPanel, {\n      id: panelIDs[i],\n      tabID: tabIDs[i],\n      selected: activeTabID === tabIDs[i],\n      key: id\n    }, content);\n  });\n  return {\n    tablist,\n    tabpanel\n  };\n}\n\nexport { useTabs };","map":{"version":3,"sources":["../../../../../src/components/layout/tabs/use-tabs.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { useDomEvent, useIsMounted } from 'usable-react';\nimport { MonochromeIconDefinition } from '../../icons';\nimport { Tab } from './tab/tab';\nimport { TabList } from './tab-list/tab-list';\nimport { TabPanel } from './tab-panel';\n\ninterface TabConfig {\n  id: React.Key;\n  label: JSX.Element | React.ReactText;\n  content: JSX.Element;\n  icon?: MonochromeIconDefinition;\n}\n\ninterface UseTabsConfig {\n  id?: React.Key;\n  label: string;\n  size?: 'sm' | 'md' | 'lg';\n  orientation?: 'horizontal' | 'vertical';\n  tabs: TabConfig[];\n}\n\nfunction formatTabID(tablistID: React.Key = 0, key: React.Key) {\n  return `mg-useTabs-tabID__${tablistID}-${key}`;\n}\n\nfunction formatPanelID(tablistID: React.Key = 0, key: React.Key) {\n  return `mg-useTabs-panelID__${tablistID}-${key}`;\n}\n\nexport function useTabs(config: UseTabsConfig) {\n  const { id: tablistID, label: tablistLabel, size = 'md', orientation = 'horizontal', tabs } = config;\n\n  const isMounted = useIsMounted();\n\n  const tabIDs = tabs.map(({ id }) => formatTabID(tablistID, id));\n  const panelIDs = tabs.map(({ id }) => formatPanelID(tablistID, id));\n  const [useAnimation, setUseAnimation] = useState(false);\n  const [activeTabID, setActiveTabID] = useState<string | undefined>(tabIDs[0]);\n  const [indicatorAttributes, setIndicatorAttributes] = useState<\n    React.ComponentProps<typeof TabList>['indicatorAttributes']\n  >({\n    width: 0,\n    height: 0,\n    offsetLeft: 0,\n    offsetTop: 0,\n  });\n\n  // We save a `tabsRef` using the `tabsRefCallback` to get a current list of\n  // React refs for each rendered tab button.\n  const tabRefs = useRef<{ [key: string]: HTMLButtonElement | null }>({});\n  const tabRefsCallback = useCallback((node: HTMLButtonElement | null) => {\n    if (node) tabRefs.current[node.id] = node;\n  }, []);\n\n  /**\n   * Updates the saved `width` and `offsetLeft` attributes to re-position the\n   * selected tab indicator.\n   */\n  const updateAttributes = useCallback((tabID: string) => {\n    const ref = tabRefs.current[tabID];\n\n    if (ref && isMounted()) {\n      setIndicatorAttributes({\n        width: ref.getBoundingClientRect().width,\n        height: ref.getBoundingClientRect().height,\n        offsetLeft: ref.offsetLeft,\n        offsetTop: ref.offsetTop,\n      });\n    }\n  }, []);\n\n  /**\n   * Sets the active tab ID and updates the selected tab indicator attributes.\n   */\n  const activateTab = useCallback(\n    (tabID: string) => {\n      if (isMounted()) {\n        setActiveTabID(tabID);\n        updateAttributes(tabID);\n        setUseAnimation(true);\n      }\n    },\n\n    [updateAttributes],\n  );\n\n  // Set the initial selected tab indicator attributes.\n  useEffect(() => {\n    updateAttributes(activeTabID!);\n  }, []);\n\n  // If the `window` resizes, we update the selected tab indicator attributes.\n  const addEvent = useDomEvent(window);\n  addEvent('resize', () => {\n    updateAttributes(activeTabID!);\n    setUseAnimation(true);\n  });\n\n  const tablist = (\n    <TabList\n      orientation={orientation}\n      label={tablistLabel}\n      indicatorAttributes={indicatorAttributes}\n      useAnimation={useAnimation}\n    >\n      {tabs.map(({ id, label, icon }, i) => {\n        const isSelected = activeTabID === tabIDs[i];\n        return (\n          <Tab\n            id={tabIDs[i]}\n            panelID={panelIDs[i]}\n            allTabIDs={tabIDs}\n            index={i}\n            activateTab={activateTab}\n            selected={isSelected}\n            orientation={orientation}\n            size={size}\n            useAnimation={useAnimation}\n            ref={tabRefsCallback}\n            icon={icon}\n            key={id}\n          >\n            {label}\n          </Tab>\n        );\n      })}\n    </TabList>\n  );\n\n  const tabpanel = tabs.map(({ id, content }, i) => {\n    return (\n      <TabPanel id={panelIDs[i]} tabID={tabIDs[i]} selected={activeTabID === tabIDs[i]} key={id}>\n        {content}\n      </TabPanel>\n    );\n  });\n\n  return { tablist, tabpanel };\n}\n"]},"metadata":{},"sourceType":"module"}