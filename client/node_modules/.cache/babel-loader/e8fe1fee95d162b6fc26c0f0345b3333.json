{"ast":null,"code":"import { __awaiter } from '../_virtual/_tslib.js';\nimport { useRef, useCallback } from 'react';\nimport { useSSR } from '../components/ssr-provider.js';\n/* eslint-disable @typescript-eslint/prefer-regexp-exec */\n\n/**\r\n * Copies text to the native clipboard, either via the `navigator.clipboard`\r\n * API, or old `document.execCommand('copy')` hacks!\r\n *\r\n * Based on this excellent StackOverflow answer:\r\n * https://stackoverflow.com/a/45308151\r\n */\n\nfunction copyToClipboard(text) {\n  var _a, _b, _c, _d, _e;\n\n  return __awaiter(this, void 0, void 0, function* () {\n    try {\n      yield navigator.clipboard.writeText(text);\n    } catch (_f) {\n      const textarea = document.createElement('textarea'); // Move it off-screen.\n\n      textarea.style.position = 'absolute';\n      textarea.style.left = '-2147483647em'; // Set to readonly to prevent mobile devices opening a keyboard when\n      // text is .select()'ed.\n\n      textarea.setAttribute('readonly', true);\n      document.body.appendChild(textarea);\n      textarea.value = text; // Check if there is any content selected previously.\n\n      const selected = ((_b = (_a = document.getSelection()) === null || _a === void 0 ? void 0 : _a.rangeCount) !== null && _b !== void 0 ? _b : NaN) > 0 ? (_c = document.getSelection()) === null || _c === void 0 ? void 0 : _c.getRangeAt(0) : false; // iOS Safari blocks programmatic execCommand copying normally, without this hack.\n      // https://stackoverflow.com/questions/34045777/copy-to-clipboard-using-javascript-in-ios\n\n      if (navigator.userAgent.match(/ipad|ipod|iphone/i)) {\n        const editable = textarea.contentEditable;\n        textarea.contentEditable = true;\n        const range = document.createRange();\n        range.selectNodeContents(textarea);\n        const selection = window.getSelection();\n        selection === null || selection === void 0 ? void 0 : selection.removeAllRanges();\n        selection === null || selection === void 0 ? void 0 : selection.addRange(range);\n        textarea.setSelectionRange(0, 999999);\n        textarea.contentEditable = editable;\n      } else {\n        textarea.select();\n      }\n\n      document.execCommand('copy'); // Restore previous selection.\n\n      if (selected) {\n        (_d = document.getSelection()) === null || _d === void 0 ? void 0 : _d.removeAllRanges();\n        (_e = document.getSelection()) === null || _e === void 0 ? void 0 : _e.addRange(selected);\n      }\n    }\n  });\n}\n/**\r\n * Creates a memoized callback—`copy`—that interacts with the user's computer clipboard.\r\n * Also provides a `ref` to attach to inputs, which can then be used as a source\r\n * for the clipboard value.\r\n */\n\n\nfunction useClipboard(onCopy) {\n  const ref = useRef(null);\n  const {\n    isServer\n  } = useSSR();\n  const copy = useCallback(source => __awaiter(this, void 0, void 0, function* () {\n    var _a, _b, _c, _d, _e, _f;\n\n    if (isServer) return;\n    const text = typeof source === 'string' ? String(source) : (_f = (_d = (_b = (_a = ref.current) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : (_c = ref.current) === null || _c === void 0 ? void 0 : _c.textContent) !== null && _d !== void 0 ? _d : (_e = source === null || source === void 0 ? void 0 : source.target) === null || _e === void 0 ? void 0 : _e.value) !== null && _f !== void 0 ? _f : '';\n    yield copyToClipboard(text);\n    if (onCopy) onCopy(text);\n  }), [onCopy, isServer]);\n  return {\n    copy,\n    ref\n  };\n}\n\nexport { useClipboard };","map":{"version":3,"sources":["../../../src/hooks/use-clipboard.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/prefer-regexp-exec */\n\nimport { useCallback, useRef } from 'react';\nimport { useSSR } from '../components/ssr-provider';\n\n/**\n * Copies text to the native clipboard, either via the `navigator.clipboard`\n * API, or old `document.execCommand('copy')` hacks!\n *\n * Based on this excellent StackOverflow answer:\n * https://stackoverflow.com/a/45308151\n */\nasync function copyToClipboard(text: string) {\n  try {\n    await navigator.clipboard.writeText(text);\n  } catch {\n    const textarea = document.createElement('textarea');\n\n    // Move it off-screen.\n    textarea.style.position = 'absolute';\n    textarea.style.left = '-2147483647em';\n\n    // Set to readonly to prevent mobile devices opening a keyboard when\n    // text is .select()'ed.\n    textarea.setAttribute('readonly', true as any);\n\n    document.body.appendChild(textarea);\n\n    textarea.value = text;\n\n    // Check if there is any content selected previously.\n    const selected = (document.getSelection()?.rangeCount ?? NaN) > 0 ? document.getSelection()?.getRangeAt(0) : false;\n\n    // iOS Safari blocks programmatic execCommand copying normally, without this hack.\n    // https://stackoverflow.com/questions/34045777/copy-to-clipboard-using-javascript-in-ios\n    if (navigator.userAgent.match(/ipad|ipod|iphone/i)) {\n      const editable = textarea.contentEditable;\n      textarea.contentEditable = true as any;\n      const range = document.createRange();\n      range.selectNodeContents(textarea);\n      const selection = window.getSelection();\n      selection?.removeAllRanges();\n      selection?.addRange(range);\n      textarea.setSelectionRange(0, 999999);\n      textarea.contentEditable = editable;\n    } else {\n      textarea.select();\n    }\n\n    document.execCommand('copy');\n\n    // Restore previous selection.\n    if (selected) {\n      document.getSelection()?.removeAllRanges();\n      document.getSelection()?.addRange(selected);\n    }\n  }\n}\n\ninterface CopyFn {\n  (source?: string): void;\n  (source?: Event): void;\n  (source?: any): void;\n}\n\ninterface OnCopyHandler {\n  (value: string): void;\n}\n\n/**\n * Creates a memoized callback—`copy`—that interacts with the user's computer clipboard.\n * Also provides a `ref` to attach to inputs, which can then be used as a source\n * for the clipboard value.\n */\nexport function useClipboard(onCopy?: OnCopyHandler) {\n  const ref = useRef<HTMLInputElement | null>(null);\n  const { isServer } = useSSR();\n\n  const copy = useCallback<CopyFn>(\n    async (source?: any) => {\n      if (isServer) return;\n\n      const text =\n        typeof source === 'string'\n          ? String(source)\n          : (ref.current as HTMLInputElement)?.value ?? ref.current?.textContent ?? source?.target?.value ?? '';\n\n      await copyToClipboard(text);\n\n      if (onCopy) onCopy(text);\n    },\n    [onCopy, isServer],\n  );\n\n  return { copy, ref };\n}\n"]},"metadata":{},"sourceType":"module"}