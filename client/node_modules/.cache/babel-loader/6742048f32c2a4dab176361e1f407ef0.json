{"ast":null,"code":"var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n/* eslint-disable */\n\n/* istanbul ignore next  */\n\nfunction fromByteArray(uint8) {\n  var i;\n  var extraBytes = uint8.length % 3; // if we have 1 byte left, pad 2 bytes\n\n  var output = '';\n  var temp;\n  var length;\n\n  function encode(num) {\n    return lookup.charAt(num);\n  }\n\n  function tripletToBase64(num) {\n    return encode(num >> 18 & 0x3f) + encode(num >> 12 & 0x3f) + encode(num >> 6 & 0x3f) + encode(num & 0x3f);\n  } // go through the array every three bytes, we'll deal with trailing stuff later\n\n\n  for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n    temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];\n    output += tripletToBase64(temp);\n  } // pad the end with zeros, but make sure to not forget the extra bytes\n\n\n  switch (extraBytes) {\n    case 1:\n      temp = uint8[uint8.length - 1];\n      output += encode(temp >> 2);\n      output += encode(temp << 4 & 0x3f);\n      output += '==';\n      break;\n\n    case 2:\n      temp = (uint8[uint8.length - 2] << 8) + uint8[uint8.length - 1];\n      output += encode(temp >> 10);\n      output += encode(temp >> 4 & 0x3f);\n      output += encode(temp << 2 & 0x3f);\n      output += '=';\n      break;\n\n    default:\n      break;\n  }\n\n  return output;\n}\n/* istanbul ignore next  */\n\n\nfunction b64enc(buf) {\n  return fromByteArray(buf).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n/* istanbul ignore next  */\n\n\nfunction b64RawEnc(buf) {\n  return fromByteArray(buf).replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n/* istanbul ignore next  */\n\n\nfunction hexEncode(buf) {\n  return Array.from(buf).map(function (x) {\n    return (\"0\" + x.toString(16)).substr(-2);\n  }).join('');\n}\n/**\n * Transforms the binary data in the credential into base64 strings\n * for posting to the server.\n * @param {PublicKeyCredential} newAssertion\n */\n\n/* istanbul ignore next  */\n\n\nexport var transformNewAssertionForServer = function (newAssertion) {\n  var attObj = new Uint8Array(newAssertion.response.attestationObject);\n  var clientDataJSON = new Uint8Array(newAssertion.response.clientDataJSON);\n  var rawId = new Uint8Array(newAssertion.rawId);\n  var registrationClientExtensions = newAssertion.getClientExtensionResults();\n  return {\n    id: newAssertion.id,\n    rawId: b64enc(rawId),\n    type: newAssertion.type,\n    attObj: b64enc(attObj),\n    clientData: b64enc(clientDataJSON),\n    registrationClientExtensions: JSON.stringify(registrationClientExtensions)\n  };\n};\n/**\n * Encodes the binary data in the assertion into strings for posting to the server.\n * @param {PublicKeyCredential} newAssertion\n */\n\n/* istanbul ignore next  */\n\nexport var transformAssertionForServer = function (newAssertion) {\n  var authData = new Uint8Array(newAssertion.response.authenticatorData);\n  var clientDataJSON = new Uint8Array(newAssertion.response.clientDataJSON);\n  var rawId = new Uint8Array(newAssertion.rawId);\n  var sig = new Uint8Array(newAssertion.response.signature);\n  var assertionClientExtensions = newAssertion.getClientExtensionResults();\n  return {\n    id: newAssertion.id,\n    rawId: b64enc(rawId),\n    type: newAssertion.type,\n    authData: b64RawEnc(authData),\n    clientData: b64RawEnc(clientDataJSON),\n    signature: hexEncode(sig),\n    assertionClientExtensions: JSON.stringify(assertionClientExtensions)\n  };\n};","map":{"version":3,"sources":["../../../src/utils/webauthn.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n/* eslint-disable */\n/* istanbul ignore next  */\nfunction fromByteArray(uint8) {\n    var i;\n    var extraBytes = uint8.length % 3; // if we have 1 byte left, pad 2 bytes\n    var output = '';\n    var temp;\n    var length;\n    function encode(num) {\n        return lookup.charAt(num);\n    }\n    function tripletToBase64(num) {\n        return encode((num >> 18) & 0x3f) + encode((num >> 12) & 0x3f) + encode((num >> 6) & 0x3f) + encode(num & 0x3f);\n    }\n    // go through the array every three bytes, we'll deal with trailing stuff later\n    for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n        temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];\n        output += tripletToBase64(temp);\n    }\n    // pad the end with zeros, but make sure to not forget the extra bytes\n    switch (extraBytes) {\n        case 1:\n            temp = uint8[uint8.length - 1];\n            output += encode(temp >> 2);\n            output += encode((temp << 4) & 0x3f);\n            output += '==';\n            break;\n        case 2:\n            temp = (uint8[uint8.length - 2] << 8) + uint8[uint8.length - 1];\n            output += encode(temp >> 10);\n            output += encode((temp >> 4) & 0x3f);\n            output += encode((temp << 2) & 0x3f);\n            output += '=';\n            break;\n        default:\n            break;\n    }\n    return output;\n}\n/* istanbul ignore next  */\nfunction b64enc(buf) {\n    return fromByteArray(buf).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n/* istanbul ignore next  */\nfunction b64RawEnc(buf) {\n    return fromByteArray(buf).replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n/* istanbul ignore next  */\nfunction hexEncode(buf) {\n    return Array.from(buf)\n        .map(function (x) {\n        return (\"0\" + x.toString(16)).substr(-2);\n    })\n        .join('');\n}\n/**\n * Transforms the binary data in the credential into base64 strings\n * for posting to the server.\n * @param {PublicKeyCredential} newAssertion\n */\n/* istanbul ignore next  */\nexport var transformNewAssertionForServer = function (newAssertion) {\n    var attObj = new Uint8Array(newAssertion.response.attestationObject);\n    var clientDataJSON = new Uint8Array(newAssertion.response.clientDataJSON);\n    var rawId = new Uint8Array(newAssertion.rawId);\n    var registrationClientExtensions = newAssertion.getClientExtensionResults();\n    return {\n        id: newAssertion.id,\n        rawId: b64enc(rawId),\n        type: newAssertion.type,\n        attObj: b64enc(attObj),\n        clientData: b64enc(clientDataJSON),\n        registrationClientExtensions: JSON.stringify(registrationClientExtensions),\n    };\n};\n/**\n * Encodes the binary data in the assertion into strings for posting to the server.\n * @param {PublicKeyCredential} newAssertion\n */\n/* istanbul ignore next  */\nexport var transformAssertionForServer = function (newAssertion) {\n    var authData = new Uint8Array(newAssertion.response.authenticatorData);\n    var clientDataJSON = new Uint8Array(newAssertion.response.clientDataJSON);\n    var rawId = new Uint8Array(newAssertion.rawId);\n    var sig = new Uint8Array(newAssertion.response.signature);\n    var assertionClientExtensions = newAssertion.getClientExtensionResults();\n    return {\n        id: newAssertion.id,\n        rawId: b64enc(rawId),\n        type: newAssertion.type,\n        authData: b64RawEnc(authData),\n        clientData: b64RawEnc(clientDataJSON),\n        signature: hexEncode(sig),\n        assertionClientExtensions: JSON.stringify(assertionClientExtensions),\n    };\n};\n//# sourceMappingURL=webauthn.js.map"]},"metadata":{},"sourceType":"module"}