{"ast":null,"code":"import React from 'react';\nimport { classNames } from '../../../libs/class-names.js';\nimport { mergeProps } from '../../../libs/merge-props.js';\nimport { useStyles } from '../../../hooks/use-styles.js';\nimport modules_c0cb627f from './inset.less.js';\n\nfunction resolveStyleValue(source) {\n  return typeof source === 'number' ? `${source}px` : source;\n}\n\nconst Inset = props => {\n  const {\n    wrapItemsWith,\n    top,\n    right,\n    bottom,\n    left,\n    all,\n    trim,\n    children\n  } = props;\n  const style = useStyles(all ? {\n    padding: resolveStyleValue(all)\n  } : {\n    paddingTop: resolveStyleValue(top),\n    paddingRight: resolveStyleValue(right),\n    paddingBottom: resolveStyleValue(bottom),\n    paddingLeft: resolveStyleValue(left)\n  });\n  const numChildren = React.Children.count(children);\n  const wrappedChildren = React.Children.map(children, (child, i) => {\n    const isFirstChild = i === 0;\n    const isLastChild = i === numChildren - 1;\n    const className = classNames([modules_c0cb627f.Inset, isFirstChild && modules_c0cb627f.isFirstChild, isLastChild && modules_c0cb627f.isLastChild, trim === 'horizontal' && modules_c0cb627f.trimHorizontally, trim === 'vertical' && modules_c0cb627f.trimVertically]);\n\n    if (wrapItemsWith) {\n      return React.createElement(wrapItemsWith, {\n        className,\n        style\n      }, child);\n    }\n\n    if (React.isValidElement(child)) {\n      return React.cloneElement(child, mergeProps(child.props, {\n        className,\n        style\n      }));\n    }\n\n    return child;\n  });\n  return React.createElement(React.Fragment, null, wrappedChildren);\n};\n\nexport { Inset };","map":{"version":3,"sources":["../../../../../src/components/layout/inset/inset.tsx"],"names":["styles"],"mappings":";;;;;;AAiBA,SAAS,iBAAT,CAA2B,MAA3B,EAAmD;AACjD,SAAO,OAAO,MAAP,KAAkB,QAAlB,GAA6B,GAAG,MAAM,IAAtC,GAA6C,MAApD;AACD;;MAEY,KAAK,GAA0B,KAAD,IAAM;AAC/C,QAAM;AAAE,IAAA,aAAF;AAAiB,IAAA,GAAjB;AAAsB,IAAA,KAAtB;AAA6B,IAAA,MAA7B;AAAqC,IAAA,IAArC;AAA2C,IAAA,GAA3C;AAAgD,IAAA,IAAhD;AAAsD,IAAA;AAAtD,MAAmE,KAAzE;AAEA,QAAM,KAAK,GAAG,SAAS,CACrB,GAAG,GACC;AACE,IAAA,OAAO,EAAE,iBAAiB,CAAC,GAAD;AAD5B,GADD,GAIC;AACE,IAAA,UAAU,EAAE,iBAAiB,CAAC,GAAD,CAD/B;AAEE,IAAA,YAAY,EAAE,iBAAiB,CAAC,KAAD,CAFjC;AAGE,IAAA,aAAa,EAAE,iBAAiB,CAAC,MAAD,CAHlC;AAIE,IAAA,WAAW,EAAE,iBAAiB,CAAC,IAAD;AAJhC,GALiB,CAAvB;AAaA,QAAM,WAAW,GAAG,KAAK,CAAC,QAAN,CAAe,KAAf,CAAqB,QAArB,CAApB;AACA,QAAM,eAAe,GAAG,KAAK,CAAC,QAAN,CAAe,GAAf,CAAmB,QAAnB,EAA6B,CAAC,KAAD,EAAQ,CAAR,KAAS;AAC5D,UAAM,YAAY,GAAG,CAAC,KAAK,CAA3B;AACA,UAAM,WAAW,GAAG,CAAC,KAAK,WAAW,GAAG,CAAxC;AAEA,UAAM,SAAS,GAAG,UAAU,CAAC,CAC3BA,gBAAM,CAAC,KADoB,EAE3B,YAAY,IAAIA,gBAAM,CAAC,YAFI,EAG3B,WAAW,IAAIA,gBAAM,CAAC,WAHK,EAI3B,IAAI,KAAK,YAAT,IAAyBA,gBAAM,CAAC,gBAJL,EAK3B,IAAI,KAAK,UAAT,IAAuBA,gBAAM,CAAC,cALH,CAAD,CAA5B;;AAQA,QAAI,aAAJ,EAAmB;AACjB,aAAO,KAAK,CAAC,aAAN,CAAoB,aAApB,EAAmC;AAAE,QAAA,SAAF;AAAa,QAAA;AAAb,OAAnC,EAAyD,KAAzD,CAAP;AACD;;AAED,QAAI,KAAK,CAAC,cAAN,CAAqB,KAArB,CAAJ,EAAiC;AAC/B,aAAO,KAAK,CAAC,YAAN,CAAmB,KAAnB,EAA0B,UAAU,CAAC,KAAK,CAAC,KAAP,EAAc;AAAE,QAAA,SAAF;AAAa,QAAA;AAAb,OAAd,CAApC,CAAP;AACD;;AAED,WAAO,KAAP;AACD,GArBuB,CAAxB;AAuBA,SAAO,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EAAG,eAAH,CAAP;AACF,C","sourcesContent":["import React, { ReactHTML } from 'react';\nimport { classNames } from '../../../libs/class-names';\nimport { useStyles } from '../../../hooks/use-styles';\nimport { mergeProps } from '../../../libs/merge-props';\n\nimport styles from './inset.less';\n\ninterface InsetProps {\n  wrapItemsWith?: keyof ReactHTML;\n  top?: string | number;\n  right?: string | number;\n  bottom?: string | number;\n  left?: string | number;\n  all?: string | number;\n  trim?: 'horizontal' | 'vertical';\n}\n\nfunction resolveStyleValue(source?: string | number) {\n  return typeof source === 'number' ? `${source}px` : source;\n}\n\nexport const Inset: React.FC<InsetProps> = (props) => {\n  const { wrapItemsWith, top, right, bottom, left, all, trim, children } = props;\n\n  const style = useStyles(\n    all\n      ? {\n          padding: resolveStyleValue(all),\n        }\n      : {\n          paddingTop: resolveStyleValue(top),\n          paddingRight: resolveStyleValue(right),\n          paddingBottom: resolveStyleValue(bottom),\n          paddingLeft: resolveStyleValue(left),\n        },\n  );\n\n  const numChildren = React.Children.count(children);\n  const wrappedChildren = React.Children.map(children, (child, i) => {\n    const isFirstChild = i === 0;\n    const isLastChild = i === numChildren - 1;\n\n    const className = classNames([\n      styles.Inset,\n      isFirstChild && styles.isFirstChild,\n      isLastChild && styles.isLastChild,\n      trim === 'horizontal' && styles.trimHorizontally,\n      trim === 'vertical' && styles.trimVertically,\n    ]);\n\n    if (wrapItemsWith) {\n      return React.createElement(wrapItemsWith, { className, style }, child);\n    }\n\n    if (React.isValidElement(child)) {\n      return React.cloneElement(child, mergeProps(child.props, { className, style }));\n    }\n\n    return child;\n  });\n\n  return <>{wrappedChildren}</>;\n};\n"]},"metadata":{},"sourceType":"module"}