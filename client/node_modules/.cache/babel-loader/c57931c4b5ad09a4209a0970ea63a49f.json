{"ast":null,"code":"import { __rest } from '../../../_virtual/_tslib.js';\nimport React from 'react';\nimport { usePress } from '@react-aria/interactions';\nimport { useFocusRing } from '@react-aria/focus';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport { classNames } from '../../../libs/class-names.js';\nimport { mergeProps } from '../../../libs/merge-props.js';\nimport { forwardRefWrapper } from '../../../libs/forward-ref-wrapper.js';\nimport { useScaleIn } from '../../../hooks/transitions.js';\nimport modules_0d6d3c28 from './toggle-button.less.js';\nconst ToggleButton = /* @__PURE__ */forwardRefWrapper('ToggleButton', {\n  color: 'primary'\n}, (props, externalRef) => {\n  const {\n    onPress,\n    className,\n    disabled,\n    checked,\n    color\n  } = props,\n        otherProps = __rest(props, [\"onPress\", \"className\", \"disabled\", \"checked\", \"color\"]);\n\n  const {\n    isFocusVisible,\n    focusProps\n  } = useFocusRing();\n  const {\n    pressProps,\n    isPressed\n  } = usePress({\n    onPress,\n    isDisabled: disabled\n  });\n  const getScaleProps = useScaleIn();\n  return React.createElement(\"button\", Object.assign({\n    className: classNames([className, modules_0d6d3c28.ToggleButton, modules_0d6d3c28[`color_${color}`], disabled && modules_0d6d3c28.disabled, checked && modules_0d6d3c28.checked, isFocusVisible && modules_0d6d3c28.focusVisible, isPressed && modules_0d6d3c28.active]),\n    type: \"button\",\n    role: \"switch\",\n    disabled: disabled,\n    \"aria-disabled\": disabled,\n    \"aria-checked\": checked,\n    tabIndex: 0\n  }, mergeProps(pressProps, focusProps, otherProps), {\n    ref: externalRef\n  }), React.createElement(AnimatePresence, null, isFocusVisible && React.createElement(motion.span, Object.assign({\n    \"aria-hidden\": \"true\",\n    className: modules_0d6d3c28.focusRing\n  }, getScaleProps(1.1)))));\n});\nexport { ToggleButton };","map":{"version":3,"sources":["../../../../../src/components/primitives/toggle-button/toggle-button.tsx"],"names":["styles"],"mappings":";;;;;;;;;;MAmBa,YAAY,GAAA,eAAmB,iBAAiB,CAC3D,cAD2D,EAG3D;AAAE,EAAA,KAAK,EAAE;AAAT,CAH2D,EAK3D,CAAC,KAAD,EAAQ,WAAR,KAAmB;AACjB,QAAM;AAAE,IAAA,OAAF;AAAW,IAAA,SAAX;AAAsB,IAAA,QAAtB;AAAgC,IAAA,OAAhC;AAAyC,IAAA;AAAzC,MAAkE,KAAxE;AAAA,QAAyD,UAAU,GAAA,MAAA,CAAK,KAAL,EAA7D,CAAA,SAAA,EAAA,WAAA,EAAA,UAAA,EAAA,SAAA,EAAA,OAAA,CAA6D,CAAnE;;AAEA,QAAM;AAAE,IAAA,cAAF;AAAkB,IAAA;AAAlB,MAAiC,YAAY,EAAnD;AACA,QAAM;AAAE,IAAA,UAAF;AAAc,IAAA;AAAd,MAA4B,QAAQ,CAAC;AAAE,IAAA,OAAF;AAAW,IAAA,UAAU,EAAE;AAAvB,GAAD,CAA1C;AACA,QAAM,aAAa,GAAG,UAAU,EAAhC;AAEA,SACE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACE,IAAA,SAAS,EAAE,UAAU,CAAC,CACpB,SADoB,EAEpBA,gBAAM,CAAC,YAFa,EAGpBA,gBAAM,CAAC,SAAS,KAAK,EAAf,CAHc,EAIpB,QAAQ,IAAIA,gBAAM,CAAC,QAJC,EAKpB,OAAO,IAAIA,gBAAM,CAAC,OALE,EAMpB,cAAc,IAAIA,gBAAM,CAAC,YANL,EAOpB,SAAS,IAAIA,gBAAM,CAAC,MAPA,CAAD,CADvB;AAUE,IAAA,IAAI,EAAC,QAVP;AAWE,IAAA,IAAI,EAAC,QAXP;AAYE,IAAA,QAAQ,EAAE,QAZZ;AAYoB,qBACH,QAbjB;AAayB,oBACT,OAdhB;AAeE,IAAA,QAAQ,EAAE;AAfZ,GAAA,EAgBM,UAAU,CAAC,UAAD,EAAa,UAAb,EAAyB,UAAzB,CAhBhB,EAgBoD;AAClD,IAAA,GAAG,EAAE;AAD6C,GAhBpD,CAAA,EAmBE,KAAA,CAAA,aAAA,CAAC,eAAD,EAAgB,IAAhB,EACG,cAAc,IAAI,KAAA,CAAA,aAAA,CAAC,MAAM,CAAC,IAAR,EAAY,MAAA,CAAA,MAAA,CAAA;AAAA,mBAAa,MAAb;AAAoB,IAAA,SAAS,EAAEA,gBAAM,CAAC;AAAtC,GAAA,EAAqD,aAAa,CAAC,GAAD,CAAlE,CAAZ,CADrB,CAnBF,CADF;AAyBD,CArC0D,C","sourcesContent":["import React from 'react';\nimport { PressEvent } from '@react-types/shared';\nimport { usePress } from '@react-aria/interactions';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport { useFocusRing } from '@react-aria/focus';\nimport { mergeProps } from '../../../libs/merge-props';\nimport { classNames } from '../../../libs/class-names';\nimport { forwardRefWrapper } from '../../../libs/forward-ref-wrapper';\nimport { useScaleIn } from '../../../hooks/transitions';\n\nimport styles from './toggle-button.less';\n\ninterface ToggleButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  checked?: boolean;\n  disabled?: boolean;\n  onPress?: (event: PressEvent) => void;\n  color?: 'primary' | 'success' | 'warning' | 'error';\n}\n\nexport const ToggleButton = /* @__PURE__ */ forwardRefWrapper<HTMLButtonElement, ToggleButtonProps>(\n  'ToggleButton',\n\n  { color: 'primary' },\n\n  (props, externalRef) => {\n    const { onPress, className, disabled, checked, color, ...otherProps } = props;\n\n    const { isFocusVisible, focusProps } = useFocusRing();\n    const { pressProps, isPressed } = usePress({ onPress, isDisabled: disabled });\n    const getScaleProps = useScaleIn();\n\n    return (\n      <button\n        className={classNames([\n          className,\n          styles.ToggleButton,\n          styles[`color_${color}`],\n          disabled && styles.disabled,\n          checked && styles.checked,\n          isFocusVisible && styles.focusVisible,\n          isPressed && styles.active,\n        ])}\n        type=\"button\"\n        role=\"switch\"\n        disabled={disabled}\n        aria-disabled={disabled}\n        aria-checked={checked}\n        tabIndex={0}\n        {...mergeProps(pressProps, focusProps, otherProps)}\n        ref={externalRef}\n      >\n        <AnimatePresence>\n          {isFocusVisible && <motion.span aria-hidden=\"true\" className={styles.focusRing} {...getScaleProps(1.1)} />}\n        </AnimatePresence>\n      </button>\n    );\n  },\n);\n"]},"metadata":{},"sourceType":"module"}