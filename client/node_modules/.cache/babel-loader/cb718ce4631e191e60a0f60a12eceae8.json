{"ast":null,"code":"import { __extends } from \"tslib\";\nimport EventEmitter from 'eventemitter3';\n/**\n * An extension of `EventEmitter` (provided by `eventemitter3`) with an adjusted\n * type interface that supports the unique structure of Magic SDK modules.\n */\n\nvar TypedEmitter =\n/** @class */\nfunction (_super) {\n  __extends(TypedEmitter, _super);\n\n  function TypedEmitter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return TypedEmitter;\n}(EventEmitter);\n\nexport { TypedEmitter };\n/**\n * Creates a `TypedEmitter` instance and returns helper functions for easily\n * mixing `TypedEmitter` methods into other objects.\n */\n\nexport function createTypedEmitter() {\n  var emitter = new TypedEmitter();\n\n  var createChainingEmitterMethod = function (method, source) {\n    return function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      emitter[method].apply(emitter, args);\n      return source;\n    };\n  };\n\n  var createBoundEmitterMethod = function (method) {\n    return function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return emitter[method].apply(emitter, args);\n    };\n  };\n\n  return {\n    emitter: emitter,\n    createChainingEmitterMethod: createChainingEmitterMethod,\n    createBoundEmitterMethod: createBoundEmitterMethod\n  };\n}","map":{"version":3,"sources":["../../../src/util/events.ts"],"names":[],"mappings":";AAAA,OAAO,YAAP,MAAyB,eAAzB;AAIA;;;AAGG;;AACH,IAAA,YAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA0E,EAAA,SAAA,CAAA,YAAA,EAAA,MAAA,CAAA;;AAA1E,WAAA,YAAA,GAAA;;AAEI;;AAAD,SAAA,YAAA;AAAC,CAFJ,CAA0E,YAA1E,CAAA;;;AASA;;;AAGG;;AACH,OAAM,SAAU,kBAAV,GAA4B;AAChC,MAAM,OAAO,GAAG,IAAI,YAAJ,EAAhB;;AAEA,MAAM,2BAA2B,GAAG,UAClC,MADkC,EAElC,MAFkC,EAExB;AAEV,WAAO,YAAA;AAAC,UAAA,IAAA,GAAA,EAAA;;WAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,QAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACL,MAAA,OAAe,CAAC,MAAD,CAAf,CAAwB,KAAxB,CAA8B,OAA9B,EAAuC,IAAvC;AACD,aAAO,MAAP;AACD,KAHD;AAID,GARD;;AAUA,MAAM,wBAAwB,GAAG,UAA+B,MAA/B,EAAwC;AACvE,WAAO,YAAA;AAAC,UAAA,IAAA,GAAA,EAAA;;WAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,QAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACN,aAAQ,OAAe,CAAC,MAAD,CAAf,CAAwB,KAAxB,CAA8B,OAA9B,EAAuC,IAAvC,CAAR;AACD,KAFD;AAGD,GAJD;;AAMA,SAAO;AACL,IAAA,OAAO,EAAA,OADF;AAEL,IAAA,2BAA2B,EAAA,2BAFtB;AAGL,IAAA,wBAAwB,EAAA;AAHnB,GAAP;AAKD","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport EventEmitter from 'eventemitter3';\n/**\n * An extension of `EventEmitter` (provided by `eventemitter3`) with an adjusted\n * type interface that supports the unique structure of Magic SDK modules.\n */\nvar TypedEmitter = /** @class */ (function (_super) {\n    __extends(TypedEmitter, _super);\n    function TypedEmitter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return TypedEmitter;\n}(EventEmitter));\nexport { TypedEmitter };\n/**\n * Creates a `TypedEmitter` instance and returns helper functions for easily\n * mixing `TypedEmitter` methods into other objects.\n */\nexport function createTypedEmitter() {\n    var emitter = new TypedEmitter();\n    var createChainingEmitterMethod = function (method, source) {\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            emitter[method].apply(emitter, args);\n            return source;\n        };\n    };\n    var createBoundEmitterMethod = function (method) {\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return emitter[method].apply(emitter, args);\n        };\n    };\n    return {\n        emitter: emitter,\n        createChainingEmitterMethod: createChainingEmitterMethod,\n        createBoundEmitterMethod: createBoundEmitterMethod,\n    };\n}\n//# sourceMappingURL=events.js.map"]},"metadata":{},"sourceType":"module"}