{"ast":null,"code":"import React, { useRef, useEffect, useCallback } from 'react';\nimport { useHover } from '@react-aria/interactions';\nimport { classNames } from '../../../../libs/class-names.js';\nimport { mergeProps } from '../../../../libs/merge-props.js';\nimport 'color';\nimport 'blueimp-md5';\nimport '@artsy/fresnel';\nimport { useTheme } from '../../../theme/use-theme.js';\nimport { forwardRefWrapper } from '../../../../libs/forward-ref-wrapper.js';\nimport { IconColorProvider, Icon } from '../../../icons/icon-base.js';\nimport composeRefs from '@seznam/compose-react-refs';\nimport '../../../theme/inverse-theme-semantics.js';\nimport '../../../theme/theme-provider.js';\nimport { Spacer } from '../../spacer.js';\nimport modules_5db374a8 from './tab.less.js';\n\nfunction getPrevTabID(tabIDs, index) {\n  const maxIndex = tabIDs.length - 1;\n  const nextIndex = index <= 0 ? maxIndex : index - 1;\n  return tabIDs[nextIndex];\n}\n\nfunction getNextTabID(tabIDs, index) {\n  const maxIndex = tabIDs.length - 1;\n  const nextIndex = index >= maxIndex ? 0 : index + 1;\n  return tabIDs[nextIndex];\n}\n/**\r\n * Determines a _default_ color for icons nested in a `<Tab>`.\r\n */\n\n\nfunction useIconColor(orientation, isHovered, isSelected) {\n  const theme = useTheme();\n\n  if (orientation === 'horizontal') {\n    if (isHovered && !isSelected) return theme.hex.primary.darker;\n    if (isSelected) return theme.hex.secondary.base;\n    return theme.hex.tertiary.base;\n  }\n\n  return theme.hex.tertiary.base;\n}\n\nconst Tab = /* @__PURE__ */forwardRefWrapper('Tab', (props, externalRef) => {\n  const {\n    id,\n    panelID,\n    allTabIDs,\n    index,\n    activateTab,\n    selected,\n    orientation,\n    size,\n    useAnimation,\n    icon,\n    children\n  } = props;\n  const ref = useRef(null);\n  useEffect(() => {\n    // If the current tab is selected, give it focus\n    if (selected && ref.current) ref.current.focus();\n  }, [selected]);\n  const handleClick = useCallback(e => {\n    e.preventDefault();\n    activateTab(id);\n  }, [id]);\n  const handleKeyDown = useCallback(e => {\n    const prevTabID = getPrevTabID(allTabIDs, index);\n    const nextTabID = getNextTabID(allTabIDs, index);\n\n    const handleTabChange = tabID => {\n      e.preventDefault();\n      activateTab(tabID);\n    };\n\n    const handleArrowKey = (assertOrientation, tabID) => {\n      if (orientation === assertOrientation) {\n        handleTabChange(tabID);\n      }\n    };\n\n    switch (e.key) {\n      case 'ArrowRight':\n        handleArrowKey('horizontal', nextTabID);\n        break;\n\n      case 'ArrowLeft':\n        handleArrowKey('horizontal', prevTabID);\n        break;\n\n      case 'ArrowUp':\n        handleArrowKey('vertical', prevTabID);\n        break;\n\n      case 'ArrowDown':\n        handleArrowKey('vertical', nextTabID);\n        break;\n\n      case 'Home':\n        handleTabChange(allTabIDs[0]);\n        break;\n\n      case 'End':\n        handleTabChange(allTabIDs[allTabIDs.length - 1]);\n        break;\n    }\n  }, [allTabIDs, index, orientation]);\n  const {\n    isHovered,\n    hoverProps\n  } = useHover({\n    isDisabled: false\n  });\n  const iconColor = useIconColor(orientation, isHovered, selected);\n  return React.createElement(IconColorProvider, {\n    colorA: iconColor\n  }, React.createElement(\"button\", Object.assign({\n    className: classNames([modules_5db374a8.Tab, modules_5db374a8[`size_${size}`], selected && modules_5db374a8.selected, modules_5db374a8[orientation], useAnimation && modules_5db374a8.withAnimation]),\n    id: id,\n    type: \"button\",\n    role: \"tab\",\n    \"aria-selected\": selected,\n    \"aria-controls\": panelID,\n    tabIndex: selected ? 0 : -1\n  }, mergeProps(hoverProps, {\n    onClick: handleClick,\n    onKeyDown: handleKeyDown\n  }), {\n    ref: composeRefs(ref, externalRef)\n  }), icon && React.createElement(React.Fragment, null, React.createElement(Icon, {\n    className: modules_5db374a8.icon,\n    size: size === 'sm' ? 20 : 24,\n    type: icon\n  }), React.createElement(Spacer, {\n    size: 8\n  })), children));\n});\nexport { Tab };","map":{"version":3,"sources":["../../../../../../src/components/layout/tabs/tab/tab.tsx"],"names":["styles"],"mappings":"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","sourcesContent":["import composeRefs from '@seznam/compose-react-refs';\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport { useHover } from '@react-aria/interactions';\nimport { useTheme } from '../../../theme';\nimport { classNames } from '../../../../libs/class-names';\nimport { forwardRefWrapper } from '../../../../libs/forward-ref-wrapper';\nimport { Icon, IconColorProvider, MonochromeIconDefinition } from '../../../icons';\nimport { Spacer } from '../../spacer';\n\nimport styles from './tab.less';\nimport { mergeProps } from '../../../../libs/merge-props';\n\ninterface TabProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  id: string;\n  panelID: string;\n  allTabIDs: string[];\n  index: number;\n  activateTab: (tabID: string) => void;\n  selected: boolean;\n  orientation: 'horizontal' | 'vertical';\n  size: 'sm' | 'md' | 'lg';\n  useAnimation: boolean;\n  icon?: MonochromeIconDefinition;\n}\n\nfunction getPrevTabID(tabIDs: string[], index: number) {\n  const maxIndex = tabIDs.length - 1;\n  const nextIndex = index <= 0 ? maxIndex : index - 1;\n  return tabIDs[nextIndex];\n}\n\nfunction getNextTabID(tabIDs: string[], index: number) {\n  const maxIndex = tabIDs.length - 1;\n  const nextIndex = index >= maxIndex ? 0 : index + 1;\n  return tabIDs[nextIndex];\n}\n\n/**\n * Determines a _default_ color for icons nested in a `<Tab>`.\n */\nfunction useIconColor(\n  orientation: TabProps['orientation'],\n  isHovered?: boolean,\n  isSelected?: boolean,\n): string | undefined {\n  const theme = useTheme();\n\n  if (orientation === 'horizontal') {\n    if (isHovered && !isSelected) return theme.hex.primary.darker;\n    if (isSelected) return theme.hex.secondary.base;\n    return theme.hex.tertiary.base;\n  }\n\n  return theme.hex.tertiary.base;\n}\n\nexport const Tab = /* @__PURE__ */ forwardRefWrapper<HTMLButtonElement, TabProps>('Tab', (props, externalRef) => {\n  const {\n    id,\n    panelID,\n    allTabIDs,\n    index,\n    activateTab,\n    selected,\n    orientation,\n    size,\n    useAnimation,\n    icon,\n    children,\n  } = props;\n\n  const ref = useRef<HTMLButtonElement | null>(null);\n\n  useEffect(() => {\n    // If the current tab is selected, give it focus\n    if (selected && ref.current) ref.current.focus();\n  }, [selected]);\n\n  const handleClick = useCallback<React.EventHandler<React.MouseEvent<HTMLButtonElement>>>(\n    (e) => {\n      e.preventDefault();\n      activateTab(id);\n    },\n\n    [id],\n  );\n\n  const handleKeyDown = useCallback<React.EventHandler<React.KeyboardEvent<HTMLButtonElement>>>(\n    (e) => {\n      const prevTabID = getPrevTabID(allTabIDs, index);\n      const nextTabID = getNextTabID(allTabIDs, index);\n\n      const handleTabChange = (tabID: string) => {\n        e.preventDefault();\n        activateTab(tabID);\n      };\n\n      const handleArrowKey = (assertOrientation: typeof orientation, tabID: string) => {\n        if (orientation === assertOrientation) {\n          handleTabChange(tabID);\n        }\n      };\n\n      switch (e.key) {\n        case 'ArrowRight':\n          handleArrowKey('horizontal', nextTabID);\n          break;\n\n        case 'ArrowLeft':\n          handleArrowKey('horizontal', prevTabID);\n          break;\n\n        case 'ArrowUp':\n          handleArrowKey('vertical', prevTabID);\n          break;\n\n        case 'ArrowDown':\n          handleArrowKey('vertical', nextTabID);\n          break;\n\n        case 'Home':\n          handleTabChange(allTabIDs[0]);\n          break;\n\n        case 'End':\n          handleTabChange(allTabIDs[allTabIDs.length - 1]);\n          break;\n\n        case 'Delete': // We currently don't handle the 'Delete' case...\n        default:\n          break;\n      }\n    },\n\n    [allTabIDs, index, orientation],\n  );\n\n  const { isHovered, hoverProps } = useHover({ isDisabled: false });\n  const iconColor = useIconColor(orientation, isHovered, selected);\n\n  return (\n    <IconColorProvider colorA={iconColor}>\n      <button\n        className={classNames([\n          styles.Tab,\n          styles[`size_${size}`],\n          selected && styles.selected,\n          styles[orientation],\n          useAnimation && styles.withAnimation,\n        ])}\n        id={id}\n        type=\"button\"\n        role=\"tab\"\n        aria-selected={selected}\n        aria-controls={panelID}\n        tabIndex={selected ? 0 : -1}\n        {...mergeProps(hoverProps, {\n          onClick: handleClick,\n          onKeyDown: handleKeyDown,\n        })}\n        ref={composeRefs(ref, externalRef)}\n      >\n        {icon && (\n          <>\n            <Icon className={styles.icon} size={size === 'sm' ? 20 : 24} type={icon} />\n            <Spacer size={8} />\n          </>\n        )}\n\n        {children}\n      </button>\n    </IconColorProvider>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}