{"ast":null,"code":"import _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _clsx from \"clsx\";\nimport _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\nimport _react, { useContext, useEffect, useRef, useState } from \"react\";\nimport { getInteractionModality, useFocus, useFocusVisible, useFocusWithin, useKeyboard } from \"@react-aria/interactions\";\nimport { focusWithoutScrolling, runAfterTransition, useLayoutEffect, mergeProps } from \"@react-aria/utils\";\n/**\n * A utility function that focuses an element while avoiding undesired side effects such\n * as page scrolling and screen reader issues with CSS transitions.\n */\n\nexport function focusSafely(element) {\n  // If the user is interacting with a virtual cursor, e.g. screen reader, then\n  // wait until after any animated transitions that are currently occurring on\n  // the page before shifting focus. This avoids issues with VoiceOver on iOS\n  // causing the page to scroll when moving focus if the element is transitioning\n  // from off the screen.\n  if (getInteractionModality() === 'virtual') {\n    let lastFocusedElement = document.activeElement;\n    runAfterTransition(() => {\n      // If focus did not move and the element is still in the document, focus it.\n      if (document.activeElement === lastFocusedElement && document.contains(element)) {\n        focusWithoutScrolling(element);\n      }\n    });\n  } else {\n    focusWithoutScrolling(element);\n  }\n}\n\nconst $c9e8f80f5bb1841844f54e4ad30b$var$FocusContext = _react.createContext(null);\n\nlet $c9e8f80f5bb1841844f54e4ad30b$var$activeScope = null;\nlet $c9e8f80f5bb1841844f54e4ad30b$var$scopes = new Set(); // This is a hacky DOM-based implementation of a FocusScope until this RFC lands in React:\n// https://github.com/reactjs/rfcs/pull/109\n// For now, it relies on the DOM tree order rather than the React tree order, and is probably\n// less optimized for performance.\n\n/**\n * A FocusScope manages focus for its descendants. It supports containing focus inside\n * the scope, restoring focus to the previously focused element on unmount, and auto\n * focusing children on mount. It also acts as a container for a programmatic focus\n * management interface that can be used to move focus forward and back in response\n * to user events.\n */\n\nexport function FocusScope(props) {\n  let {\n    children,\n    contain,\n    restoreFocus,\n    autoFocus\n  } = props;\n  let startRef = useRef();\n  let endRef = useRef();\n  let scopeRef = useRef([]);\n  useLayoutEffect(() => {\n    // Find all rendered nodes between the sentinels and add them to the scope.\n    let node = startRef.current.nextSibling;\n    let nodes = [];\n\n    while (node && node !== endRef.current) {\n      nodes.push(node);\n      node = node.nextSibling;\n    }\n\n    scopeRef.current = nodes;\n    $c9e8f80f5bb1841844f54e4ad30b$var$scopes.add(scopeRef);\n    return () => {\n      $c9e8f80f5bb1841844f54e4ad30b$var$scopes.delete(scopeRef);\n    };\n  }, [children]);\n  $c9e8f80f5bb1841844f54e4ad30b$var$useFocusContainment(scopeRef, contain);\n  $c9e8f80f5bb1841844f54e4ad30b$var$useRestoreFocus(scopeRef, restoreFocus, contain);\n  $c9e8f80f5bb1841844f54e4ad30b$var$useAutoFocus(scopeRef, autoFocus);\n  let focusManager = $c9e8f80f5bb1841844f54e4ad30b$var$createFocusManager(scopeRef);\n  return /*#__PURE__*/_react.createElement($c9e8f80f5bb1841844f54e4ad30b$var$FocusContext.Provider, {\n    value: focusManager\n  }, /*#__PURE__*/_react.createElement(\"span\", {\n    hidden: true,\n    ref: startRef\n  }), children, /*#__PURE__*/_react.createElement(\"span\", {\n    hidden: true,\n    ref: endRef\n  }));\n}\n/**\n * Returns a FocusManager interface for the parent FocusScope.\n * A FocusManager can be used to programmatically move focus within\n * a FocusScope, e.g. in response to user events like keyboard navigation.\n */\n\nexport function useFocusManager() {\n  return useContext($c9e8f80f5bb1841844f54e4ad30b$var$FocusContext);\n}\n\nfunction $c9e8f80f5bb1841844f54e4ad30b$var$createFocusManager(scopeRef) {\n  return {\n    focusNext(opts) {\n      if (opts === void 0) {\n        opts = {};\n      }\n\n      let node = opts.from || document.activeElement;\n      let focusable = $c9e8f80f5bb1841844f54e4ad30b$var$getFocusableElementsInScope(scopeRef.current, opts);\n      let nextNode = focusable.find(n => !!(node.compareDocumentPosition(n) & (Node.DOCUMENT_POSITION_FOLLOWING | Node.DOCUMENT_POSITION_CONTAINED_BY)));\n\n      if (!nextNode && opts.wrap) {\n        nextNode = focusable[0];\n      }\n\n      if (nextNode) {\n        nextNode.focus();\n      }\n\n      return nextNode;\n    },\n\n    focusPrevious(opts) {\n      if (opts === void 0) {\n        opts = {};\n      }\n\n      let node = opts.from || document.activeElement;\n      let focusable = $c9e8f80f5bb1841844f54e4ad30b$var$getFocusableElementsInScope(scopeRef.current, opts).reverse();\n      let previousNode = focusable.find(n => !!(node.compareDocumentPosition(n) & (Node.DOCUMENT_POSITION_PRECEDING | Node.DOCUMENT_POSITION_CONTAINED_BY)));\n\n      if (!previousNode && opts.wrap) {\n        previousNode = focusable[0];\n      }\n\n      if (previousNode) {\n        previousNode.focus();\n      }\n\n      return previousNode;\n    }\n\n  };\n}\n\nconst $c9e8f80f5bb1841844f54e4ad30b$var$focusableElements = ['input:not([disabled]):not([type=hidden])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'a[href]', 'area[href]', 'summary', 'iframe', 'object', 'embed', 'audio[controls]', 'video[controls]', '[contenteditable]'];\nconst $c9e8f80f5bb1841844f54e4ad30b$var$FOCUSABLE_ELEMENT_SELECTOR = $c9e8f80f5bb1841844f54e4ad30b$var$focusableElements.join(',') + ',[tabindex]';\n$c9e8f80f5bb1841844f54e4ad30b$var$focusableElements.push('[tabindex]:not([tabindex=\"-1\"])');\nconst $c9e8f80f5bb1841844f54e4ad30b$var$TABBABLE_ELEMENT_SELECTOR = $c9e8f80f5bb1841844f54e4ad30b$var$focusableElements.join(':not([tabindex=\"-1\"]),');\n\nfunction $c9e8f80f5bb1841844f54e4ad30b$var$getFocusableElementsInScope(scope, opts) {\n  let res = [];\n  let selector = opts.tabbable ? $c9e8f80f5bb1841844f54e4ad30b$var$TABBABLE_ELEMENT_SELECTOR : $c9e8f80f5bb1841844f54e4ad30b$var$FOCUSABLE_ELEMENT_SELECTOR;\n\n  for (let node of scope) {\n    if (node.matches(selector)) {\n      res.push(node);\n    }\n\n    res.push(...Array.from(node.querySelectorAll(selector)));\n  }\n\n  return res;\n}\n\nfunction $c9e8f80f5bb1841844f54e4ad30b$var$useFocusContainment(scopeRef, contain) {\n  let focusedNode = useRef();\n  let raf = useRef(null);\n  useEffect(() => {\n    let scope = scopeRef.current;\n\n    if (!contain) {\n      return;\n    } // Handle the Tab key to contain focus within the scope\n\n\n    let onKeyDown = e => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey) {\n        return;\n      }\n\n      let focusedElement = document.activeElement;\n\n      if (!$c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(focusedElement, scope)) {\n        return;\n      }\n\n      let elements = $c9e8f80f5bb1841844f54e4ad30b$var$getFocusableElementsInScope(scope, {\n        tabbable: true\n      });\n      let position = elements.indexOf(focusedElement);\n      let lastPosition = elements.length - 1;\n      let nextElement = null;\n\n      if (e.shiftKey) {\n        if (position <= 0) {\n          nextElement = elements[lastPosition];\n        } else {\n          nextElement = elements[position - 1];\n        }\n      } else {\n        if (position === lastPosition) {\n          nextElement = elements[0];\n        } else {\n          nextElement = elements[position + 1];\n        }\n      }\n\n      e.preventDefault();\n\n      if (nextElement) {\n        $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(nextElement, true);\n      }\n    };\n\n    let onFocus = e => {\n      // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n      // restore focus to the previously focused node or the first tabbable element in the active scope.\n      let isInAnyScope = $c9e8f80f5bb1841844f54e4ad30b$var$isElementInAnyScope(e.target, $c9e8f80f5bb1841844f54e4ad30b$var$scopes);\n\n      if (!isInAnyScope) {\n        if (focusedNode.current) {\n          focusedNode.current.focus();\n        } else if ($c9e8f80f5bb1841844f54e4ad30b$var$activeScope) {\n          $c9e8f80f5bb1841844f54e4ad30b$var$focusFirstInScope($c9e8f80f5bb1841844f54e4ad30b$var$activeScope.current);\n        }\n      } else {\n        $c9e8f80f5bb1841844f54e4ad30b$var$activeScope = scopeRef;\n        focusedNode.current = e.target;\n      }\n    };\n\n    let onBlur = e => {\n      // Firefox doesn't shift focus back to the Dialog properly without this\n      raf.current = requestAnimationFrame(() => {\n        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n        let isInAnyScope = $c9e8f80f5bb1841844f54e4ad30b$var$isElementInAnyScope(document.activeElement, $c9e8f80f5bb1841844f54e4ad30b$var$scopes);\n\n        if (!isInAnyScope) {\n          $c9e8f80f5bb1841844f54e4ad30b$var$activeScope = scopeRef;\n          focusedNode.current = e.target;\n          focusedNode.current.focus();\n        }\n      });\n    };\n\n    document.addEventListener('keydown', onKeyDown, false);\n    document.addEventListener('focusin', onFocus, false);\n    scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    scope.forEach(element => element.addEventListener('focusout', onBlur, false));\n    return () => {\n      document.removeEventListener('keydown', onKeyDown, false);\n      document.removeEventListener('focusin', onFocus, false);\n      scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n      scope.forEach(element => element.removeEventListener('focusout', onBlur, false));\n    };\n  }, [scopeRef, contain]); // eslint-disable-next-line arrow-body-style\n\n  useEffect(() => {\n    return () => cancelAnimationFrame(raf.current);\n  }, [raf]);\n}\n\nfunction $c9e8f80f5bb1841844f54e4ad30b$var$isElementInAnyScope(element, scopes) {\n  for (let scope of scopes.values()) {\n    if ($c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(element, scope.current)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction $c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(element, scope) {\n  return scope.some(node => node.contains(element));\n}\n\nfunction $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(element, scroll) {\n  if (scroll === void 0) {\n    scroll = false;\n  }\n\n  if (element != null && !scroll) {\n    try {\n      focusSafely(element);\n    } catch (err) {// ignore\n    }\n  } else if (element != null) {\n    try {\n      element.focus();\n    } catch (err) {// ignore\n    }\n  }\n}\n\nfunction $c9e8f80f5bb1841844f54e4ad30b$var$focusFirstInScope(scope) {\n  let elements = $c9e8f80f5bb1841844f54e4ad30b$var$getFocusableElementsInScope(scope, {\n    tabbable: true\n  });\n  $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(elements[0]);\n}\n\nfunction $c9e8f80f5bb1841844f54e4ad30b$var$useAutoFocus(scopeRef, autoFocus) {\n  useEffect(() => {\n    if (autoFocus) {\n      $c9e8f80f5bb1841844f54e4ad30b$var$activeScope = scopeRef;\n\n      if (!$c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(document.activeElement, $c9e8f80f5bb1841844f54e4ad30b$var$activeScope.current)) {\n        $c9e8f80f5bb1841844f54e4ad30b$var$focusFirstInScope(scopeRef.current);\n      }\n    }\n  }, [scopeRef, autoFocus]);\n}\n\nfunction $c9e8f80f5bb1841844f54e4ad30b$var$useRestoreFocus(scopeRef, restoreFocus, contain) {\n  // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n  useLayoutEffect(() => {\n    let scope = scopeRef.current;\n    let nodeToRestore = document.activeElement; // Handle the Tab key so that tabbing out of the scope goes to the next element\n    // after the node that had focus when the scope mounted. This is important when\n    // using portals for overlays, so that focus goes to the expected element when\n    // tabbing out of the overlay.\n\n    let onKeyDown = e => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey) {\n        return;\n      }\n\n      let focusedElement = document.activeElement;\n\n      if (!$c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(focusedElement, scope)) {\n        return;\n      } // Create a DOM tree walker that matches all tabbable elements\n\n\n      let walker = getFocusableTreeWalker(document.body, {\n        tabbable: true\n      }); // Find the next tabbable element after the currently focused element\n\n      walker.currentNode = focusedElement;\n      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode(); // If there is no next element, or it is outside the current scope, move focus to the\n      // next element after the node to restore to instead.\n\n      if ((!nextElement || !$c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(nextElement, scope)) && nodeToRestore) {\n        walker.currentNode = nodeToRestore; // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n\n        do {\n          nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n        } while ($c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(nextElement, scope));\n\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (nextElement) {\n          nextElement.focus();\n        } else {\n          // If there is no next element, blur the focused element to move focus to the body.\n          focusedElement.blur();\n        }\n      }\n    };\n\n    if (!contain) {\n      document.addEventListener('keydown', onKeyDown, true);\n    }\n\n    return () => {\n      if (!contain) {\n        document.removeEventListener('keydown', onKeyDown, true);\n      }\n\n      if (restoreFocus && nodeToRestore && $c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(document.activeElement, scope)) {\n        requestAnimationFrame(() => {\n          if (document.body.contains(nodeToRestore)) {\n            $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(nodeToRestore);\n          }\n        });\n      }\n    };\n  }, [scopeRef, restoreFocus, contain]);\n}\n/**\n * Create a [TreeWalker]{@link https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker}\n * that matches all focusable/tabbable elements.\n */\n\n\nexport function getFocusableTreeWalker(root, opts) {\n  let selector = (opts == null ? void 0 : opts.tabbable) ? $c9e8f80f5bb1841844f54e4ad30b$var$TABBABLE_ELEMENT_SELECTOR : $c9e8f80f5bb1841844f54e4ad30b$var$FOCUSABLE_ELEMENT_SELECTOR;\n  let walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {\n    acceptNode(node) {\n      var _opts$from; // Skip nodes inside the starting node.\n\n\n      if (opts == null ? void 0 : (_opts$from = opts.from) == null ? void 0 : _opts$from.contains(node)) {\n        return NodeFilter.FILTER_REJECT;\n      }\n\n      if (node.matches(selector)) {\n        return NodeFilter.FILTER_ACCEPT;\n      }\n\n      return NodeFilter.FILTER_SKIP;\n    }\n\n  }, false);\n\n  if (opts == null ? void 0 : opts.from) {\n    walker.currentNode = opts.from;\n  }\n\n  return walker;\n}\n/**\n * Determines whether a focus ring should be shown to indicate keyboard focus.\n * Focus rings are visible only when the user is interacting with a keyboard,\n * not with a mouse, touch, or other input methods.\n */\n\nexport function useFocusRing(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  let {\n    within\n  } = props;\n  let [isFocused, setFocused] = useState(false);\n  let [isFocusWithin, setFocusWithin] = useState(false);\n  let {\n    isFocusVisible\n  } = useFocusVisible(props);\n  let {\n    focusProps\n  } = useFocus({\n    isDisabled: within,\n    onFocusChange: setFocused\n  });\n  let {\n    focusWithinProps\n  } = useFocusWithin({\n    isDisabled: !within,\n    onFocusWithinChange: setFocusWithin\n  });\n  return {\n    isFocused: within ? isFocusWithin : isFocused,\n    isFocusVisible: (within ? isFocusWithin : isFocused) && isFocusVisible,\n    focusProps: within ? focusWithinProps : focusProps\n  };\n}\n/**\n * A utility component that applies a CSS class when an element has keyboard focus.\n * Focus rings are visible only when the user is interacting with a keyboard,\n * not with a mouse, touch, or other input methods.\n */\n\nexport function FocusRing(props) {\n  let {\n    children,\n    focusClass,\n    focusRingClass\n  } = props;\n  let {\n    isFocused,\n    isFocusVisible,\n    focusProps\n  } = useFocusRing(props);\n\n  let child = _react.Children.only(children);\n\n  return _react.cloneElement(child, mergeProps(child.props, _babelRuntimeHelpersEsmExtends({}, focusProps, {\n    className: _clsx({\n      [focusClass || '']: isFocused,\n      [focusRingClass || '']: isFocusVisible\n    })\n  })));\n}\n\nlet $e11539c8317b2d21639df611cb5658f$var$FocusableContext = _react.createContext(null);\n\nfunction $e11539c8317b2d21639df611cb5658f$var$useFocusableContext(ref) {\n  let context = useContext($e11539c8317b2d21639df611cb5658f$var$FocusableContext) || {};\n  useEffect(() => {\n    if (context && context.ref) {\n      context.ref.current = ref.current;\n      return () => {\n        context.ref.current = null;\n      };\n    }\n  }, [context, ref]);\n  return context;\n}\n/**\n * Provides DOM props to the nearest focusable child.\n */\n\n\nfunction $e11539c8317b2d21639df611cb5658f$var$FocusableProvider(props, ref) {\n  let {\n    children\n  } = props,\n      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, [\"children\"]);\n\n  let context = _babelRuntimeHelpersEsmExtends({}, otherProps, {\n    ref\n  });\n\n  return /*#__PURE__*/_react.createElement($e11539c8317b2d21639df611cb5658f$var$FocusableContext.Provider, {\n    value: context\n  }, children);\n}\n\nexport let FocusableProvider = _react.forwardRef($e11539c8317b2d21639df611cb5658f$var$FocusableProvider);\n/**\n * Used to make an element focusable and capable of auto focus.\n */\n\nexport function useFocusable(props, domRef) {\n  let {\n    focusProps\n  } = useFocus(props);\n  let {\n    keyboardProps\n  } = useKeyboard(props);\n  let interactions = mergeProps(focusProps, keyboardProps);\n  let domProps = $e11539c8317b2d21639df611cb5658f$var$useFocusableContext(domRef);\n  let interactionProps = props.isDisabled ? {} : domProps;\n  useEffect(() => {\n    if (props.autoFocus && domRef.current) {\n      domRef.current.focus();\n    }\n  }, [props.autoFocus, domRef]);\n  return {\n    focusableProps: mergeProps(_babelRuntimeHelpersEsmExtends({}, interactions, {\n      tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined\n    }), interactionProps)\n  };\n}","map":{"version":3,"sources":["packages/@react-aria/focus/src/focusSafely.ts","packages/@react-aria/focus/src/FocusScope.tsx","packages/@react-aria/focus/src/useFocusRing.ts","packages/@react-aria/focus/src/FocusRing.tsx","packages/@react-aria/focus/src/useFocusable.tsx"],"names":["getInteractionModality","lastFocusedElement","document","runAfterTransition","focusWithoutScrolling","FocusContext","React","activeScope","scopes","autoFocus","startRef","useRef","endRef","scopeRef","useLayoutEffect","node","nodes","useFocusContainment","useRestoreFocus","useAutoFocus","focusManager","createFocusManager","useContext","focusNext","opts","focusable","getFocusableElementsInScope","nextNode","n","Node","focusPrevious","previousNode","focusableElements","FOCUSABLE_ELEMENT_SELECTOR","TABBABLE_ELEMENT_SELECTOR","res","selector","Array","focusedNode","raf","useEffect","scope","onKeyDown","e","focusedElement","isElementInScope","elements","tabbable","position","lastPosition","nextElement","focusElement","onFocus","isInAnyScope","isElementInAnyScope","focusFirstInScope","onBlur","requestAnimationFrame","element","cancelAnimationFrame","scroll","nodeToRestore","walker","getFocusableTreeWalker","restoreFocus","NodeFilter","acceptNode","props","within","useState","isFocusVisible","useFocusVisible","focusProps","useFocus","isDisabled","onFocusChange","setFocused","focusWithinProps","useFocusWithin","onFocusWithinChange","setFocusWithin","isFocused","focusRingClass","child","mergeProps","className","clsx","focusClass","FocusableContext","context","ref","children","otherProps","_FocusableProvider","keyboardProps","useKeyboard","interactions","domProps","useFocusableContext","interactionProps","domRef","focusableProps","tabIndex","undefined"],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {focusWithoutScrolling, runAfterTransition} from '@react-aria/utils';\nimport {getInteractionModality} from '@react-aria/interactions';\n\n/**\n * A utility function that focuses an element while avoiding undesired side effects such\n * as page scrolling and screen reader issues with CSS transitions.\n */\nexport function focusSafely(element: HTMLElement) {\n  // If the user is interacting with a virtual cursor, e.g. screen reader, then\n  // wait until after any animated transitions that are currently occurring on\n  // the page before shifting focus. This avoids issues with VoiceOver on iOS\n  // causing the page to scroll when moving focus if the element is transitioning\n  // from off the screen.\n  if (getInteractionModality() === 'virtual') {\n    let lastFocusedElement = document.activeElement;\n    runAfterTransition(() => {\n      // If focus did not move and the element is still in the document, focus it.\n      if (document.activeElement === lastFocusedElement && document.contains(element)) {\n        focusWithoutScrolling(element);\n      }\n    });\n  } else {\n    focusWithoutScrolling(element);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {focusSafely} from './focusSafely';\nimport React, {ReactNode, RefObject, useContext, useEffect, useRef} from 'react';\nimport {useLayoutEffect} from '@react-aria/utils';\n\n// import {FocusScope, useFocusScope} from 'react-events/focus-scope';\n// export {FocusScope};\n\ninterface FocusScopeProps {\n  /** The contents of the focus scope. */\n  children: ReactNode,\n\n  /**\n   * Whether to contain focus inside the scope, so users cannot\n   * move focus outside, for example in a modal dialog.\n   */\n  contain?: boolean,\n\n  /**\n   * Whether to restore focus back to the element that was focused\n   * when the focus scope mounted, after the focus scope unmounts.\n   */\n  restoreFocus?: boolean,\n\n  /** Whether to auto focus the first focusable element in the focus scope on mount. */\n  autoFocus?: boolean\n}\n\ninterface FocusManagerOptions {\n  /** The element to start searching from. The currently focused element by default. */\n  from?: HTMLElement,\n  /** Whether to only include tabbable elements, or all focusable elements. */\n  tabbable?: boolean,\n  /** Whether focus should wrap around when it reaches the end of the scope. */\n  wrap?: boolean\n}\n\ninterface FocusManager {\n  /** Moves focus to the next focusable or tabbable element in the focus scope. */\n  focusNext(opts?: FocusManagerOptions): HTMLElement,\n  /** Moves focus to the previous focusable or tabbable element in the focus scope. */\n  focusPrevious(opts?: FocusManagerOptions): HTMLElement\n}\n\nconst FocusContext = React.createContext<FocusManager>(null);\n\nlet activeScope: RefObject<HTMLElement[]> = null;\nlet scopes: Set<RefObject<HTMLElement[]>> = new Set();\n\n// This is a hacky DOM-based implementation of a FocusScope until this RFC lands in React:\n// https://github.com/reactjs/rfcs/pull/109\n// For now, it relies on the DOM tree order rather than the React tree order, and is probably\n// less optimized for performance.\n\n/**\n * A FocusScope manages focus for its descendants. It supports containing focus inside\n * the scope, restoring focus to the previously focused element on unmount, and auto\n * focusing children on mount. It also acts as a container for a programmatic focus\n * management interface that can be used to move focus forward and back in response\n * to user events.\n */\nexport function FocusScope(props: FocusScopeProps) {\n  let {children, contain, restoreFocus, autoFocus} = props;\n  let startRef = useRef<HTMLSpanElement>();\n  let endRef = useRef<HTMLSpanElement>();\n  let scopeRef = useRef<HTMLElement[]>([]);\n\n  useLayoutEffect(() => {\n    // Find all rendered nodes between the sentinels and add them to the scope.\n    let node = startRef.current.nextSibling;\n    let nodes = [];\n    while (node && node !== endRef.current) {\n      nodes.push(node);\n      node = node.nextSibling;\n    }\n\n    scopeRef.current = nodes;\n    scopes.add(scopeRef);\n    return () => {\n      scopes.delete(scopeRef);\n    };\n  }, [children]);\n\n  useFocusContainment(scopeRef, contain);\n  useRestoreFocus(scopeRef, restoreFocus, contain);\n  useAutoFocus(scopeRef, autoFocus);\n\n  let focusManager = createFocusManager(scopeRef);\n\n  return (\n    <FocusContext.Provider value={focusManager}>\n      <span hidden ref={startRef} />\n      {children}\n      <span hidden ref={endRef} />\n    </FocusContext.Provider>\n  );\n}\n\n/**\n * Returns a FocusManager interface for the parent FocusScope.\n * A FocusManager can be used to programmatically move focus within\n * a FocusScope, e.g. in response to user events like keyboard navigation.\n */\nexport function useFocusManager(): FocusManager {\n  return useContext(FocusContext);\n}\n\nfunction createFocusManager(scopeRef: React.RefObject<HTMLElement[]>): FocusManager {\n  return {\n    focusNext(opts: FocusManagerOptions = {}) {\n      let node = opts.from || document.activeElement;\n      let focusable = getFocusableElementsInScope(scopeRef.current, opts);\n      let nextNode = focusable.find(n =>\n        !!(node.compareDocumentPosition(n) & (Node.DOCUMENT_POSITION_FOLLOWING | Node.DOCUMENT_POSITION_CONTAINED_BY))\n      );\n      if (!nextNode && opts.wrap) {\n        nextNode = focusable[0];\n      }\n      if (nextNode) {\n        nextNode.focus();\n      }\n      return nextNode;\n    },\n    focusPrevious(opts: FocusManagerOptions = {}) {\n      let node = opts.from || document.activeElement;\n      let focusable = getFocusableElementsInScope(scopeRef.current, opts).reverse();\n      let previousNode = focusable.find(n =>\n        !!(node.compareDocumentPosition(n) & (Node.DOCUMENT_POSITION_PRECEDING | Node.DOCUMENT_POSITION_CONTAINED_BY))\n      );\n      if (!previousNode && opts.wrap) {\n        previousNode = focusable[0];\n      }\n      if (previousNode) {\n        previousNode.focus();\n      }\n      return previousNode;\n    }\n  };\n}\n\nconst focusableElements = [\n  'input:not([disabled]):not([type=hidden])',\n  'select:not([disabled])',\n  'textarea:not([disabled])',\n  'button:not([disabled])',\n  'a[href]',\n  'area[href]',\n  'summary',\n  'iframe',\n  'object',\n  'embed',\n  'audio[controls]',\n  'video[controls]',\n  '[contenteditable]'\n];\n\nconst FOCUSABLE_ELEMENT_SELECTOR = focusableElements.join(',') + ',[tabindex]';\n\nfocusableElements.push('[tabindex]:not([tabindex=\"-1\"])');\nconst TABBABLE_ELEMENT_SELECTOR = focusableElements.join(':not([tabindex=\"-1\"]),');\n\nfunction getFocusableElementsInScope(scope: HTMLElement[], opts: FocusManagerOptions): HTMLElement[] {\n  let res = [];\n  let selector = opts.tabbable ? TABBABLE_ELEMENT_SELECTOR : FOCUSABLE_ELEMENT_SELECTOR;\n  for (let node of scope) {\n    if (node.matches(selector)) {\n      res.push(node);\n    }\n    res.push(...Array.from(node.querySelectorAll(selector)));\n  }\n  return res;\n}\n\nfunction useFocusContainment(scopeRef: RefObject<HTMLElement[]>, contain: boolean) {\n  let focusedNode = useRef<HTMLElement>();\n\n  let raf = useRef(null);\n  useEffect(() => {\n    let scope = scopeRef.current;\n    if (!contain) {\n      return;\n    }\n\n    // Handle the Tab key to contain focus within the scope\n    let onKeyDown = (e) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey) {\n        return;\n      }\n\n      let focusedElement = document.activeElement as HTMLElement;\n      if (!isElementInScope(focusedElement, scope)) {\n        return;\n      }\n\n      let elements = getFocusableElementsInScope(scope, {tabbable: true});\n      let position = elements.indexOf(focusedElement);\n      let lastPosition = elements.length - 1;\n      let nextElement = null;\n\n      if (e.shiftKey) {\n        if (position <= 0) {\n          nextElement = elements[lastPosition];\n        } else {\n          nextElement = elements[position - 1];\n        }\n      } else {\n        if (position === lastPosition) {\n          nextElement = elements[0];\n        } else {\n          nextElement = elements[position + 1];\n        }\n      }\n\n      e.preventDefault();\n      if (nextElement) {\n        focusElement(nextElement, true);\n      }\n    };\n\n    let onFocus = (e) => {\n      // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n      // restore focus to the previously focused node or the first tabbable element in the active scope.\n      let isInAnyScope = isElementInAnyScope(e.target, scopes);\n      if (!isInAnyScope) {\n        if (focusedNode.current) {\n          focusedNode.current.focus();\n        } else if (activeScope) {\n          focusFirstInScope(activeScope.current);\n        }\n      } else {\n        activeScope = scopeRef;\n        focusedNode.current = e.target;\n      }\n    };\n\n    let onBlur = (e) => {\n      // Firefox doesn't shift focus back to the Dialog properly without this\n      raf.current = requestAnimationFrame(() => {\n        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n        let isInAnyScope = isElementInAnyScope(document.activeElement, scopes);\n\n        if (!isInAnyScope) {\n          activeScope = scopeRef;\n          focusedNode.current = e.target;\n          focusedNode.current.focus();\n        }\n      });\n    };\n\n    document.addEventListener('keydown', onKeyDown, false);\n    document.addEventListener('focusin', onFocus, false);\n    scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    scope.forEach(element => element.addEventListener('focusout', onBlur, false));\n    return () => {\n      document.removeEventListener('keydown', onKeyDown, false);\n      document.removeEventListener('focusin', onFocus, false);\n      scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n      scope.forEach(element => element.removeEventListener('focusout', onBlur, false));\n    };\n  }, [scopeRef, contain]);\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => cancelAnimationFrame(raf.current);\n  }, [raf]);\n}\n\nfunction isElementInAnyScope(element: Element, scopes: Set<RefObject<HTMLElement[]>>) {\n  for (let scope of scopes.values()) {\n    if (isElementInScope(element, scope.current)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isElementInScope(element: Element, scope: HTMLElement[]) {\n  return scope.some(node => node.contains(element));\n}\n\nfunction focusElement(element: HTMLElement | null, scroll = false) {\n  if (element != null && !scroll) {\n    try {\n      focusSafely(element);\n    } catch (err) {\n      // ignore\n    }\n  } else if (element != null) {\n    try {\n      element.focus();\n    } catch (err) {\n      // ignore\n    }\n  }\n}\n\nfunction focusFirstInScope(scope: HTMLElement[]) {\n  let elements = getFocusableElementsInScope(scope, {tabbable: true});\n  focusElement(elements[0]);\n}\n\nfunction useAutoFocus(scopeRef: RefObject<HTMLElement[]>, autoFocus: boolean) {\n  useEffect(() => {\n    if (autoFocus) {\n      activeScope = scopeRef;\n      if (!isElementInScope(document.activeElement, activeScope.current)) {\n        focusFirstInScope(scopeRef.current);\n      }\n    }\n  }, [scopeRef, autoFocus]);\n}\n\nfunction useRestoreFocus(scopeRef: RefObject<HTMLElement[]>, restoreFocus: boolean, contain: boolean) {\n  // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n  useLayoutEffect(() => {\n    let scope = scopeRef.current;\n    let nodeToRestore = document.activeElement as HTMLElement;\n\n    // Handle the Tab key so that tabbing out of the scope goes to the next element\n    // after the node that had focus when the scope mounted. This is important when\n    // using portals for overlays, so that focus goes to the expected element when\n    // tabbing out of the overlay.\n    let onKeyDown = (e: KeyboardEvent) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey) {\n        return;\n      }\n\n      let focusedElement = document.activeElement as HTMLElement;\n      if (!isElementInScope(focusedElement, scope)) {\n        return;\n      }\n\n      // Create a DOM tree walker that matches all tabbable elements\n      let walker = getFocusableTreeWalker(document.body, {tabbable: true});\n\n      // Find the next tabbable element after the currently focused element\n      walker.currentNode = focusedElement;\n      let nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as HTMLElement;\n\n      // If there is no next element, or it is outside the current scope, move focus to the\n      // next element after the node to restore to instead.\n      if ((!nextElement || !isElementInScope(nextElement, scope)) && nodeToRestore) {\n        walker.currentNode = nodeToRestore;\n\n        // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n        do {\n          nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as HTMLElement;\n        } while (isElementInScope(nextElement, scope));\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (nextElement) {\n          nextElement.focus();\n        } else {\n          // If there is no next element, blur the focused element to move focus to the body.\n          focusedElement.blur();\n        }\n      }\n    };\n\n    if (!contain) {\n      document.addEventListener('keydown', onKeyDown, true);\n    }\n\n    return () => {\n      if (!contain) {\n        document.removeEventListener('keydown', onKeyDown, true);\n      }\n\n      if (restoreFocus && nodeToRestore && isElementInScope(document.activeElement, scope)) {\n        requestAnimationFrame(() => {\n          if (document.body.contains(nodeToRestore)) {\n            focusElement(nodeToRestore);\n          }\n        });\n      }\n    };\n  }, [scopeRef, restoreFocus, contain]);\n}\n\n/**\n * Create a [TreeWalker]{@link https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker}\n * that matches all focusable/tabbable elements.\n */\nexport function getFocusableTreeWalker(root: HTMLElement, opts?: FocusManagerOptions) {\n  let selector = opts?.tabbable ? TABBABLE_ELEMENT_SELECTOR : FOCUSABLE_ELEMENT_SELECTOR;\n  let walker = document.createTreeWalker(\n    root,\n    NodeFilter.SHOW_ELEMENT,\n    {\n      acceptNode(node) {\n        // Skip nodes inside the starting node.\n        if (opts?.from?.contains(node)) {\n          return NodeFilter.FILTER_REJECT;\n        }\n\n        if ((node as HTMLElement).matches(selector)) {\n          return NodeFilter.FILTER_ACCEPT;\n        }\n\n        return NodeFilter.FILTER_SKIP;\n      }\n    },\n    false\n  );\n\n  if (opts?.from) {\n    walker.currentNode = opts.from;\n  }\n\n  return walker;\n}\n","import {HTMLAttributes, useState} from 'react';\nimport {useFocus, useFocusVisible, useFocusWithin} from '@react-aria/interactions';\n\ninterface FocusRingProps {\n  /**\n   * Whether to show the focus ring when something\n   * inside the container element has focus (true), or\n   * only if the container itself has focus (false).\n   * @default 'false'\n   */\n  within?: boolean,\n\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\ninterface FocusRingAria {\n  /** Whether the element is currently focused. */\n  isFocused: boolean,\n\n  /** Whether keyboard focus should be visible. */\n  isFocusVisible: boolean,\n\n  /** Props to apply to the container element with the focus ring. */\n  focusProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Determines whether a focus ring should be shown to indicate keyboard focus.\n * Focus rings are visible only when the user is interacting with a keyboard,\n * not with a mouse, touch, or other input methods.\n */\nexport function useFocusRing(props: FocusRingProps = {}): FocusRingAria {\n  let {within} = props;\n  let [isFocused, setFocused] = useState(false);\n  let [isFocusWithin, setFocusWithin] = useState(false);\n  let {isFocusVisible} = useFocusVisible(props);\n  let {focusProps} = useFocus({\n    isDisabled: within,\n    onFocusChange: setFocused\n  });\n  let {focusWithinProps} = useFocusWithin({\n    isDisabled: !within,\n    onFocusWithinChange: setFocusWithin\n  });\n\n  return {\n    isFocused: within ? isFocusWithin : isFocused,\n    isFocusVisible: (within ? isFocusWithin : isFocused) && isFocusVisible,\n    focusProps: within ? focusWithinProps : focusProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport clsx from 'clsx';\nimport {mergeProps} from '@react-aria/utils';\nimport React, {ReactElement} from 'react';\nimport {useFocusRing} from './useFocusRing';\n\ninterface FocusRingProps {\n  /** Child element to apply CSS classes to. */\n  children: ReactElement,\n  /** CSS class to apply when the element is focused. */\n  focusClass?: string,\n  /** CSS class to apply when the element has keyboard focus. */\n  focusRingClass?: string,\n  /**\n   * Whether to show the focus ring when something\n   * inside the container element has focus (true), or\n   * only if the container itself has focus (false).\n   * @default false\n   */\n  within?: boolean,\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\n/**\n * A utility component that applies a CSS class when an element has keyboard focus.\n * Focus rings are visible only when the user is interacting with a keyboard,\n * not with a mouse, touch, or other input methods.\n */\nexport function FocusRing(props: FocusRingProps) {\n  let {children, focusClass, focusRingClass} = props;\n  let {isFocused, isFocusVisible, focusProps} = useFocusRing(props);\n  let child = React.Children.only(children);\n\n  return React.cloneElement(child, mergeProps(child.props, {\n    ...focusProps,\n    className: clsx({\n      [focusClass || '']: isFocused,\n      [focusRingClass || '']: isFocusVisible\n    })\n  }));\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableDOMProps, FocusableProps} from '@react-types/shared';\nimport {mergeProps} from '@react-aria/utils';\nimport React, {HTMLAttributes, MutableRefObject, ReactNode, RefObject, useContext, useEffect} from 'react';\nimport {useFocus, useKeyboard} from '@react-aria/interactions';\n\ninterface FocusableOptions extends FocusableProps, FocusableDOMProps {\n  /** Whether focus should be disabled. */\n  isDisabled?: boolean\n}\n\ninterface FocusableProviderProps extends HTMLAttributes<HTMLElement> {\n  /** The child element to provide DOM props to. */\n  children?: ReactNode\n}\n\ninterface FocusableContextValue extends FocusableProviderProps {\n  ref?: MutableRefObject<HTMLElement>\n}\n\nlet FocusableContext = React.createContext<FocusableContextValue>(null);\n\nfunction useFocusableContext(ref: RefObject<HTMLElement>): FocusableContextValue {\n  let context = useContext(FocusableContext) || {};\n\n  useEffect(() => {\n    if (context && context.ref) {\n      context.ref.current = ref.current;\n      return () => {\n        context.ref.current = null;\n      };\n    }\n  }, [context, ref]);\n\n  return context;\n}\n\n/**\n * Provides DOM props to the nearest focusable child.\n */\nfunction FocusableProvider(props: FocusableProviderProps, ref: RefObject<HTMLElement>) {\n  let {children, ...otherProps} = props;\n  let context = {\n    ...otherProps,\n    ref\n  };\n\n  return (\n    <FocusableContext.Provider value={context}>\n      {children}\n    </FocusableContext.Provider>\n  );\n}\n\nlet _FocusableProvider = React.forwardRef(FocusableProvider);\nexport {_FocusableProvider as FocusableProvider};\n\n/**\n * Used to make an element focusable and capable of auto focus.\n */\nexport function useFocusable(props: FocusableOptions, domRef: RefObject<HTMLElement>) {\n  let {focusProps} = useFocus(props);\n  let {keyboardProps} = useKeyboard(props);\n  let interactions = mergeProps(focusProps, keyboardProps);\n  let domProps = useFocusableContext(domRef);\n  let interactionProps = props.isDisabled ? {} : domProps;\n\n  useEffect(() => {\n    if (props.autoFocus && domRef.current) {\n      domRef.current.focus();\n    }\n  }, [props.autoFocus, domRef]);\n\n  return {\n    focusableProps: mergeProps(\n      {\n        ...interactions,\n        tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined\n      },\n      interactionProps\n    )\n  };\n}\n"]},"metadata":{},"sourceType":"module"}