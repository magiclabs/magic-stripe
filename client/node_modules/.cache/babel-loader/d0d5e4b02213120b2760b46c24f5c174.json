{"ast":null,"code":"import { __rest } from '../../_virtual/_tslib.js';\nimport React, { useRef, useState, useEffect } from 'react';\nimport { usePress } from '@react-aria/interactions';\nimport '@react-aria/focus';\nimport 'framer-motion';\nimport { mergeProps } from '../../libs/merge-props.js';\nimport 'color';\nimport 'blueimp-md5';\nimport '@artsy/fresnel';\nimport { forwardRefWrapper } from '../../libs/forward-ref-wrapper.js';\nimport { Icon } from '../icons/icon-base.js';\nimport { Copy } from '../icons/monochrome/copy.js';\nimport 'usable-react';\nimport composeRefs from '@seznam/compose-react-refs';\nimport '../theme/inverse-theme-semantics.js';\nimport '@react-aria/ssr';\nimport '../theme/theme-provider.js';\nimport 'react-dom';\nimport 'watch-resize';\nimport { TextButton } from './text-button/text-button.js';\nimport { Input } from './input/input.js';\nimport './radio/radio.js';\nimport '../feedback/alert/alert.js';\nimport '../feedback/toast/toast-provider/toast-provider.js';\nimport 'react-popper-2';\nimport { AnchoredTooltip } from '../feedback/anchored-tooltip.js';\nimport { useClipboard } from '../../hooks/use-clipboard.js';\nconst CopyableInput = /* @__PURE__ */forwardRefWrapper('CopyableInput', (props, externalRef) => {\n  const inputRef = useRef(null);\n  const [copyTooltipText, setCopyTooltipText] = useState('Copy');\n\n  const {\n    value,\n    defaultValue,\n    onCopy,\n    size\n  } = props,\n        otherProps = __rest(props, [\"value\", \"defaultValue\", \"onCopy\", \"size\"]);\n\n  useEffect(() => {\n    if (copyTooltipText !== 'Copy') {\n      const timeout = setTimeout(() => setCopyTooltipText('Copy'), 1000);\n      return () => clearTimeout(timeout);\n    }\n\n    return undefined;\n  }, [copyTooltipText]);\n  const {\n    copy,\n    ref: clipboardRef\n  } = useClipboard(() => {\n    setCopyTooltipText('Copied!');\n    if (onCopy) onCopy();\n  });\n  const {\n    pressProps\n  } = usePress({\n    onPress: copy\n  });\n  const suffix = React.createElement(AnchoredTooltip, {\n    toggle: true,\n    delay: 0,\n    anchor: React.createElement(TextButton, Object.assign({\n      size: size === 'lg' ? 'md' : size\n    }, mergeProps(pressProps)), React.createElement(Icon, {\n      type: Copy\n    }))\n  }, React.createElement(\"p\", {\n    style: {\n      textAlign: 'center'\n    }\n  }, copyTooltipText));\n  return React.createElement(Input, Object.assign({\n    value: value,\n    defaultValue: defaultValue,\n    suffix: suffix,\n    size: size\n  }, otherProps, {\n    ref: composeRefs(inputRef, externalRef, clipboardRef)\n  }));\n});\nexport { CopyableInput };","map":{"version":3,"sources":["../../../../src/components/primitives/copyable-input.tsx"],"names":["MonochromeIcons.Copy"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;MAea,aAAa,GAAA,eAAmB,iBAAiB,CAC5D,eAD4D,EAG5D,CAAC,KAAD,EAAQ,WAAR,KAAmB;AACjB,QAAM,QAAQ,GAAG,MAAM,CAA0B,IAA1B,CAAvB;AACA,QAAM,CAAC,eAAD,EAAkB,kBAAlB,IAAwC,QAAQ,CAAC,MAAD,CAAtD;;AAEA,QAAM;AAAE,IAAA,KAAF;AAAS,IAAA,YAAT;AAAuB,IAAA,MAAvB;AAA+B,IAAA;AAA/B,MAAuD,KAA7D;AAAA,QAA8C,UAAU,GAAA,MAAA,CAAK,KAAL,EAAlD,CAAA,OAAA,EAAA,cAAA,EAAA,QAAA,EAAA,MAAA,CAAkD,CAAxD;;AAEA,EAAA,SAAS,CAAC,MAAA;AACR,QAAI,eAAe,KAAK,MAAxB,EAAgC;AAC9B,YAAM,OAAO,GAAG,UAAU,CAAC,MAAM,kBAAkB,CAAC,MAAD,CAAzB,EAAmC,IAAnC,CAA1B;AACA,aAAO,MAAM,YAAY,CAAC,OAAD,CAAzB;AACD;;AAED,WAAO,SAAP;AACD,GAPQ,EAON,CAAC,eAAD,CAPM,CAAT;AASA,QAAM;AAAE,IAAA,IAAF;AAAQ,IAAA,GAAG,EAAE;AAAb,MAA8B,YAAY,CAAC,MAAA;AAC/C,IAAA,kBAAkB,CAAC,SAAD,CAAlB;AACA,QAAI,MAAJ,EAAY,MAAM;AACnB,GAH+C,CAAhD;AAKA,QAAM;AAAE,IAAA;AAAF,MAAiB,QAAQ,CAAC;AAAE,IAAA,OAAO,EAAE;AAAX,GAAD,CAA/B;AAEA,QAAM,MAAM,GACV,KAAA,CAAA,aAAA,CAAC,eAAD,EAAgB;AACd,IAAA,MAAM,EAAA,IADQ;AAEd,IAAA,KAAK,EAAE,CAFO;AAGd,IAAA,MAAM,EACJ,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW,MAAA,CAAA,MAAA,CAAA;AAAC,MAAA,IAAI,EAAE,IAAI,KAAK,IAAT,GAAgB,IAAhB,GAAuB;AAA9B,KAAA,EAAwC,UAAU,CAAC,UAAD,CAAlD,CAAX,EACE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK;AAAC,MAAA,IAAI,EAAEA;AAAP,KAAL,CADF;AAJY,GAAhB,EASE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AAAG,IAAA,KAAK,EAAE;AAAE,MAAA,SAAS,EAAE;AAAb;AAAV,GAAA,EAAoC,eAApC,CATF,CADF;AAcA,SACE,KAAA,CAAA,aAAA,CAAC,KAAD,EAAM,MAAA,CAAA,MAAA,CAAA;AACJ,IAAA,KAAK,EAAE,KADH;AAEJ,IAAA,YAAY,EAAE,YAFV;AAGJ,IAAA,MAAM,EAAE,MAHJ;AAIJ,IAAA,IAAI,EAAE;AAJF,GAAA,EAKA,UALA,EAKU;AACd,IAAA,GAAG,EAAE,WAAW,CAAC,QAAD,EAAW,WAAX,EAAwB,YAAxB;AADF,GALV,CAAN,CADF;AAUD,CAjD2D,C","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport composeRefs from '@seznam/compose-react-refs';\nimport { usePress } from '@react-aria/interactions';\nimport { Input } from './input/input';\nimport { Icon, MonochromeIcons } from '../icons';\nimport { AnchoredTooltip } from '../feedback';\nimport { useClipboard } from '../../hooks/use-clipboard';\nimport { forwardRefWrapper } from '../../libs/forward-ref-wrapper';\nimport { TextButton } from '.';\nimport { mergeProps } from '../../libs/merge-props';\n\ninterface CopyInputProps extends React.ComponentProps<typeof Input> {\n  onCopy?: () => void;\n}\n\nexport const CopyableInput = /* @__PURE__ */ forwardRefWrapper<HTMLInputElement, CopyInputProps>(\n  'CopyableInput',\n\n  (props, externalRef) => {\n    const inputRef = useRef<HTMLInputElement | null>(null);\n    const [copyTooltipText, setCopyTooltipText] = useState('Copy');\n\n    const { value, defaultValue, onCopy, size, ...otherProps } = props;\n\n    useEffect(() => {\n      if (copyTooltipText !== 'Copy') {\n        const timeout = setTimeout(() => setCopyTooltipText('Copy'), 1000);\n        return () => clearTimeout(timeout);\n      }\n\n      return undefined;\n    }, [copyTooltipText]);\n\n    const { copy, ref: clipboardRef } = useClipboard(() => {\n      setCopyTooltipText('Copied!');\n      if (onCopy) onCopy();\n    });\n\n    const { pressProps } = usePress({ onPress: copy });\n\n    const suffix = (\n      <AnchoredTooltip\n        toggle\n        delay={0}\n        anchor={\n          <TextButton size={size === 'lg' ? 'md' : size} {...mergeProps(pressProps)}>\n            <Icon type={MonochromeIcons.Copy} />\n          </TextButton>\n        }\n      >\n        <p style={{ textAlign: 'center' }}>{copyTooltipText}</p>\n      </AnchoredTooltip>\n    );\n\n    return (\n      <Input\n        value={value}\n        defaultValue={defaultValue}\n        suffix={suffix}\n        size={size}\n        {...otherProps}\n        ref={composeRefs(inputRef, externalRef, clipboardRef)}\n      />\n    );\n  },\n);\n"]},"metadata":{},"sourceType":"module"}