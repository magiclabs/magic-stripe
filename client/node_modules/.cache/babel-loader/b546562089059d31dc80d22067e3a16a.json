{"ast":null,"code":"'use strict';\n\nconst makeRequest = require('./makeRequest');\n\nconst utils = require('./utils');\n\nfunction makeAutoPaginationMethods(self, requestArgs, spec, firstPagePromise) {\n  const promiseCache = {\n    currentPromise: null\n  };\n  const reverseIteration = isReverseIteration(requestArgs);\n  let listPromise = firstPagePromise;\n  let i = 0;\n\n  function iterate(listResult) {\n    if (!(listResult && listResult.data && typeof listResult.data.length === 'number')) {\n      throw Error('Unexpected: Stripe API response does not have a well-formed `data` array.');\n    }\n\n    if (i < listResult.data.length) {\n      const idx = reverseIteration ? listResult.data.length - 1 - i : i;\n      const value = listResult.data[idx];\n      i += 1;\n      return {\n        value,\n        done: false\n      };\n    } else if (listResult.has_more) {\n      // Reset counter, request next page, and recurse.\n      i = 0;\n      const lastId = getLastId(listResult, reverseIteration);\n      listPromise = makeRequest(self, requestArgs, spec, {\n        [reverseIteration ? 'ending_before' : 'starting_after']: lastId\n      });\n      return listPromise.then(iterate);\n    }\n\n    return {\n      value: undefined,\n      done: true\n    };\n  }\n\n  function asyncIteratorNext() {\n    return memoizedPromise(promiseCache, (resolve, reject) => {\n      return listPromise.then(iterate).then(resolve).catch(reject);\n    });\n  }\n\n  const autoPagingEach = makeAutoPagingEach(asyncIteratorNext);\n  const autoPagingToArray = makeAutoPagingToArray(autoPagingEach);\n  const autoPaginationMethods = {\n    autoPagingEach,\n    autoPagingToArray,\n    // Async iterator functions:\n    next: asyncIteratorNext,\n    return: () => {\n      // This is required for `break`.\n      return {};\n    },\n    [getAsyncIteratorSymbol()]: () => {\n      return autoPaginationMethods;\n    }\n  };\n  return autoPaginationMethods;\n}\n\nmodule.exports.makeAutoPaginationMethods = makeAutoPaginationMethods;\n/**\n * ----------------\n * Private Helpers:\n * ----------------\n */\n\nfunction getAsyncIteratorSymbol() {\n  if (typeof Symbol !== 'undefined' && Symbol.asyncIterator) {\n    return Symbol.asyncIterator;\n  } // Follow the convention from libraries like iterall: https://github.com/leebyron/iterall#asynciterator-1\n\n\n  return '@@asyncIterator';\n}\n\nfunction getDoneCallback(args) {\n  if (args.length < 2) {\n    return undefined;\n  }\n\n  const onDone = args[1];\n\n  if (typeof onDone !== 'function') {\n    throw Error(`The second argument to autoPagingEach, if present, must be a callback function; received ${typeof onDone}`);\n  }\n\n  return onDone;\n}\n/**\n * We allow four forms of the `onItem` callback (the middle two being equivalent),\n *\n *   1. `.autoPagingEach((item) => { doSomething(item); return false; });`\n *   2. `.autoPagingEach(async (item) => { await doSomething(item); return false; });`\n *   3. `.autoPagingEach((item) => doSomething(item).then(() => false));`\n *   4. `.autoPagingEach((item, next) => { doSomething(item); next(false); });`\n *\n * In addition to standard validation, this helper\n * coalesces the former forms into the latter form.\n */\n\n\nfunction getItemCallback(args) {\n  if (args.length === 0) {\n    return undefined;\n  }\n\n  const onItem = args[0];\n\n  if (typeof onItem !== 'function') {\n    throw Error(`The first argument to autoPagingEach, if present, must be a callback function; received ${typeof onItem}`);\n  } // 4. `.autoPagingEach((item, next) => { doSomething(item); next(false); });`\n\n\n  if (onItem.length === 2) {\n    return onItem;\n  }\n\n  if (onItem.length > 2) {\n    throw Error(`The \\`onItem\\` callback function passed to autoPagingEach must accept at most two arguments; got ${onItem}`);\n  } // This magically handles all three of these usecases (the latter two being functionally identical):\n  // 1. `.autoPagingEach((item) => { doSomething(item); return false; });`\n  // 2. `.autoPagingEach(async (item) => { await doSomething(item); return false; });`\n  // 3. `.autoPagingEach((item) => doSomething(item).then(() => false));`\n\n\n  return function _onItem(item, next) {\n    const shouldContinue = onItem(item);\n    next(shouldContinue);\n  };\n}\n\nfunction getLastId(listResult, reverseIteration) {\n  const lastIdx = reverseIteration ? 0 : listResult.data.length - 1;\n  const lastItem = listResult.data[lastIdx];\n  const lastId = lastItem && lastItem.id;\n\n  if (!lastId) {\n    throw Error('Unexpected: No `id` found on the last item while auto-paging a list.');\n  }\n\n  return lastId;\n}\n/**\n * If a user calls `.next()` multiple times in parallel,\n * return the same result until something has resolved\n * to prevent page-turning race conditions.\n */\n\n\nfunction memoizedPromise(promiseCache, cb) {\n  if (promiseCache.currentPromise) {\n    return promiseCache.currentPromise;\n  }\n\n  promiseCache.currentPromise = new Promise(cb).then(ret => {\n    promiseCache.currentPromise = undefined;\n    return ret;\n  });\n  return promiseCache.currentPromise;\n}\n\nfunction makeAutoPagingEach(asyncIteratorNext) {\n  return function autoPagingEach()\n  /* onItem?, onDone? */\n  {\n    const args = [].slice.call(arguments);\n    const onItem = getItemCallback(args);\n    const onDone = getDoneCallback(args);\n\n    if (args.length > 2) {\n      throw Error('autoPagingEach takes up to two arguments; received:', args);\n    }\n\n    const autoPagePromise = wrapAsyncIteratorWithCallback(asyncIteratorNext, onItem);\n    return utils.callbackifyPromiseWithTimeout(autoPagePromise, onDone);\n  };\n}\n\nfunction makeAutoPagingToArray(autoPagingEach) {\n  return function autoPagingToArray(opts, onDone) {\n    const limit = opts && opts.limit;\n\n    if (!limit) {\n      throw Error('You must pass a `limit` option to autoPagingToArray, e.g., `autoPagingToArray({limit: 1000});`.');\n    }\n\n    if (limit > 10000) {\n      throw Error('You cannot specify a limit of more than 10,000 items to fetch in `autoPagingToArray`; use `autoPagingEach` to iterate through longer lists.');\n    }\n\n    const promise = new Promise((resolve, reject) => {\n      const items = [];\n      autoPagingEach(item => {\n        items.push(item);\n\n        if (items.length >= limit) {\n          return false;\n        }\n      }).then(() => {\n        resolve(items);\n      }).catch(reject);\n    });\n    return utils.callbackifyPromiseWithTimeout(promise, onDone);\n  };\n}\n\nfunction wrapAsyncIteratorWithCallback(asyncIteratorNext, onItem) {\n  return new Promise((resolve, reject) => {\n    function handleIteration(iterResult) {\n      if (iterResult.done) {\n        resolve();\n        return;\n      }\n\n      const item = iterResult.value;\n      return new Promise(next => {\n        // Bit confusing, perhaps; we pass a `resolve` fn\n        // to the user, so they can decide when and if to continue.\n        // They can return false, or a promise which resolves to false, to break.\n        onItem(item, next);\n      }).then(shouldContinue => {\n        if (shouldContinue === false) {\n          return handleIteration({\n            done: true\n          });\n        } else {\n          return asyncIteratorNext().then(handleIteration);\n        }\n      });\n    }\n\n    asyncIteratorNext().then(handleIteration).catch(reject);\n  });\n}\n\nfunction isReverseIteration(requestArgs) {\n  const args = [].slice.call(requestArgs);\n  const dataFromArgs = utils.getDataFromArgs(args);\n  return !!dataFromArgs.ending_before;\n}","map":{"version":3,"sources":["/Users/maricrisbonzo/Desktop/magic-apps/magic-stripe/node_modules/stripe/lib/autoPagination.js"],"names":["makeRequest","require","utils","makeAutoPaginationMethods","self","requestArgs","spec","firstPagePromise","promiseCache","currentPromise","reverseIteration","isReverseIteration","listPromise","i","iterate","listResult","data","length","Error","idx","value","done","has_more","lastId","getLastId","then","undefined","asyncIteratorNext","memoizedPromise","resolve","reject","catch","autoPagingEach","makeAutoPagingEach","autoPagingToArray","makeAutoPagingToArray","autoPaginationMethods","next","return","getAsyncIteratorSymbol","module","exports","Symbol","asyncIterator","getDoneCallback","args","onDone","getItemCallback","onItem","_onItem","item","shouldContinue","lastIdx","lastItem","id","cb","Promise","ret","slice","call","arguments","autoPagePromise","wrapAsyncIteratorWithCallback","callbackifyPromiseWithTimeout","opts","limit","promise","items","push","handleIteration","iterResult","dataFromArgs","getDataFromArgs","ending_before"],"mappings":"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","sourcesContent":["'use strict';\n\nconst makeRequest = require('./makeRequest');\nconst utils = require('./utils');\n\nfunction makeAutoPaginationMethods(self, requestArgs, spec, firstPagePromise) {\n  const promiseCache = {currentPromise: null};\n  const reverseIteration = isReverseIteration(requestArgs);\n  let listPromise = firstPagePromise;\n  let i = 0;\n\n  function iterate(listResult) {\n    if (\n      !(\n        listResult &&\n        listResult.data &&\n        typeof listResult.data.length === 'number'\n      )\n    ) {\n      throw Error(\n        'Unexpected: Stripe API response does not have a well-formed `data` array.'\n      );\n    }\n\n    if (i < listResult.data.length) {\n      const idx = reverseIteration ? listResult.data.length - 1 - i : i;\n      const value = listResult.data[idx];\n      i += 1;\n      return {value, done: false};\n    } else if (listResult.has_more) {\n      // Reset counter, request next page, and recurse.\n      i = 0;\n      const lastId = getLastId(listResult, reverseIteration);\n      listPromise = makeRequest(self, requestArgs, spec, {\n        [reverseIteration ? 'ending_before' : 'starting_after']: lastId,\n      });\n      return listPromise.then(iterate);\n    }\n    return {value: undefined, done: true};\n  }\n\n  function asyncIteratorNext() {\n    return memoizedPromise(promiseCache, (resolve, reject) => {\n      return listPromise\n        .then(iterate)\n        .then(resolve)\n        .catch(reject);\n    });\n  }\n\n  const autoPagingEach = makeAutoPagingEach(asyncIteratorNext);\n  const autoPagingToArray = makeAutoPagingToArray(autoPagingEach);\n\n  const autoPaginationMethods = {\n    autoPagingEach,\n    autoPagingToArray,\n\n    // Async iterator functions:\n    next: asyncIteratorNext,\n    return: () => {\n      // This is required for `break`.\n      return {};\n    },\n    [getAsyncIteratorSymbol()]: () => {\n      return autoPaginationMethods;\n    },\n  };\n  return autoPaginationMethods;\n}\n\nmodule.exports.makeAutoPaginationMethods = makeAutoPaginationMethods;\n\n/**\n * ----------------\n * Private Helpers:\n * ----------------\n */\n\nfunction getAsyncIteratorSymbol() {\n  if (typeof Symbol !== 'undefined' && Symbol.asyncIterator) {\n    return Symbol.asyncIterator;\n  }\n  // Follow the convention from libraries like iterall: https://github.com/leebyron/iterall#asynciterator-1\n  return '@@asyncIterator';\n}\n\nfunction getDoneCallback(args) {\n  if (args.length < 2) {\n    return undefined;\n  }\n  const onDone = args[1];\n  if (typeof onDone !== 'function') {\n    throw Error(\n      `The second argument to autoPagingEach, if present, must be a callback function; received ${typeof onDone}`\n    );\n  }\n  return onDone;\n}\n\n/**\n * We allow four forms of the `onItem` callback (the middle two being equivalent),\n *\n *   1. `.autoPagingEach((item) => { doSomething(item); return false; });`\n *   2. `.autoPagingEach(async (item) => { await doSomething(item); return false; });`\n *   3. `.autoPagingEach((item) => doSomething(item).then(() => false));`\n *   4. `.autoPagingEach((item, next) => { doSomething(item); next(false); });`\n *\n * In addition to standard validation, this helper\n * coalesces the former forms into the latter form.\n */\nfunction getItemCallback(args) {\n  if (args.length === 0) {\n    return undefined;\n  }\n  const onItem = args[0];\n  if (typeof onItem !== 'function') {\n    throw Error(\n      `The first argument to autoPagingEach, if present, must be a callback function; received ${typeof onItem}`\n    );\n  }\n\n  // 4. `.autoPagingEach((item, next) => { doSomething(item); next(false); });`\n  if (onItem.length === 2) {\n    return onItem;\n  }\n\n  if (onItem.length > 2) {\n    throw Error(\n      `The \\`onItem\\` callback function passed to autoPagingEach must accept at most two arguments; got ${onItem}`\n    );\n  }\n\n  // This magically handles all three of these usecases (the latter two being functionally identical):\n  // 1. `.autoPagingEach((item) => { doSomething(item); return false; });`\n  // 2. `.autoPagingEach(async (item) => { await doSomething(item); return false; });`\n  // 3. `.autoPagingEach((item) => doSomething(item).then(() => false));`\n  return function _onItem(item, next) {\n    const shouldContinue = onItem(item);\n    next(shouldContinue);\n  };\n}\n\nfunction getLastId(listResult, reverseIteration) {\n  const lastIdx = reverseIteration ? 0 : listResult.data.length - 1;\n  const lastItem = listResult.data[lastIdx];\n  const lastId = lastItem && lastItem.id;\n  if (!lastId) {\n    throw Error(\n      'Unexpected: No `id` found on the last item while auto-paging a list.'\n    );\n  }\n  return lastId;\n}\n\n/**\n * If a user calls `.next()` multiple times in parallel,\n * return the same result until something has resolved\n * to prevent page-turning race conditions.\n */\nfunction memoizedPromise(promiseCache, cb) {\n  if (promiseCache.currentPromise) {\n    return promiseCache.currentPromise;\n  }\n  promiseCache.currentPromise = new Promise(cb).then((ret) => {\n    promiseCache.currentPromise = undefined;\n    return ret;\n  });\n  return promiseCache.currentPromise;\n}\n\nfunction makeAutoPagingEach(asyncIteratorNext) {\n  return function autoPagingEach(/* onItem?, onDone? */) {\n    const args = [].slice.call(arguments);\n    const onItem = getItemCallback(args);\n    const onDone = getDoneCallback(args);\n    if (args.length > 2) {\n      throw Error('autoPagingEach takes up to two arguments; received:', args);\n    }\n\n    const autoPagePromise = wrapAsyncIteratorWithCallback(\n      asyncIteratorNext,\n      onItem\n    );\n    return utils.callbackifyPromiseWithTimeout(autoPagePromise, onDone);\n  };\n}\n\nfunction makeAutoPagingToArray(autoPagingEach) {\n  return function autoPagingToArray(opts, onDone) {\n    const limit = opts && opts.limit;\n    if (!limit) {\n      throw Error(\n        'You must pass a `limit` option to autoPagingToArray, e.g., `autoPagingToArray({limit: 1000});`.'\n      );\n    }\n    if (limit > 10000) {\n      throw Error(\n        'You cannot specify a limit of more than 10,000 items to fetch in `autoPagingToArray`; use `autoPagingEach` to iterate through longer lists.'\n      );\n    }\n    const promise = new Promise((resolve, reject) => {\n      const items = [];\n      autoPagingEach((item) => {\n        items.push(item);\n        if (items.length >= limit) {\n          return false;\n        }\n      })\n        .then(() => {\n          resolve(items);\n        })\n        .catch(reject);\n    });\n    return utils.callbackifyPromiseWithTimeout(promise, onDone);\n  };\n}\n\nfunction wrapAsyncIteratorWithCallback(asyncIteratorNext, onItem) {\n  return new Promise((resolve, reject) => {\n    function handleIteration(iterResult) {\n      if (iterResult.done) {\n        resolve();\n        return;\n      }\n\n      const item = iterResult.value;\n      return new Promise((next) => {\n        // Bit confusing, perhaps; we pass a `resolve` fn\n        // to the user, so they can decide when and if to continue.\n        // They can return false, or a promise which resolves to false, to break.\n        onItem(item, next);\n      }).then((shouldContinue) => {\n        if (shouldContinue === false) {\n          return handleIteration({done: true});\n        } else {\n          return asyncIteratorNext().then(handleIteration);\n        }\n      });\n    }\n\n    asyncIteratorNext()\n      .then(handleIteration)\n      .catch(reject);\n  });\n}\n\nfunction isReverseIteration(requestArgs) {\n  const args = [].slice.call(requestArgs);\n  const dataFromArgs = utils.getDataFromArgs(args);\n\n  return !!dataFromArgs.ending_before;\n}\n"]},"metadata":{},"sourceType":"script"}