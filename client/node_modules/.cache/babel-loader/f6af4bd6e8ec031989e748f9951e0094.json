{"ast":null,"code":"/**\n * This file contains our type guards.\n *\n * Type guards are a feature of TypeScript which narrow the type signature of\n * intesection types (types that can be one thing or another).\n *\n * @see\n * https://www.typescriptlang.org/docs/handbook/advanced-types.html#type-guards-and-differentiating-types\n */\nimport { MagicPayloadMethod, RPCErrorCode } from '@magic-sdk/types';\n/**\n * Assert `value` is `undefined`.\n */\n\nfunction isUndefined(value) {\n  return typeof value === 'undefined';\n}\n/**\n * Assert `value` is `null`.\n */\n\n\nfunction isNull(value) {\n  return value === null;\n}\n/**\n * Assert `value` is `null` or `undefined`.\n */\n\n\nfunction isNil(value) {\n  return isNull(value) || isUndefined(value);\n}\n/**\n * Assert `value` is a `JsonRpcRequestPayload` object.\n */\n\n\nexport function isJsonRpcRequestPayload(value) {\n  if (isNil(value)) return false;\n  return !isUndefined(value.jsonrpc) && !isUndefined(value.id) && !isUndefined(value.method) && !isUndefined(value.params);\n}\n/**\n * Assert `value` is a `JsonRpcResponsePayload` object.\n */\n\nexport function isJsonRpcResponsePayload(value) {\n  if (isNil(value)) return false;\n  return !isUndefined(value.jsonrpc) && !isUndefined(value.id) && (!isUndefined(value.result) || !isUndefined(value.error));\n}\n/**\n * Assert `value` is a Magic SDK payload method identifier.\n */\n\nexport function isMagicPayloadMethod(value) {\n  if (isNil(value)) return false;\n  return typeof value === 'string' && Object.values(MagicPayloadMethod).includes(value);\n}\n/**\n * Assert `value` is an expected JSON RPC error code.\n */\n\nexport function isJsonRpcErrorCode(value) {\n  if (isNil(value)) return false;\n  return typeof value === 'number' && Object.values(RPCErrorCode).includes(value);\n}\n/**\n * Assert `value` is an empty, plain object.\n */\n\nexport function isEmpty(value) {\n  if (!value) return true;\n\n  for (var key in value) {\n    /* istanbul ignore else */\n    if (Object.hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["../../../src/util/type-guards.ts"],"names":[],"mappings":"AAAA;;;;;;;;AAQG;AAEH,SAAwD,kBAAxD,EAA4E,YAA5E,QAAgG,kBAAhG;AAEA;;AAEG;;AACH,SAAS,WAAT,CAAqB,KAArB,EAA+B;AAC7B,SAAO,OAAO,KAAP,KAAiB,WAAxB;AACD;AAED;;AAEG;;;AACH,SAAS,MAAT,CAAgB,KAAhB,EAA0B;AACxB,SAAO,KAAK,KAAK,IAAjB;AACD;AAED;;AAEG;;;AACH,SAAS,KAAT,CAAe,KAAf,EAAyB;AACvB,SAAO,MAAM,CAAC,KAAD,CAAN,IAAiB,WAAW,CAAC,KAAD,CAAnC;AACD;AAED;;AAEG;;;AACH,OAAM,SAAU,uBAAV,CAAkC,KAAlC,EAA+D;AACnE,MAAI,KAAK,CAAC,KAAD,CAAT,EAAkB,OAAO,KAAP;AAClB,SACE,CAAC,WAAW,CAAC,KAAK,CAAC,OAAP,CAAZ,IAA+B,CAAC,WAAW,CAAC,KAAK,CAAC,EAAP,CAA3C,IAAyD,CAAC,WAAW,CAAC,KAAK,CAAC,MAAP,CAArE,IAAuF,CAAC,WAAW,CAAC,KAAK,CAAC,MAAP,CADrG;AAGD;AAED;;AAEG;;AACH,OAAM,SAAU,wBAAV,CAAmC,KAAnC,EAA6C;AACjD,MAAI,KAAK,CAAC,KAAD,CAAT,EAAkB,OAAO,KAAP;AAClB,SACE,CAAC,WAAW,CAAC,KAAK,CAAC,OAAP,CAAZ,IAA+B,CAAC,WAAW,CAAC,KAAK,CAAC,EAAP,CAA3C,KAA0D,CAAC,WAAW,CAAC,KAAK,CAAC,MAAP,CAAZ,IAA8B,CAAC,WAAW,CAAC,KAAK,CAAC,KAAP,CAApG,CADF;AAGD;AAED;;AAEG;;AACH,OAAM,SAAU,oBAAV,CAA+B,KAA/B,EAA0C;AAC9C,MAAI,KAAK,CAAC,KAAD,CAAT,EAAkB,OAAO,KAAP;AAClB,SAAO,OAAO,KAAP,KAAiB,QAAjB,IAA6B,MAAM,CAAC,MAAP,CAAc,kBAAd,EAAkC,QAAlC,CAA2C,KAA3C,CAApC;AACD;AAED;;AAEG;;AACH,OAAM,SAAU,kBAAV,CAA6B,KAA7B,EAAwC;AAC5C,MAAI,KAAK,CAAC,KAAD,CAAT,EAAkB,OAAO,KAAP;AAClB,SAAO,OAAO,KAAP,KAAiB,QAAjB,IAA6B,MAAM,CAAC,MAAP,CAAc,YAAd,EAA4B,QAA5B,CAAqC,KAArC,CAApC;AACD;AAED;;AAEG;;AACH,OAAM,SAAU,OAAV,CAAkB,KAAlB,EAA6B;AACjC,MAAI,CAAC,KAAL,EAAY,OAAO,IAAP;;AAEZ,OAAK,IAAM,GAAX,IAAkB,KAAlB,EAAyB;AACvB;AACA,QAAI,MAAM,CAAC,cAAP,CAAsB,IAAtB,CAA2B,KAA3B,EAAkC,GAAlC,CAAJ,EAA4C;AAC1C,aAAO,KAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD","sourceRoot":"","sourcesContent":["/**\n * This file contains our type guards.\n *\n * Type guards are a feature of TypeScript which narrow the type signature of\n * intesection types (types that can be one thing or another).\n *\n * @see\n * https://www.typescriptlang.org/docs/handbook/advanced-types.html#type-guards-and-differentiating-types\n */\nimport { MagicPayloadMethod, RPCErrorCode } from '@magic-sdk/types';\n/**\n * Assert `value` is `undefined`.\n */\nfunction isUndefined(value) {\n    return typeof value === 'undefined';\n}\n/**\n * Assert `value` is `null`.\n */\nfunction isNull(value) {\n    return value === null;\n}\n/**\n * Assert `value` is `null` or `undefined`.\n */\nfunction isNil(value) {\n    return isNull(value) || isUndefined(value);\n}\n/**\n * Assert `value` is a `JsonRpcRequestPayload` object.\n */\nexport function isJsonRpcRequestPayload(value) {\n    if (isNil(value))\n        return false;\n    return (!isUndefined(value.jsonrpc) && !isUndefined(value.id) && !isUndefined(value.method) && !isUndefined(value.params));\n}\n/**\n * Assert `value` is a `JsonRpcResponsePayload` object.\n */\nexport function isJsonRpcResponsePayload(value) {\n    if (isNil(value))\n        return false;\n    return (!isUndefined(value.jsonrpc) && !isUndefined(value.id) && (!isUndefined(value.result) || !isUndefined(value.error)));\n}\n/**\n * Assert `value` is a Magic SDK payload method identifier.\n */\nexport function isMagicPayloadMethod(value) {\n    if (isNil(value))\n        return false;\n    return typeof value === 'string' && Object.values(MagicPayloadMethod).includes(value);\n}\n/**\n * Assert `value` is an expected JSON RPC error code.\n */\nexport function isJsonRpcErrorCode(value) {\n    if (isNil(value))\n        return false;\n    return typeof value === 'number' && Object.values(RPCErrorCode).includes(value);\n}\n/**\n * Assert `value` is an empty, plain object.\n */\nexport function isEmpty(value) {\n    if (!value)\n        return true;\n    for (var key in value) {\n        /* istanbul ignore else */\n        if (Object.hasOwnProperty.call(value, key)) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=type-guards.js.map"]},"metadata":{},"sourceType":"module"}