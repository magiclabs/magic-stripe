{"ast":null,"code":"import { __rest } from '../../../_virtual/_tslib.js';\nimport React from 'react';\nimport { useHover, usePress } from '@react-aria/interactions';\nimport { useFocusRing } from '@react-aria/focus';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport { classNames } from '../../../libs/class-names.js';\nimport { mergeProps } from '../../../libs/merge-props.js';\nimport 'color';\nimport 'blueimp-md5';\nimport '@artsy/fresnel';\nimport { useTheme } from '../../theme/use-theme.js';\nimport { forwardRefWrapper } from '../../../libs/forward-ref-wrapper.js';\nimport { IconColorProvider, Icon } from '../../icons/icon-base.js';\nimport 'usable-react';\nimport '@seznam/compose-react-refs';\nimport { InverseThemeSemantics } from '../../theme/inverse-theme-semantics.js';\nimport '@react-aria/ssr';\nimport '../../theme/theme-provider.js';\nimport { Spacer } from '../../layout/spacer.js';\nimport { useScaleIn } from '../../../hooks/transitions.js';\nimport 'react-dom';\nimport 'watch-resize';\nimport modules_15fffc63 from './text-button.less.js';\n/**\r\n * Determines a _default_ color for icons nested in a `<TextButton>`.\r\n */\n\nfunction useIconColor(baseColor, inverseSemantics, isHovered, isPressed) {\n  const theme = useTheme({\n    inverseSemantics\n  });\n  let tone = 'base'; // \":hover\" state\n\n  if (isHovered) {\n    tone = theme.isLightTheme ? 'lighter' : 'darker';\n  } // \":active\" state\n\n\n  if (isPressed) {\n    tone = theme.isLightTheme ? 'darkest' : 'lightest';\n  }\n\n  return baseColor ? theme.hex[baseColor][tone] : undefined;\n}\n\nconst TextButton = /* @__PURE__ */forwardRefWrapper('TextButton', {\n  size: 'md',\n  color: 'primary'\n}, (props, externalRef) => {\n  const {\n    onPress,\n    className,\n    disabled,\n    size,\n    color,\n    leadingIcon,\n    trailingIcon,\n    children\n  } = props,\n        otherProps = __rest(props, [\"onPress\", \"className\", \"disabled\", \"size\", \"color\", \"leadingIcon\", \"trailingIcon\", \"children\"]);\n\n  const {\n    isFocusVisible,\n    focusProps\n  } = useFocusRing();\n  const {\n    isHovered,\n    hoverProps\n  } = useHover({\n    isDisabled: disabled\n  });\n  const {\n    isPressed,\n    pressProps\n  } = usePress({\n    onPress,\n    isDisabled: disabled\n  });\n  const getScaleProps = useScaleIn();\n  const inverseSemantics = color === 'secondary';\n  const iconColor = useIconColor(color, inverseSemantics, isHovered, isPressed);\n  return React.createElement(IconColorProvider, {\n    colorA: iconColor\n  }, React.createElement(InverseThemeSemantics, {\n    active: inverseSemantics\n  }, React.createElement(\"button\", Object.assign({\n    className: classNames([className, modules_15fffc63.TextButton, modules_15fffc63[size], modules_15fffc63[`size_${size}`], modules_15fffc63[`color_${color}`], disabled && modules_15fffc63.disabled, isPressed && modules_15fffc63.active]),\n    type: \"button\",\n    disabled: disabled,\n    \"aria-disabled\": disabled\n  }, mergeProps(pressProps, focusProps, hoverProps, otherProps), {\n    ref: externalRef\n  }), React.createElement(AnimatePresence, null, isFocusVisible && React.createElement(motion.span, Object.assign({\n    \"aria-hidden\": \"true\",\n    className: modules_15fffc63.focusRing\n  }, getScaleProps(1.05)))), leadingIcon && React.createElement(React.Fragment, null, React.createElement(Icon, {\n    size: size === 'sm' ? 20 : 24,\n    type: leadingIcon\n  }), React.createElement(Spacer, {\n    size: 8\n  })), React.createElement(\"span\", {\n    className: modules_15fffc63.buttonLabel\n  }, children), trailingIcon && React.createElement(React.Fragment, null, React.createElement(Spacer, {\n    size: 8\n  }), React.createElement(Icon, {\n    size: size === 'sm' ? 20 : 24,\n    type: trailingIcon\n  })))));\n});\nexport { TextButton };","map":{"version":3,"sources":["../../../../../src/components/primitives/text-button/text-button.tsx"],"names":["styles"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { PressEvent } from '@react-types/shared';\nimport { useHover, usePress } from '@react-aria/interactions';\nimport { useFocusRing } from '@react-aria/focus';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport { mergeProps } from '../../../libs/merge-props';\nimport { classNames } from '../../../libs/class-names';\nimport { Icon, MonochromeIconDefinition, IconColorProvider } from '../../icons';\nimport { Spacer } from '../../layout';\nimport { forwardRefWrapper } from '../../../libs/forward-ref-wrapper';\nimport { useScaleIn } from '../../../hooks/transitions';\nimport { InverseThemeSemantics, useTheme } from '../../theme';\nimport { BaseColorName, ColorTone } from '../../../libs/theme';\n\nimport styles from './text-button.less';\n\ninterface TextButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  disabled?: boolean;\n  onPress?: (event: PressEvent) => void;\n  size?: 'sm' | 'md';\n  color?: 'primary' | 'secondary' | 'tertiary' | 'success' | 'warning' | 'error';\n  leadingIcon?: MonochromeIconDefinition;\n  trailingIcon?: MonochromeIconDefinition;\n}\n\n/**\n * Determines a _default_ color for icons nested in a `<TextButton>`.\n */\nfunction useIconColor(baseColor?: BaseColorName, inverseSemantics?: boolean, isHovered?: boolean, isPressed?: boolean) {\n  const theme = useTheme({ inverseSemantics });\n\n  let tone: ColorTone = 'base';\n\n  // \":hover\" state\n  if (isHovered) {\n    tone = theme.isLightTheme ? 'lighter' : 'darker';\n  }\n\n  // \":active\" state\n  if (isPressed) {\n    tone = theme.isLightTheme ? 'darkest' : 'lightest';\n  }\n\n  return baseColor ? theme.hex[baseColor][tone] : undefined;\n}\n\nexport const TextButton = /* @__PURE__ */ forwardRefWrapper<HTMLButtonElement, TextButtonProps>(\n  'TextButton',\n\n  { size: 'md', color: 'primary' },\n\n  (props, externalRef) => {\n    const { onPress, className, disabled, size, color, leadingIcon, trailingIcon, children, ...otherProps } = props;\n\n    const { isFocusVisible, focusProps } = useFocusRing();\n    const { isHovered, hoverProps } = useHover({ isDisabled: disabled });\n    const { isPressed, pressProps } = usePress({ onPress, isDisabled: disabled });\n    const getScaleProps = useScaleIn();\n\n    const inverseSemantics = color === 'secondary';\n    const iconColor = useIconColor(color, inverseSemantics, isHovered, isPressed);\n\n    return (\n      <IconColorProvider colorA={iconColor}>\n        <InverseThemeSemantics active={inverseSemantics}>\n          <button\n            className={classNames([\n              className,\n              styles.TextButton,\n              styles[size!],\n              styles[`size_${size}`],\n              styles[`color_${color}`],\n              disabled && styles.disabled,\n              isPressed && styles.active,\n            ])}\n            type=\"button\"\n            disabled={disabled}\n            aria-disabled={disabled}\n            {...mergeProps(pressProps, focusProps, hoverProps, otherProps)}\n            ref={externalRef}\n          >\n            <AnimatePresence>\n              {isFocusVisible && (\n                <motion.span aria-hidden=\"true\" className={styles.focusRing} {...getScaleProps(1.05)} />\n              )}\n            </AnimatePresence>\n\n            {leadingIcon && (\n              <>\n                <Icon size={size === 'sm' ? 20 : 24} type={leadingIcon} />\n                <Spacer size={8} />\n              </>\n            )}\n\n            <span className={styles.buttonLabel}>{children}</span>\n\n            {trailingIcon && (\n              <>\n                <Spacer size={8} />\n                <Icon size={size === 'sm' ? 20 : 24} type={trailingIcon} />\n              </>\n            )}\n          </button>\n        </InverseThemeSemantics>\n      </IconColorProvider>\n    );\n  },\n);\n"]},"metadata":{},"sourceType":"module"}