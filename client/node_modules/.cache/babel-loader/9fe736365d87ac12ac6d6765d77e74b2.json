{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport useSWR from 'swr';\nimport { useHistory } from 'react-router-dom';\n\nconst fetchUser = url => fetch(url, {\n  method: 'GET',\n  credentials: 'include'\n}).then(r => r.json()).then(data => {\n  return {\n    user: (data === null || data === void 0 ? void 0 : data.user) || null\n  };\n});\n\nexport function useUser({\n  redirectTo,\n  redirectIfFound,\n  setCustomerEmail\n} = {}) {\n  _s();\n\n  const history = useHistory();\n  const {\n    data,\n    error\n  } = useSWR(`${process.env.REACT_APP_SERVER_URL}/api/user`, fetchUser);\n  const user = data === null || data === void 0 ? void 0 : data.user;\n  console.log('setCustomerEmail in useUser: ', setCustomerEmail);\n\n  if (user && user.email) {\n    setCustomerEmail(user.email);\n  }\n\n  const finished = Boolean(data);\n  const hasUser = Boolean(user);\n  useEffect(() => {\n    if (!redirectTo || !finished) return;\n\n    if ( // If redirectTo is set, redirect if the user was not found.\n    redirectTo && !redirectIfFound && !hasUser || // If redirectIfFound is also set, redirect if the user was found\n    redirectIfFound && hasUser) {\n      history.push(redirectTo);\n    }\n  }, [redirectTo, redirectIfFound, finished, hasUser]);\n  return error ? null : user;\n}\n\n_s(useUser, \"FSaY9TfWZ/NoCHHsRreztqp2lO8=\", false, function () {\n  return [useHistory, useSWR];\n});","map":{"version":3,"sources":["/Users/maricrisbonzo/Desktop/magic-apps/magic-stripe/client/src/lib/hooks.js"],"names":["useEffect","useSWR","useHistory","fetchUser","url","fetch","method","credentials","then","r","json","data","user","useUser","redirectTo","redirectIfFound","setCustomerEmail","history","error","process","env","REACT_APP_SERVER_URL","console","log","email","finished","Boolean","hasUser","push"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAEA,MAAMC,SAAS,GAAIC,GAAD,IAChBC,KAAK,CAACD,GAAD,EAAM;AACTE,EAAAA,MAAM,EAAE,KADC;AAETC,EAAAA,WAAW,EAAE;AAFJ,CAAN,CAAL,CAIGC,IAJH,CAISC,CAAD,IAAOA,CAAC,CAACC,IAAF,EAJf,EAKGF,IALH,CAKSG,IAAD,IAAU;AACd,SAAO;AAAEC,IAAAA,IAAI,EAAE,CAAAD,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEC,IAAN,KAAc;AAAtB,GAAP;AACD,CAPH,CADF;;AAUA,OAAO,SAASC,OAAT,CAAiB;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,eAAd;AAA+BC,EAAAA;AAA/B,IAAoD,EAArE,EAAyE;AAAA;;AAC9E,QAAMC,OAAO,GAAGf,UAAU,EAA1B;AACA,QAAM;AAAES,IAAAA,IAAF;AAAQO,IAAAA;AAAR,MAAkBjB,MAAM,CAAE,GAAEkB,OAAO,CAACC,GAAR,CAAYC,oBAAqB,WAArC,EAAiDlB,SAAjD,CAA9B;AACA,QAAMS,IAAI,GAAGD,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEC,IAAnB;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CP,gBAA7C;;AACA,MAAIJ,IAAI,IAAIA,IAAI,CAACY,KAAjB,EAAwB;AACtBR,IAAAA,gBAAgB,CAACJ,IAAI,CAACY,KAAN,CAAhB;AACD;;AACD,QAAMC,QAAQ,GAAGC,OAAO,CAACf,IAAD,CAAxB;AACA,QAAMgB,OAAO,GAAGD,OAAO,CAACd,IAAD,CAAvB;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACc,UAAD,IAAe,CAACW,QAApB,EAA8B;;AAC9B,SACE;AACCX,IAAAA,UAAU,IAAI,CAACC,eAAf,IAAkC,CAACY,OAApC,IACA;AACCZ,IAAAA,eAAe,IAAIY,OAJtB,EAKE;AACAV,MAAAA,OAAO,CAACW,IAAR,CAAad,UAAb;AACD;AACF,GAVQ,EAUN,CAACA,UAAD,EAAaC,eAAb,EAA8BU,QAA9B,EAAwCE,OAAxC,CAVM,CAAT;AAWA,SAAOT,KAAK,GAAG,IAAH,GAAUN,IAAtB;AACD;;GAvBeC,O;UACEX,U,EACQD,M","sourcesContent":["import { useEffect } from 'react';\nimport useSWR from 'swr';\nimport { useHistory } from 'react-router-dom';\n\nconst fetchUser = (url) =>\n  fetch(url, {\n    method: 'GET',\n    credentials: 'include',\n  })\n    .then((r) => r.json())\n    .then((data) => {\n      return { user: data?.user || null };\n    });\n\nexport function useUser({ redirectTo, redirectIfFound, setCustomerEmail } = {}) {\n  const history = useHistory();\n  const { data, error } = useSWR(`${process.env.REACT_APP_SERVER_URL}/api/user`, fetchUser);\n  const user = data?.user;\n  console.log('setCustomerEmail in useUser: ', setCustomerEmail)\n  if (user && user.email) {\n    setCustomerEmail(user.email)\n  }\n  const finished = Boolean(data);\n  const hasUser = Boolean(user);\n\n  useEffect(() => {\n    if (!redirectTo || !finished) return;\n    if (\n      // If redirectTo is set, redirect if the user was not found.\n      (redirectTo && !redirectIfFound && !hasUser) ||\n      // If redirectIfFound is also set, redirect if the user was found\n      (redirectIfFound && hasUser)\n    ) {\n      history.push(redirectTo);\n    }\n  }, [redirectTo, redirectIfFound, finished, hasUser]);\n  return error ? null : user;\n}"]},"metadata":{},"sourceType":"module"}