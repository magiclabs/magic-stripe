{"ast":null,"code":"'use strict';\n\nconst crypto = require('crypto');\n\nconst utils = require('./utils');\n\nconst {\n  StripeError,\n  StripeSignatureVerificationError\n} = require('./Error');\n\nconst Webhook = {\n  DEFAULT_TOLERANCE: 300,\n\n  // 5 minutes\n  constructEvent(payload, header, secret, tolerance) {\n    this.signature.verifyHeader(payload, header, secret, tolerance || Webhook.DEFAULT_TOLERANCE);\n    const jsonPayload = JSON.parse(payload);\n    return jsonPayload;\n  },\n\n  /**\n   * Generates a header to be used for webhook mocking\n   *\n   * @typedef {object} opts\n   * @property {number} timestamp - Timestamp of the header. Defaults to Date.now()\n   * @property {string} payload - JSON stringified payload object, containing the 'id' and 'object' parameters\n   * @property {string} secret - Stripe webhook secret 'whsec_...'\n   * @property {string} scheme - Version of API to hit. Defaults to 'v1'.\n   * @property {string} signature - Computed webhook signature\n   */\n  generateTestHeaderString: function (opts) {\n    if (!opts) {\n      throw new StripeError({\n        message: 'Options are required'\n      });\n    }\n\n    opts.timestamp = Math.floor(opts.timestamp) || Math.floor(Date.now() / 1000);\n    opts.scheme = opts.scheme || signature.EXPECTED_SCHEME;\n    opts.signature = opts.signature || signature._computeSignature(opts.timestamp + '.' + opts.payload, opts.secret);\n    const generatedHeader = ['t=' + opts.timestamp, opts.scheme + '=' + opts.signature].join(',');\n    return generatedHeader;\n  }\n};\nconst signature = {\n  EXPECTED_SCHEME: 'v1',\n  _computeSignature: (payload, secret) => {\n    return crypto.createHmac('sha256', secret).update(payload, 'utf8').digest('hex');\n  },\n\n  verifyHeader(payload, header, secret, tolerance) {\n    payload = Buffer.isBuffer(payload) ? payload.toString('utf8') : payload; // Express's type for `Request#headers` is `string | []string`\n    // which is because the `set-cookie` header is an array,\n    // but no other headers are an array (docs: https://nodejs.org/api/http.html#http_message_headers)\n    // (Express's Request class is an extension of http.IncomingMessage, and doesn't appear to be relevantly modified: https://github.com/expressjs/express/blob/master/lib/request.js#L31)\n\n    if (Array.isArray(header)) {\n      throw new Error('Unexpected: An array was passed as a header, which should not be possible for the stripe-signature header.');\n    }\n\n    header = Buffer.isBuffer(header) ? header.toString('utf8') : header;\n    const details = parseHeader(header, this.EXPECTED_SCHEME);\n\n    if (!details || details.timestamp === -1) {\n      throw new StripeSignatureVerificationError({\n        message: 'Unable to extract timestamp and signatures from header',\n        detail: {\n          header,\n          payload\n        }\n      });\n    }\n\n    if (!details.signatures.length) {\n      throw new StripeSignatureVerificationError({\n        message: 'No signatures found with expected scheme',\n        detail: {\n          header,\n          payload\n        }\n      });\n    }\n\n    const expectedSignature = this._computeSignature(`${details.timestamp}.${payload}`, secret);\n\n    const signatureFound = !!details.signatures.filter(utils.secureCompare.bind(utils, expectedSignature)).length;\n\n    if (!signatureFound) {\n      throw new StripeSignatureVerificationError({\n        message: 'No signatures found matching the expected signature for payload.' + ' Are you passing the raw request body you received from Stripe?' + ' https://github.com/stripe/stripe-node#webhook-signing',\n        detail: {\n          header,\n          payload\n        }\n      });\n    }\n\n    const timestampAge = Math.floor(Date.now() / 1000) - details.timestamp;\n\n    if (tolerance > 0 && timestampAge > tolerance) {\n      throw new StripeSignatureVerificationError({\n        message: 'Timestamp outside the tolerance zone',\n        detail: {\n          header,\n          payload\n        }\n      });\n    }\n\n    return true;\n  }\n\n};\n\nfunction parseHeader(header, scheme) {\n  if (typeof header !== 'string') {\n    return null;\n  }\n\n  return header.split(',').reduce((accum, item) => {\n    const kv = item.split('=');\n\n    if (kv[0] === 't') {\n      accum.timestamp = kv[1];\n    }\n\n    if (kv[0] === scheme) {\n      accum.signatures.push(kv[1]);\n    }\n\n    return accum;\n  }, {\n    timestamp: -1,\n    signatures: []\n  });\n}\n\nWebhook.signature = signature;\nmodule.exports = Webhook;","map":{"version":3,"sources":["/Users/maricrisbonzo/Desktop/magic-apps/magic-stripe/node_modules/stripe/lib/Webhooks.js"],"names":["crypto","require","utils","StripeError","StripeSignatureVerificationError","Webhook","DEFAULT_TOLERANCE","constructEvent","payload","header","secret","tolerance","signature","verifyHeader","jsonPayload","JSON","parse","generateTestHeaderString","opts","message","timestamp","Math","floor","Date","now","scheme","EXPECTED_SCHEME","_computeSignature","generatedHeader","join","createHmac","update","digest","Buffer","isBuffer","toString","Array","isArray","Error","details","parseHeader","detail","signatures","length","expectedSignature","signatureFound","filter","secureCompare","bind","timestampAge","split","reduce","accum","item","kv","push","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst crypto = require('crypto');\n\nconst utils = require('./utils');\nconst {StripeError, StripeSignatureVerificationError} = require('./Error');\n\nconst Webhook = {\n  DEFAULT_TOLERANCE: 300, // 5 minutes\n\n  constructEvent(payload, header, secret, tolerance) {\n    this.signature.verifyHeader(\n      payload,\n      header,\n      secret,\n      tolerance || Webhook.DEFAULT_TOLERANCE\n    );\n\n    const jsonPayload = JSON.parse(payload);\n    return jsonPayload;\n  },\n\n  /**\n   * Generates a header to be used for webhook mocking\n   *\n   * @typedef {object} opts\n   * @property {number} timestamp - Timestamp of the header. Defaults to Date.now()\n   * @property {string} payload - JSON stringified payload object, containing the 'id' and 'object' parameters\n   * @property {string} secret - Stripe webhook secret 'whsec_...'\n   * @property {string} scheme - Version of API to hit. Defaults to 'v1'.\n   * @property {string} signature - Computed webhook signature\n   */\n  generateTestHeaderString: function(opts) {\n    if (!opts) {\n      throw new StripeError({\n        message: 'Options are required',\n      });\n    }\n\n    opts.timestamp =\n      Math.floor(opts.timestamp) || Math.floor(Date.now() / 1000);\n    opts.scheme = opts.scheme || signature.EXPECTED_SCHEME;\n\n    opts.signature =\n      opts.signature ||\n      signature._computeSignature(\n        opts.timestamp + '.' + opts.payload,\n        opts.secret\n      );\n\n    const generatedHeader = [\n      't=' + opts.timestamp,\n      opts.scheme + '=' + opts.signature,\n    ].join(',');\n\n    return generatedHeader;\n  },\n};\n\nconst signature = {\n  EXPECTED_SCHEME: 'v1',\n\n  _computeSignature: (payload, secret) => {\n    return crypto\n      .createHmac('sha256', secret)\n      .update(payload, 'utf8')\n      .digest('hex');\n  },\n\n  verifyHeader(payload, header, secret, tolerance) {\n    payload = Buffer.isBuffer(payload) ? payload.toString('utf8') : payload;\n\n    // Express's type for `Request#headers` is `string | []string`\n    // which is because the `set-cookie` header is an array,\n    // but no other headers are an array (docs: https://nodejs.org/api/http.html#http_message_headers)\n    // (Express's Request class is an extension of http.IncomingMessage, and doesn't appear to be relevantly modified: https://github.com/expressjs/express/blob/master/lib/request.js#L31)\n    if (Array.isArray(header)) {\n      throw new Error(\n        'Unexpected: An array was passed as a header, which should not be possible for the stripe-signature header.'\n      );\n    }\n\n    header = Buffer.isBuffer(header) ? header.toString('utf8') : header;\n\n    const details = parseHeader(header, this.EXPECTED_SCHEME);\n\n    if (!details || details.timestamp === -1) {\n      throw new StripeSignatureVerificationError({\n        message: 'Unable to extract timestamp and signatures from header',\n        detail: {\n          header,\n          payload,\n        },\n      });\n    }\n\n    if (!details.signatures.length) {\n      throw new StripeSignatureVerificationError({\n        message: 'No signatures found with expected scheme',\n        detail: {\n          header,\n          payload,\n        },\n      });\n    }\n\n    const expectedSignature = this._computeSignature(\n      `${details.timestamp}.${payload}`,\n      secret\n    );\n\n    const signatureFound = !!details.signatures.filter(\n      utils.secureCompare.bind(utils, expectedSignature)\n    ).length;\n\n    if (!signatureFound) {\n      throw new StripeSignatureVerificationError({\n        message:\n          'No signatures found matching the expected signature for payload.' +\n          ' Are you passing the raw request body you received from Stripe?' +\n          ' https://github.com/stripe/stripe-node#webhook-signing',\n        detail: {\n          header,\n          payload,\n        },\n      });\n    }\n\n    const timestampAge = Math.floor(Date.now() / 1000) - details.timestamp;\n\n    if (tolerance > 0 && timestampAge > tolerance) {\n      throw new StripeSignatureVerificationError({\n        message: 'Timestamp outside the tolerance zone',\n        detail: {\n          header,\n          payload,\n        },\n      });\n    }\n\n    return true;\n  },\n};\n\nfunction parseHeader(header, scheme) {\n  if (typeof header !== 'string') {\n    return null;\n  }\n\n  return header.split(',').reduce(\n    (accum, item) => {\n      const kv = item.split('=');\n\n      if (kv[0] === 't') {\n        accum.timestamp = kv[1];\n      }\n\n      if (kv[0] === scheme) {\n        accum.signatures.push(kv[1]);\n      }\n\n      return accum;\n    },\n    {\n      timestamp: -1,\n      signatures: [],\n    }\n  );\n}\n\nWebhook.signature = signature;\n\nmodule.exports = Webhook;\n"]},"metadata":{},"sourceType":"script"}