{"ast":null,"code":"import { __rest } from '../../_virtual/_tslib.js';\nimport React, { createContext, useMemo, useContext } from 'react';\nimport { classNames } from '../../libs/class-names.js';\nimport { useTheme } from '../theme/use-theme.js';\nimport { forwardRefWrapper } from '../../libs/forward-ref-wrapper.js';\nimport modules_d3c672d4 from './icon-base.less.js';\nconst defaultIconColorContext = {\n  colorA: 'var(--mg__Icon_colorA)',\n  colorB: 'var(--mg__Icon_colorB)',\n  opacityA: 1,\n  opacityB: 1\n};\nconst IconColorContext = /* @__PURE__ */createContext(defaultIconColorContext);\n/**\r\n * Creates a React context that overrides the fallback\r\n * color properties of icons rendered within.\r\n */\n\nconst IconColorProvider = props => {\n  const {\n    children\n  } = props,\n        otherProps = __rest(props, [\"children\"]);\n\n  return React.createElement(IconColorContext.Provider, {\n    value: Object.assign(Object.assign({}, defaultIconColorContext), otherProps)\n  }, children);\n};\n\nconst Icon = /* @__PURE__ */forwardRefWrapper('Icon', {\n  inline: true\n}, (props, externalRef) => {\n  var _a, _b;\n\n  const {\n    type,\n    color,\n    opacity,\n    size,\n    disabled,\n    inline,\n    className\n  } = props,\n        otherProps = __rest(props, [\"type\", \"color\", \"opacity\", \"size\", \"disabled\", \"inline\", \"className\"]);\n\n  const theme = useTheme();\n  const [viewboxX, viewboxY, viewboxWidth, viewboxHeight] = type.viewbox;\n  const propWidth = typeof size === 'number' ? size : size === null || size === void 0 ? void 0 : size.width;\n  const propHeight = typeof size === 'number' ? size : size === null || size === void 0 ? void 0 : size.height;\n  const {\n    width,\n    height\n  } = useAspectRatio(type.viewbox, propWidth, propHeight); // --- Color/opacity values\n\n  const currentColor = (_a = color !== null && color !== void 0 ? color : useDefaultValue(theme, type.color)) !== null && _a !== void 0 ? _a : useContext(IconColorContext).colorA;\n  const currentOpacity = (_b = opacity !== null && opacity !== void 0 ? opacity : useDefaultValue(theme, type.opacity)) !== null && _b !== void 0 ? _b : useContext(IconColorContext).opacityA;\n  return React.createElement(\"span\", Object.assign({\n    className: classNames([modules_d3c672d4.IconBase, inline && modules_d3c672d4.inline, className]),\n    \"aria-hidden\": \"true\"\n  }, otherProps, {\n    ref: externalRef\n  }), React.createElement(\"svg\", {\n    width: typeof size === 'number' ? size : width,\n    height: typeof size === 'number' ? size : height,\n    viewBox: `${viewboxX} ${viewboxY} ${viewboxWidth} ${viewboxHeight}`,\n    fill: \"none\",\n    stroke: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, React.createElement(type.SVGContents, {\n    fill: useSVGProps('fill', currentColor, currentOpacity),\n    stroke: useSVGProps('stroke', currentColor, currentOpacity),\n    theme: theme\n  })));\n});\nconst DuotoneIcon = /* @__PURE__ */forwardRefWrapper('DuotoneIcon', {\n  inline: true\n}, (props, externalRef) => {\n  var _a, _b, _c, _d;\n\n  const {\n    type,\n    colorA,\n    colorB,\n    opacityA,\n    opacityB,\n    size,\n    disabled,\n    inline,\n    className\n  } = props,\n        otherProps = __rest(props, [\"type\", \"colorA\", \"colorB\", \"opacityA\", \"opacityB\", \"size\", \"disabled\", \"inline\", \"className\"]);\n\n  const theme = useTheme();\n  const [viewboxX, viewboxY, viewboxWidth, viewboxHeight] = type.viewbox;\n  const propWidth = typeof size === 'number' ? size : size === null || size === void 0 ? void 0 : size.width;\n  const propHeight = typeof size === 'number' ? size : size === null || size === void 0 ? void 0 : size.height;\n  const {\n    width,\n    height\n  } = useAspectRatio(type.viewbox, propWidth, propHeight); // --- \"A\" color/opacity values\n\n  const currentColorA = (_a = colorA !== null && colorA !== void 0 ? colorA : useDefaultValue(theme, type.colorA)) !== null && _a !== void 0 ? _a : useContext(IconColorContext).colorA;\n  const currentOpacityA = (_b = opacityA !== null && opacityA !== void 0 ? opacityA : useDefaultValue(theme, type.opacityA)) !== null && _b !== void 0 ? _b : useContext(IconColorContext).opacityA; // --- \"B\" color/opacity values\n\n  const currentColorB = (_c = colorB !== null && colorB !== void 0 ? colorB : useDefaultValue(theme, type.colorB)) !== null && _c !== void 0 ? _c : useContext(IconColorContext).colorB;\n  const currentOpacityB = (_d = opacityB !== null && opacityB !== void 0 ? opacityB : useDefaultValue(theme, type.opacityB)) !== null && _d !== void 0 ? _d : useContext(IconColorContext).opacityB;\n  return React.createElement(\"span\", Object.assign({\n    className: classNames([modules_d3c672d4.IconBase, inline && modules_d3c672d4.inline, className]),\n    \"aria-hidden\": \"true\"\n  }, otherProps, {\n    ref: externalRef\n  }), React.createElement(\"svg\", {\n    width: typeof size === 'number' ? size : width,\n    height: typeof size === 'number' ? size : height,\n    viewBox: `${viewboxX} ${viewboxY} ${viewboxWidth} ${viewboxHeight}`,\n    fill: \"none\",\n    stroke: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, React.createElement(type.SVGContents, {\n    fillA: useSVGProps('fill', currentColorA, currentOpacityA),\n    fillB: useSVGProps('fill', currentColorB, currentOpacityB),\n    strokeA: useSVGProps('stroke', currentColorA, currentOpacityA),\n    strokeB: useSVGProps('stroke', currentColorB, currentOpacityB),\n    theme: theme\n  })));\n}); // --- Utilities ------------------------------------------------------------ //\n\n/**\r\n * Returns a memoized value representing\r\n * the default icon color or opacity.\r\n */\n\nfunction useDefaultValue(theme, resolver) {\n  return useMemo(() => typeof resolver === 'function' ? resolver(theme) : resolver, [theme === null || theme === void 0 ? void 0 : theme.key]);\n}\n\nfunction useSVGProps(property, color, opacity) {\n  return useMemo(() => ({\n    [property]: color,\n    [`${property}Opacity`]: opacity\n  }), [color, opacity]);\n}\n/**\r\n * From the given `viewbox`, calculates a\r\n * width and height value that respects the\r\n * icon's aspect ratio.\r\n */\n\n\nfunction useAspectRatio(viewbox, propWidth, propHeight) {\n  const viewboxWidth = viewbox[2];\n  const viewboxHeight = viewbox[3];\n  let width = Math.ceil(propWidth !== null && propWidth !== void 0 ? propWidth : viewboxWidth);\n  let height = Math.ceil(propHeight !== null && propHeight !== void 0 ? propHeight : viewboxHeight);\n  const aspectRatio = viewboxWidth / viewboxHeight;\n  if (!!propWidth && !propHeight) height = Math.ceil(width / aspectRatio);\n  if (!!propHeight && !propWidth) width = Math.ceil(height * aspectRatio);\n  return {\n    width,\n    height\n  };\n}\n\nexport { DuotoneIcon, Icon, IconColorProvider };","map":{"version":3,"sources":["../../../../src/components/icons/icon-base.tsx"],"names":["styles"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useMemo } from 'react';\nimport { Theme } from '../../libs/theme';\nimport { useTheme } from '../theme/use-theme';\nimport { classNames } from '../../libs/class-names';\nimport { forwardRefWrapper } from '../../libs/forward-ref-wrapper';\n\nimport styles from './icon-base.less';\n\n// --- Shared icon context -------------------------------------------------- //\n\ninterface IconColorContext {\n  colorA: string;\n  colorB: string;\n  opacityA: number;\n  opacityB: number;\n}\n\nconst defaultIconColorContext: IconColorContext = {\n  colorA: 'var(--mg__Icon_colorA)',\n  colorB: 'var(--mg__Icon_colorB)',\n  opacityA: 1,\n  opacityB: 1,\n};\n\nconst IconColorContext = /* @__PURE__ */ createContext<IconColorContext>(defaultIconColorContext);\n\n/**\n * Creates a React context that overrides the fallback\n * color properties of icons rendered within.\n */\nexport const IconColorProvider: React.FC<Partial<IconColorContext>> = (props) => {\n  const { children, ...otherProps } = props;\n\n  return (\n    <IconColorContext.Provider value={{ ...defaultIconColorContext, ...otherProps }}>\n      {children}\n    </IconColorContext.Provider>\n  );\n};\n\n// --- Monochrome Icons ----------------------------------------------------- //\n\ntype MonochromeSVGContents = React.FC<{\n  fill: { fill: string; fillOpacity: number };\n  stroke: { stroke: string; strokeOpacity: number };\n  theme: Theme;\n}>;\n\nexport interface MonochromeIconDefinition {\n  SVGContents: MonochromeSVGContents;\n  viewbox: [number, number, number, number];\n  color?: string | ((theme: Theme) => string);\n  opacity?: number | ((theme: Theme) => number);\n}\n\ninterface MonochromeColor {\n  color?: string;\n  opacity?: number;\n}\n\ninterface MonochromeIconBaseProps extends MonochromeColor, React.HTMLAttributes<HTMLSpanElement> {\n  type: MonochromeIconDefinition;\n  size?: number | { width?: number; height?: number };\n  disabled?: boolean;\n  inline?: boolean;\n}\n\nexport const Icon = /* @__PURE__ */ forwardRefWrapper<HTMLSpanElement, MonochromeIconBaseProps>(\n  'Icon',\n\n  { inline: true },\n\n  (props, externalRef) => {\n    const { type, color, opacity, size, disabled, inline, className, ...otherProps } = props;\n\n    const theme = useTheme();\n\n    const [viewboxX, viewboxY, viewboxWidth, viewboxHeight] = type.viewbox;\n    const propWidth = typeof size === 'number' ? size : size?.width;\n    const propHeight = typeof size === 'number' ? size : size?.height;\n    const { width, height } = useAspectRatio(type.viewbox, propWidth, propHeight);\n\n    // --- Color/opacity values\n\n    const currentColor = color ?? useDefaultValue(theme, type.color) ?? useContext(IconColorContext).colorA;\n    const currentOpacity = opacity ?? useDefaultValue(theme, type.opacity) ?? useContext(IconColorContext).opacityA;\n\n    return (\n      <span\n        className={classNames([styles.IconBase, inline && styles.inline, className])}\n        aria-hidden=\"true\"\n        {...otherProps}\n        ref={externalRef}\n      >\n        <svg\n          width={typeof size === 'number' ? size : width}\n          height={typeof size === 'number' ? size : height}\n          viewBox={`${viewboxX} ${viewboxY} ${viewboxWidth} ${viewboxHeight}`}\n          fill=\"none\"\n          stroke=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <type.SVGContents\n            fill={useSVGProps('fill', currentColor, currentOpacity)}\n            stroke={useSVGProps('stroke', currentColor, currentOpacity)}\n            theme={theme}\n          />\n        </svg>\n      </span>\n    );\n  },\n);\n\n// --- Duotone Icons -------------------------------------------------------- //\n\ntype DuotoneSVGContents = React.FC<{\n  fillA: { fill: string; fillOpacity: number };\n  fillB: { fill: string; fillOpacity: number };\n  strokeA: { stroke: string; strokeOpacity: number };\n  strokeB: { stroke: string; strokeOpacity: number };\n  theme: Theme;\n}>;\n\nexport interface DuotoneIconDefinition {\n  SVGContents: DuotoneSVGContents;\n  viewbox: [number, number, number, number];\n  colorA?: string | ((theme: Theme) => string);\n  colorB?: string | ((theme: Theme) => string);\n  opacityA?: number | ((theme: Theme) => number);\n  opacityB?: number | ((theme: Theme) => number);\n}\n\ninterface DuotoneColor {\n  colorA?: string;\n  colorB?: string;\n  opacityA?: number;\n  opacityB?: number;\n}\n\ninterface DuotoneIconBaseProps extends DuotoneColor, React.HTMLAttributes<HTMLSpanElement> {\n  type: DuotoneIconDefinition;\n  size?: number | { width?: number; height?: number };\n  disabled?: boolean;\n  inline?: boolean;\n}\n\nexport const DuotoneIcon = /* @__PURE__ */ forwardRefWrapper<HTMLSpanElement, DuotoneIconBaseProps>(\n  'DuotoneIcon',\n\n  { inline: true },\n\n  (props, externalRef) => {\n    const { type, colorA, colorB, opacityA, opacityB, size, disabled, inline, className, ...otherProps } = props;\n\n    const theme = useTheme();\n\n    const [viewboxX, viewboxY, viewboxWidth, viewboxHeight] = type.viewbox;\n    const propWidth = typeof size === 'number' ? size : size?.width;\n    const propHeight = typeof size === 'number' ? size : size?.height;\n    const { width, height } = useAspectRatio(type.viewbox, propWidth, propHeight);\n\n    // --- \"A\" color/opacity values\n\n    const currentColorA = colorA ?? useDefaultValue(theme, type.colorA) ?? useContext(IconColorContext).colorA;\n    const currentOpacityA = opacityA ?? useDefaultValue(theme, type.opacityA) ?? useContext(IconColorContext).opacityA;\n\n    // --- \"B\" color/opacity values\n\n    const currentColorB = colorB ?? useDefaultValue(theme, type.colorB) ?? useContext(IconColorContext).colorB;\n    const currentOpacityB = opacityB ?? useDefaultValue(theme, type.opacityB) ?? useContext(IconColorContext).opacityB;\n\n    return (\n      <span\n        className={classNames([styles.IconBase, inline && styles.inline, className])}\n        aria-hidden=\"true\"\n        {...otherProps}\n        ref={externalRef}\n      >\n        <svg\n          width={typeof size === 'number' ? size : width}\n          height={typeof size === 'number' ? size : height}\n          viewBox={`${viewboxX} ${viewboxY} ${viewboxWidth} ${viewboxHeight}`}\n          fill=\"none\"\n          stroke=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <type.SVGContents\n            fillA={useSVGProps('fill', currentColorA, currentOpacityA)}\n            fillB={useSVGProps('fill', currentColorB, currentOpacityB)}\n            strokeA={useSVGProps('stroke', currentColorA, currentOpacityA)}\n            strokeB={useSVGProps('stroke', currentColorB, currentOpacityB)}\n            theme={theme}\n          />\n        </svg>\n      </span>\n    );\n  },\n);\n\n// --- Utilities ------------------------------------------------------------ //\n\n/**\n * Returns a memoized value representing\n * the default icon color or opacity.\n */\nfunction useDefaultValue<T>(theme: Theme | null, resolver: T | ((theme: Theme) => T)): T {\n  return useMemo(() => (typeof resolver === 'function' ? (resolver as any)(theme) : resolver), [theme?.key]);\n}\n\n/**\n * Returns memoized SVG props for `stroke` or `fill` properties.\n */\nfunction useSVGProps(property: 'fill', color: string, opacity: number): { fill: string; fillOpacity: number };\nfunction useSVGProps(property: 'stroke', color: string, opacity: number): { stroke: string; strokeOpacity: number };\nfunction useSVGProps(property: 'stroke' | 'fill', color: string, opacity: number): any {\n  return useMemo<any>(() => ({ [property]: color, [`${property}Opacity`]: opacity }), [color, opacity]);\n}\n\n/**\n * From the given `viewbox`, calculates a\n * width and height value that respects the\n * icon's aspect ratio.\n */\nfunction useAspectRatio(viewbox: [number, number, number, number], propWidth?: number, propHeight?: number) {\n  const viewboxWidth = viewbox[2];\n  const viewboxHeight = viewbox[3];\n\n  let width = Math.ceil(propWidth ?? viewboxWidth);\n  let height = Math.ceil(propHeight ?? viewboxHeight);\n  const aspectRatio = viewboxWidth / viewboxHeight;\n\n  if (!!propWidth && !propHeight) height = Math.ceil(width / aspectRatio);\n  if (!!propHeight && !propWidth) width = Math.ceil(height * aspectRatio);\n\n  return { width, height };\n}\n"]},"metadata":{},"sourceType":"module"}