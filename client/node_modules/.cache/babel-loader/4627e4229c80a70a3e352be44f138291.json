{"ast":null,"code":"import { __rest } from '../../_virtual/_tslib.js';\nimport React, { useState, useRef, useCallback, useEffect } from 'react';\nimport { useFocusVisible, useFocusWithin, useHover } from '@react-aria/interactions';\nimport { mergeProps } from '../../libs/merge-props.js';\nimport { useClickOutside } from 'usable-react';\nimport { useSSR } from '../ssr-provider.js';\nimport { Tooltip } from './tooltip/tooltip.js';\n/**\r\n * A high-level tooltip component. Under the hood, this component wires up the\r\n * supplied `anchor` with mouse/touch events to show or hide the tooltip.\r\n */\n\nconst AnchoredTooltip = props => {\n  const {\n    toggle,\n    initialToggleValue,\n    anchor: tooltipAnchor,\n    delay\n  } = props,\n        otherProps = __rest(props, [\"toggle\", \"initialToggleValue\", \"anchor\", \"delay\"]);\n\n  const [focusWithin, setFocusWithinState] = useState(false);\n  const [hover, setHoverState] = useState(false);\n  const [showTooltip, setShowTooltip] = useState(toggle ? initialToggleValue : false);\n  const anchorRef = useRef(null);\n  const tooltipRef = useRef(null);\n  const {\n    isServer\n  } = useSSR();\n\n  if (!isServer) {\n    useClickOutside([tooltipRef.current, anchorRef.current], () => setShowTooltip(false), []);\n  }\n\n  const {\n    isFocusVisible\n  } = useFocusVisible();\n  const {\n    focusWithinProps\n  } = useFocusWithin({\n    onFocusWithinChange: useCallback(isFocused => setFocusWithinState(isFocused && isFocusVisible), [isFocusVisible])\n  });\n  const {\n    hoverProps\n  } = useHover({\n    onHoverChange: useCallback(isHovered => setHoverState(isHovered), [])\n  });\n  useEffect(() => {\n    setShowTooltip(focusWithin || hover);\n  }, [focusWithin, hover]);\n  const anchor = React.createElement(\"div\", Object.assign({}, mergeProps(hoverProps, focusWithinProps), {\n    ref: anchorRef\n  }), tooltipAnchor);\n  return React.createElement(Tooltip, Object.assign({\n    in: showTooltip,\n    anchor: anchor,\n    delay: toggle ? 0 : delay\n  }, otherProps, {\n    ref: tooltipRef\n  }));\n};\n\nexport { AnchoredTooltip };","map":{"version":3,"sources":["../../../../src/components/feedback/anchored-tooltip.tsx"],"names":[],"mappings":";;;;;;;AAYA;;;;;MAIa,eAAe,GAAoC,KAAD,IAAM;AACnE,QAAM;AAAE,IAAA,MAAF;AAAU,IAAA,kBAAV;AAA8B,IAAA,MAAM,EAAE,aAAtC;AAAqD,IAAA;AAArD,MAA8E,KAApF;AAAA,QAAqE,UAAU,GAAA,MAAA,CAAK,KAAL,EAAzE,CAAA,QAAA,EAAA,oBAAA,EAAA,QAAA,EAAA,OAAA,CAAyE,CAA/E;;AAEA,QAAM,CAAC,WAAD,EAAc,mBAAd,IAAqC,QAAQ,CAAC,KAAD,CAAnD;AACA,QAAM,CAAC,KAAD,EAAQ,aAAR,IAAyB,QAAQ,CAAC,KAAD,CAAvC;AACA,QAAM,CAAC,WAAD,EAAc,cAAd,IAAgC,QAAQ,CAAC,MAAM,GAAG,kBAAH,GAAwB,KAA/B,CAA9C;AACA,QAAM,SAAS,GAAG,MAAM,CAAwB,IAAxB,CAAxB;AACA,QAAM,UAAU,GAAG,MAAM,CAAwB,IAAxB,CAAzB;AACA,QAAM;AAAE,IAAA;AAAF,MAAe,MAAM,EAA3B;;AAEA,MAAI,CAAC,QAAL,EAAe;AACb,IAAA,eAAe,CAAC,CAAC,UAAU,CAAC,OAAZ,EAAqB,SAAS,CAAC,OAA/B,CAAD,EAA0C,MAAM,cAAc,CAAC,KAAD,CAA9D,EAAuE,EAAvE,CAAf;AACD;;AAED,QAAM;AAAE,IAAA;AAAF,MAAqB,eAAe,EAA1C;AAEA,QAAM;AAAE,IAAA;AAAF,MAAuB,cAAc,CAAC;AAC1C,IAAA,mBAAmB,EAAE,WAAW,CAAE,SAAD,IAAe,mBAAmB,CAAC,SAAS,IAAI,cAAd,CAAnC,EAAkE,CAAC,cAAD,CAAlE;AADU,GAAD,CAA3C;AAIA,QAAM;AAAE,IAAA;AAAF,MAAiB,QAAQ,CAAC;AAC9B,IAAA,aAAa,EAAE,WAAW,CAAE,SAAD,IAAe,aAAa,CAAC,SAAD,CAA7B,EAA0C,EAA1C;AADI,GAAD,CAA/B;AAIA,EAAA,SAAS,CAAC,MAAA;AACR,IAAA,cAAc,CAAC,WAAW,IAAI,KAAhB,CAAd;AACD,GAFQ,EAEN,CAAC,WAAD,EAAc,KAAd,CAFM,CAAT;AAIA,QAAM,MAAM,GACV,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAS,UAAU,CAAC,UAAD,EAAa,gBAAb,CAAnB,EAAiD;AAAE,IAAA,GAAG,EAAE;AAAP,GAAjD,CAAA,EACG,aADH,CADF;AAMA,SAAO,KAAA,CAAA,aAAA,CAAC,OAAD,EAAQ,MAAA,CAAA,MAAA,CAAA;AAAC,IAAA,EAAE,EAAE,WAAL;AAAkB,IAAA,MAAM,EAAE,MAA1B;AAAkC,IAAA,KAAK,EAAE,MAAM,GAAG,CAAH,GAAO;AAAtD,GAAA,EAAiE,UAAjE,EAA2E;AAAE,IAAA,GAAG,EAAE;AAAP,GAA3E,CAAR,CAAP;AACF,C","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { useClickOutside } from 'usable-react';\nimport { useFocusWithin, useHover, useFocusVisible } from '@react-aria/interactions';\nimport { Tooltip } from './tooltip/tooltip';\nimport { mergeProps } from '../../libs/merge-props';\nimport { useSSR } from '../ssr-provider';\n\ninterface AnchoredTooltipProps extends Omit<React.ComponentProps<typeof Tooltip>, 'in'> {\n  toggle?: boolean;\n  initialToggleValue?: boolean;\n}\n\n/**\n * A high-level tooltip component. Under the hood, this component wires up the\n * supplied `anchor` with mouse/touch events to show or hide the tooltip.\n */\nexport const AnchoredTooltip: React.FC<AnchoredTooltipProps> = (props) => {\n  const { toggle, initialToggleValue, anchor: tooltipAnchor, delay, ...otherProps } = props;\n\n  const [focusWithin, setFocusWithinState] = useState(false);\n  const [hover, setHoverState] = useState(false);\n  const [showTooltip, setShowTooltip] = useState(toggle ? initialToggleValue : false);\n  const anchorRef = useRef<HTMLDivElement | null>(null);\n  const tooltipRef = useRef<HTMLDivElement | null>(null);\n  const { isServer } = useSSR();\n\n  if (!isServer) {\n    useClickOutside([tooltipRef.current, anchorRef.current], () => setShowTooltip(false), []);\n  }\n\n  const { isFocusVisible } = useFocusVisible();\n\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: useCallback((isFocused) => setFocusWithinState(isFocused && isFocusVisible), [isFocusVisible]),\n  });\n\n  const { hoverProps } = useHover({\n    onHoverChange: useCallback((isHovered) => setHoverState(isHovered), []),\n  });\n\n  useEffect(() => {\n    setShowTooltip(focusWithin || hover);\n  }, [focusWithin, hover]);\n\n  const anchor = (\n    <div {...mergeProps(hoverProps, focusWithinProps)} ref={anchorRef}>\n      {tooltipAnchor}\n    </div>\n  );\n\n  return <Tooltip in={showTooltip} anchor={anchor} delay={toggle ? 0 : delay} {...otherProps} ref={tooltipRef} />;\n};\n"]},"metadata":{},"sourceType":"module"}