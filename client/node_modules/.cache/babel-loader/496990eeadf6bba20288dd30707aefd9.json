{"ast":null,"code":"import React, { useContext, useMemo } from 'react';\nimport { classNames } from '../../libs/class-names.js';\nimport { DEFAULT_THEME } from '../../libs/theme/default-theme.js';\nimport { getThemeVariables } from '../../libs/theme/theme-variables.js';\nimport { ThemeContext } from './use-theme.js';\nimport { MediaProvider } from './media-provider.js';\nimport { useIsomorphicLayoutEffect } from '../../hooks/use-isomorphic-layout-effect.js';\n\nconst ThemeProvider = props => {\n  const {\n    theme = DEFAULT_THEME,\n    children\n  } = props;\n  const isRoot = !!useContext(ThemeContext).theme;\n  const {\n    variables,\n    applyToDocument\n  } = getThemeVariables(theme);\n  useIsomorphicLayoutEffect(() => {\n    if (isRoot) applyToDocument();\n  }, [theme.key, isRoot]);\n  const themeVariablesMemoized = useMemo(() => variables, [theme.key]);\n  const themeMetadata = classNames([theme.isDarkTheme ? 'dark' : 'light', theme.isLowContrast && 'lowContrast']);\n  const themeCtx = useMemo(() => ({\n    theme\n  }), [theme.key]);\n  /*\r\n       NOTES\r\n    ~~~~~\r\n       We look for the following potential values in the `data-mg-theme` attribute:\r\n         - `light` | `dark`\r\n      - `lowContrast`\r\n       Our LESS mixins (`#mg.darkTheme`, `#mg.lightTheme`, and `#mg.lowContrast`)\r\n    leverage these values to apply theme-specific styles. Because the attribute\r\n    can be checked in any order, any of the following formats are considered\r\n    valid:\r\n         - `[data-mg-theme~='light'] [data-mg-theme~='lowContrast'] ...`\r\n      - `[data-mg-theme~='lowContrast'] [data-mg-theme~='light'] ...`\r\n       To get this flexibility, we have to nest the `data-mg-theme` attribute\r\n    at least twice!\r\n      */\n\n  const attributes = {\n    'data-mg-theme': themeMetadata\n  };\n  return React.createElement(ThemeContext.Provider, {\n    value: themeCtx\n  }, React.createElement(MediaProvider, null, React.createElement(\"div\", Object.assign({}, attributes), React.createElement(\"div\", Object.assign({}, attributes, {\n    style: themeVariablesMemoized\n  }), children))));\n};\n\nThemeProvider.defaultProps = {};\nThemeProvider.displayName = 'ThemeProvider';\nexport { ThemeProvider };","map":{"version":3,"sources":["../../../../src/components/theme/theme-provider.tsx"],"names":[],"mappings":";;;;;;;;MAaa,aAAa,GAAkC,KAAD,IAAM;AAC/D,QAAM;AAAE,IAAA,KAAK,GAAG,aAAV;AAAyB,IAAA;AAAzB,MAAsC,KAA5C;AAEA,QAAM,MAAM,GAAG,CAAC,CAAC,UAAU,CAAC,YAAD,CAAV,CAAyB,KAA1C;AACA,QAAM;AAAE,IAAA,SAAF;AAAa,IAAA;AAAb,MAAiC,iBAAiB,CAAC,KAAD,CAAxD;AAEA,EAAA,yBAAyB,CAAC,MAAA;AACxB,QAAI,MAAJ,EAAY,eAAe;AAC5B,GAFwB,EAEtB,CAAC,KAAK,CAAC,GAAP,EAAY,MAAZ,CAFsB,CAAzB;AAIA,QAAM,sBAAsB,GAAG,OAAO,CAAC,MAAM,SAAP,EAAkB,CAAC,KAAK,CAAC,GAAP,CAAlB,CAAtC;AACA,QAAM,aAAa,GAAG,UAAU,CAAC,CAAC,KAAK,CAAC,WAAN,GAAoB,MAApB,GAA6B,OAA9B,EAAuC,KAAK,CAAC,aAAN,IAAuB,aAA9D,CAAD,CAAhC;AACA,QAAM,QAAQ,GAAiB,OAAO,CAAC,OAAO;AAAE,IAAA;AAAF,GAAP,CAAD,EAAoB,CAAC,KAAK,CAAC,GAAP,CAApB,CAAtC;;;;;;;;;;;;;;;;;AAyBA,QAAM,UAAU,GAAG;AACjB,qBAAiB;AADA,GAAnB;AAIA,SACE,KAAA,CAAA,aAAA,CAAC,YAAY,CAAC,QAAd,EAAsB;AAAC,IAAA,KAAK,EAAE;AAAR,GAAtB,EACE,KAAA,CAAA,aAAA,CAAC,aAAD,EAAc,IAAd,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAS,UAAT,CAAA,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAS,UAAT,EAAmB;AAAE,IAAA,KAAK,EAAE;AAAT,GAAnB,CAAA,EACG,QADH,CADF,CADF,CADF,CADF;AAWF,C;;AAEA,aAAa,CAAC,YAAd,GAA6B,EAA7B;AAEA,aAAa,CAAC,WAAd,GAA4B,eAA5B","sourcesContent":["import React, { useContext, useMemo } from 'react';\nimport { Theme } from '../../libs/theme/theme-types';\nimport { getThemeVariables } from '../../libs/theme/theme-variables';\nimport { DEFAULT_THEME } from '../../libs/theme/default-theme';\nimport { classNames } from '../../libs/class-names';\nimport { ThemeContext } from './use-theme';\nimport { MediaProvider } from './media-provider';\nimport { useIsomorphicLayoutEffect } from '../../hooks/use-isomorphic-layout-effect';\n\ninterface ThemeProviderProps {\n  theme?: Theme;\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = (props) => {\n  const { theme = DEFAULT_THEME, children } = props;\n\n  const isRoot = !!useContext(ThemeContext).theme;\n  const { variables, applyToDocument } = getThemeVariables(theme);\n\n  useIsomorphicLayoutEffect(() => {\n    if (isRoot) applyToDocument();\n  }, [theme.key, isRoot]);\n\n  const themeVariablesMemoized = useMemo(() => variables, [theme.key]);\n  const themeMetadata = classNames([theme.isDarkTheme ? 'dark' : 'light', theme.isLowContrast && 'lowContrast']);\n  const themeCtx: ThemeContext = useMemo(() => ({ theme }), [theme.key]);\n\n  /*\n\n    NOTES\n    ~~~~~\n\n    We look for the following potential values in the `data-mg-theme` attribute:\n\n      - `light` | `dark`\n      - `lowContrast`\n\n    Our LESS mixins (`#mg.darkTheme`, `#mg.lightTheme`, and `#mg.lowContrast`)\n    leverage these values to apply theme-specific styles. Because the attribute\n    can be checked in any order, any of the following formats are considered\n    valid:\n\n      - `[data-mg-theme~='light'] [data-mg-theme~='lowContrast'] ...`\n      - `[data-mg-theme~='lowContrast'] [data-mg-theme~='light'] ...`\n\n    To get this flexibility, we have to nest the `data-mg-theme` attribute\n    at least twice!\n\n   */\n\n  const attributes = {\n    'data-mg-theme': themeMetadata,\n  };\n\n  return (\n    <ThemeContext.Provider value={themeCtx}>\n      <MediaProvider>\n        <div {...attributes}>\n          <div {...attributes} style={themeVariablesMemoized as any}>\n            {children}\n          </div>\n        </div>\n      </MediaProvider>\n    </ThemeContext.Provider>\n  );\n};\n\nThemeProvider.defaultProps = {};\n\nThemeProvider.displayName = 'ThemeProvider';\n"]},"metadata":{},"sourceType":"module"}