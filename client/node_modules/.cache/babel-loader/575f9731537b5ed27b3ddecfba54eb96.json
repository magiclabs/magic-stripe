{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { RPCErrorCode, SDKErrorCode, SDKWarningCode } from '@magic-sdk/types';\nimport { isJsonRpcErrorCode } from '../util/type-guards';\nimport { SDKEnvironment } from './sdk-environment'; // --- Error/warning classes\n\n/**\n * This error type represents internal SDK errors. This could be developer\n * mistakes (or Magic's mistakes), or execution errors unrelated to standard\n * JavaScript exceptions.\n */\n\nvar MagicSDKError =\n/** @class */\nfunction (_super) {\n  __extends(MagicSDKError, _super);\n\n  function MagicSDKError(code, rawMessage) {\n    var _this = _super.call(this, \"Magic SDK Error: [\" + code + \"] \" + rawMessage) || this;\n\n    _this.code = code;\n    _this.rawMessage = rawMessage;\n    _this.__proto__ = Error;\n    Object.setPrototypeOf(_this, MagicSDKError.prototype);\n    return _this;\n  }\n\n  return MagicSDKError;\n}(Error);\n\nexport { MagicSDKError };\n/**\n * This error type communicates exceptions that occur during execution in the\n * Magic `<iframe>` context.\n */\n\nvar MagicRPCError =\n/** @class */\nfunction (_super) {\n  __extends(MagicRPCError, _super);\n\n  function MagicRPCError(sourceError) {\n    var _this = _super.call(this) || this;\n\n    _this.__proto__ = Error;\n    var codeNormalized = Number(sourceError === null || sourceError === void 0 ? void 0 : sourceError.code);\n    _this.rawMessage = (sourceError === null || sourceError === void 0 ? void 0 : sourceError.message) || 'Internal error';\n    _this.code = isJsonRpcErrorCode(codeNormalized) ? codeNormalized : RPCErrorCode.InternalError;\n    _this.message = \"Magic RPC Error: [\" + _this.code + \"] \" + _this.rawMessage;\n    Object.setPrototypeOf(_this, MagicRPCError.prototype);\n    return _this;\n  }\n\n  return MagicRPCError;\n}(Error);\n\nexport { MagicRPCError };\n/**\n * In contrast to `SDKError` objects, this \"warning\" type communicates important\n * context that does not rise to the level of an exception. These should be\n * logged rather than thrown.\n */\n\nvar MagicSDKWarning =\n/** @class */\nfunction () {\n  function MagicSDKWarning(code, rawMessage) {\n    this.code = code;\n    this.rawMessage = rawMessage;\n    this.message = \"Magic SDK Warning: [\" + code + \"] \" + rawMessage;\n  }\n  /**\n   * Logs this warning to the console.\n   */\n\n\n  MagicSDKWarning.prototype.log = function () {\n    console.warn(this.message);\n  };\n\n  return MagicSDKWarning;\n}();\n\nexport { MagicSDKWarning };\n/**\n * This error type is reserved for communicating errors that arise during\n * execution of Magic SDK Extension methods. Compare this to the `SDKError`\n * type, specifically in context of Extensions.\n */\n\nvar MagicExtensionError =\n/** @class */\nfunction (_super) {\n  __extends(MagicExtensionError, _super);\n\n  function MagicExtensionError(ext, code, rawMessage, data) {\n    var _this = _super.call(this, \"Magic Extension Error (\" + ext.name + \"): [\" + code + \"] \" + rawMessage) || this;\n\n    _this.code = code;\n    _this.rawMessage = rawMessage;\n    _this.data = data;\n    _this.__proto__ = Error;\n    Object.setPrototypeOf(_this, MagicExtensionError.prototype);\n    return _this;\n  }\n\n  return MagicExtensionError;\n}(Error);\n\nexport { MagicExtensionError };\n/**\n * In contrast to `MagicExtensionError` objects, this \"warning\" type\n * communicates important context that does not rise to the level of an\n * exception. These should be logged rather than thrown.\n */\n\nvar MagicExtensionWarning =\n/** @class */\nfunction () {\n  function MagicExtensionWarning(ext, code, rawMessage) {\n    this.code = code;\n    this.rawMessage = rawMessage;\n    this.message = \"Magic Extension Warning (\" + ext.name + \"): [\" + code + \"] \" + rawMessage;\n  }\n  /**\n   * Logs this warning to the console.\n   */\n\n\n  MagicExtensionWarning.prototype.log = function () {\n    console.warn(this.message);\n  };\n\n  return MagicExtensionWarning;\n}();\n\nexport { MagicExtensionWarning }; // --- SDK error factories\n\nexport function createMissingApiKeyError() {\n  return new MagicSDKError(SDKErrorCode.MissingApiKey, 'Please provide an API key that you acquired from the Magic developer dashboard.');\n}\nexport function createModalNotReadyError() {\n  return new MagicSDKError(SDKErrorCode.ModalNotReady, 'Modal is not ready.');\n}\nexport function createMalformedResponseError() {\n  return new MagicSDKError(SDKErrorCode.MalformedResponse, 'Response from the Magic iframe is malformed.');\n}\nexport function createExtensionNotInitializedError(member) {\n  return new MagicSDKError(SDKErrorCode.ExtensionNotInitialized, \"Extensions must be initialized with a Magic SDK instance before `Extension.\" + member + \"` can be accessed. Do not invoke `Extension.\" + member + \"` inside an extension constructor.\");\n}\nexport function createIncompatibleExtensionsError(extensions) {\n  var msg = \"Some extensions are incompatible with `\" + SDKEnvironment.sdkName + \"@\" + SDKEnvironment.version + \"`:\";\n  extensions.filter(function (ext) {\n    return typeof ext.compat !== 'undefined' && ext.compat !== null;\n  }).forEach(function (ext) {\n    var compat = ext.compat[SDKEnvironment.sdkName];\n    /* istanbul ignore else */\n\n    if (typeof compat === 'string') {\n      msg += \"\\n  - Extension `\" + ext.name + \"` supports version(s) `\" + compat + \"`\";\n    } else if (!compat) {\n      msg += \"\\n  - Extension `\" + ext.name + \"` does not support \" + SDKEnvironment.platform + \" environments.\";\n    } // Else case is irrelevant here here\n    // (we filter out extensions with missing `compat` field)\n\n  });\n  return new MagicSDKError(SDKErrorCode.IncompatibleExtensions, msg);\n}\nexport function createInvalidArgumentError(options) {\n  /**\n   * Parses the argument index (given by `argument`) to attach the correct ordinal suffix.\n   * (i.e.: 1st, 2nd, 3rd, 4th, etc.)\n   */\n  var ordinalSuffix = function (i) {\n    var iAdjusted = i + 1; // Argument is zero-indexed.\n\n    var j = iAdjusted % 10;\n    var k = iAdjusted % 100;\n    if (j === 1 && k !== 11) return iAdjusted + \"st\";\n    if (j === 2 && k !== 12) return iAdjusted + \"nd\";\n    if (j === 3 && k !== 13) return iAdjusted + \"rd\";\n    return iAdjusted + \"th\";\n  };\n\n  return new MagicSDKError(SDKErrorCode.InvalidArgument, \"Invalid \" + ordinalSuffix(options.argument) + \" argument given to `\" + options.procedure + \"`.\\n\" + (\"  Expected: `\" + options.expected + \"`\\n\") + (\"  Received: `\" + options.received + \"`\"));\n} // --- SDK warning factories\n\nexport function createDuplicateIframeWarning() {\n  return new MagicSDKWarning(SDKWarningCode.DuplicateIframe, 'Duplicate iframes found.');\n}\nexport function createSynchronousWeb3MethodWarning() {\n  return new MagicSDKWarning(SDKWarningCode.SyncWeb3Method, 'Non-async web3 methods are deprecated in web3 > 1.0 and are not supported by the Magic web3 provider. Please use an async method instead.');\n}\nexport function createReactNativeEndpointConfigurationWarning() {\n  return new MagicSDKWarning(SDKWarningCode.ReactNativeEndpointConfiguration, \"CUSTOM DOMAINS ARE NOT SUPPORTED WHEN USING MAGIC SDK WITH REACT NATIVE! The `endpoint` parameter SHOULD NOT be provided. The Magic `<iframe>` is automatically wrapped by a WebView pointed at `\" + SDKEnvironment.defaultEndpoint + \"`. Changing this default behavior will lead to unexpected results and potentially security-threatening bugs.\");\n}\nexport function createDeprecationWarning(options) {\n  var method = options.method,\n      removalVersions = options.removalVersions,\n      useInstead = options.useInstead;\n  var removalVersion = removalVersions[SDKEnvironment.sdkName];\n  var useInsteadSuffix = useInstead ? \" Use `\" + useInstead + \"` instead.\" : '';\n  var message = \"`\" + method + \"` will be removed from `\" + SDKEnvironment.sdkName + \"` in version `\" + removalVersion + \"`.\" + useInsteadSuffix;\n  return new MagicSDKWarning(SDKWarningCode.DeprecationNotice, message);\n}","map":{"version":3,"sources":["../../../src/core/sdk-exceptions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { RPCErrorCode, SDKErrorCode, SDKWarningCode } from '@magic-sdk/types';\nimport { isJsonRpcErrorCode } from '../util/type-guards';\nimport { SDKEnvironment } from './sdk-environment';\n// --- Error/warning classes\n/**\n * This error type represents internal SDK errors. This could be developer\n * mistakes (or Magic's mistakes), or execution errors unrelated to standard\n * JavaScript exceptions.\n */\nvar MagicSDKError = /** @class */ (function (_super) {\n    __extends(MagicSDKError, _super);\n    function MagicSDKError(code, rawMessage) {\n        var _this = _super.call(this, \"Magic SDK Error: [\" + code + \"] \" + rawMessage) || this;\n        _this.code = code;\n        _this.rawMessage = rawMessage;\n        _this.__proto__ = Error;\n        Object.setPrototypeOf(_this, MagicSDKError.prototype);\n        return _this;\n    }\n    return MagicSDKError;\n}(Error));\nexport { MagicSDKError };\n/**\n * This error type communicates exceptions that occur during execution in the\n * Magic `<iframe>` context.\n */\nvar MagicRPCError = /** @class */ (function (_super) {\n    __extends(MagicRPCError, _super);\n    function MagicRPCError(sourceError) {\n        var _this = _super.call(this) || this;\n        _this.__proto__ = Error;\n        var codeNormalized = Number(sourceError === null || sourceError === void 0 ? void 0 : sourceError.code);\n        _this.rawMessage = (sourceError === null || sourceError === void 0 ? void 0 : sourceError.message) || 'Internal error';\n        _this.code = isJsonRpcErrorCode(codeNormalized) ? codeNormalized : RPCErrorCode.InternalError;\n        _this.message = \"Magic RPC Error: [\" + _this.code + \"] \" + _this.rawMessage;\n        Object.setPrototypeOf(_this, MagicRPCError.prototype);\n        return _this;\n    }\n    return MagicRPCError;\n}(Error));\nexport { MagicRPCError };\n/**\n * In contrast to `SDKError` objects, this \"warning\" type communicates important\n * context that does not rise to the level of an exception. These should be\n * logged rather than thrown.\n */\nvar MagicSDKWarning = /** @class */ (function () {\n    function MagicSDKWarning(code, rawMessage) {\n        this.code = code;\n        this.rawMessage = rawMessage;\n        this.message = \"Magic SDK Warning: [\" + code + \"] \" + rawMessage;\n    }\n    /**\n     * Logs this warning to the console.\n     */\n    MagicSDKWarning.prototype.log = function () {\n        console.warn(this.message);\n    };\n    return MagicSDKWarning;\n}());\nexport { MagicSDKWarning };\n/**\n * This error type is reserved for communicating errors that arise during\n * execution of Magic SDK Extension methods. Compare this to the `SDKError`\n * type, specifically in context of Extensions.\n */\nvar MagicExtensionError = /** @class */ (function (_super) {\n    __extends(MagicExtensionError, _super);\n    function MagicExtensionError(ext, code, rawMessage, data) {\n        var _this = _super.call(this, \"Magic Extension Error (\" + ext.name + \"): [\" + code + \"] \" + rawMessage) || this;\n        _this.code = code;\n        _this.rawMessage = rawMessage;\n        _this.data = data;\n        _this.__proto__ = Error;\n        Object.setPrototypeOf(_this, MagicExtensionError.prototype);\n        return _this;\n    }\n    return MagicExtensionError;\n}(Error));\nexport { MagicExtensionError };\n/**\n * In contrast to `MagicExtensionError` objects, this \"warning\" type\n * communicates important context that does not rise to the level of an\n * exception. These should be logged rather than thrown.\n */\nvar MagicExtensionWarning = /** @class */ (function () {\n    function MagicExtensionWarning(ext, code, rawMessage) {\n        this.code = code;\n        this.rawMessage = rawMessage;\n        this.message = \"Magic Extension Warning (\" + ext.name + \"): [\" + code + \"] \" + rawMessage;\n    }\n    /**\n     * Logs this warning to the console.\n     */\n    MagicExtensionWarning.prototype.log = function () {\n        console.warn(this.message);\n    };\n    return MagicExtensionWarning;\n}());\nexport { MagicExtensionWarning };\n// --- SDK error factories\nexport function createMissingApiKeyError() {\n    return new MagicSDKError(SDKErrorCode.MissingApiKey, 'Please provide an API key that you acquired from the Magic developer dashboard.');\n}\nexport function createModalNotReadyError() {\n    return new MagicSDKError(SDKErrorCode.ModalNotReady, 'Modal is not ready.');\n}\nexport function createMalformedResponseError() {\n    return new MagicSDKError(SDKErrorCode.MalformedResponse, 'Response from the Magic iframe is malformed.');\n}\nexport function createExtensionNotInitializedError(member) {\n    return new MagicSDKError(SDKErrorCode.ExtensionNotInitialized, \"Extensions must be initialized with a Magic SDK instance before `Extension.\" + member + \"` can be accessed. Do not invoke `Extension.\" + member + \"` inside an extension constructor.\");\n}\nexport function createIncompatibleExtensionsError(extensions) {\n    var msg = \"Some extensions are incompatible with `\" + SDKEnvironment.sdkName + \"@\" + SDKEnvironment.version + \"`:\";\n    extensions\n        .filter(function (ext) { return typeof ext.compat !== 'undefined' && ext.compat !== null; })\n        .forEach(function (ext) {\n        var compat = ext.compat[SDKEnvironment.sdkName];\n        /* istanbul ignore else */\n        if (typeof compat === 'string') {\n            msg += \"\\n  - Extension `\" + ext.name + \"` supports version(s) `\" + compat + \"`\";\n        }\n        else if (!compat) {\n            msg += \"\\n  - Extension `\" + ext.name + \"` does not support \" + SDKEnvironment.platform + \" environments.\";\n        }\n        // Else case is irrelevant here here\n        // (we filter out extensions with missing `compat` field)\n    });\n    return new MagicSDKError(SDKErrorCode.IncompatibleExtensions, msg);\n}\nexport function createInvalidArgumentError(options) {\n    /**\n     * Parses the argument index (given by `argument`) to attach the correct ordinal suffix.\n     * (i.e.: 1st, 2nd, 3rd, 4th, etc.)\n     */\n    var ordinalSuffix = function (i) {\n        var iAdjusted = i + 1; // Argument is zero-indexed.\n        var j = iAdjusted % 10;\n        var k = iAdjusted % 100;\n        if (j === 1 && k !== 11)\n            return iAdjusted + \"st\";\n        if (j === 2 && k !== 12)\n            return iAdjusted + \"nd\";\n        if (j === 3 && k !== 13)\n            return iAdjusted + \"rd\";\n        return iAdjusted + \"th\";\n    };\n    return new MagicSDKError(SDKErrorCode.InvalidArgument, \"Invalid \" + ordinalSuffix(options.argument) + \" argument given to `\" + options.procedure + \"`.\\n\" +\n        (\"  Expected: `\" + options.expected + \"`\\n\") +\n        (\"  Received: `\" + options.received + \"`\"));\n}\n// --- SDK warning factories\nexport function createDuplicateIframeWarning() {\n    return new MagicSDKWarning(SDKWarningCode.DuplicateIframe, 'Duplicate iframes found.');\n}\nexport function createSynchronousWeb3MethodWarning() {\n    return new MagicSDKWarning(SDKWarningCode.SyncWeb3Method, 'Non-async web3 methods are deprecated in web3 > 1.0 and are not supported by the Magic web3 provider. Please use an async method instead.');\n}\nexport function createReactNativeEndpointConfigurationWarning() {\n    return new MagicSDKWarning(SDKWarningCode.ReactNativeEndpointConfiguration, \"CUSTOM DOMAINS ARE NOT SUPPORTED WHEN USING MAGIC SDK WITH REACT NATIVE! The `endpoint` parameter SHOULD NOT be provided. The Magic `<iframe>` is automatically wrapped by a WebView pointed at `\" + SDKEnvironment.defaultEndpoint + \"`. Changing this default behavior will lead to unexpected results and potentially security-threatening bugs.\");\n}\nexport function createDeprecationWarning(options) {\n    var method = options.method, removalVersions = options.removalVersions, useInstead = options.useInstead;\n    var removalVersion = removalVersions[SDKEnvironment.sdkName];\n    var useInsteadSuffix = useInstead ? \" Use `\" + useInstead + \"` instead.\" : '';\n    var message = \"`\" + method + \"` will be removed from `\" + SDKEnvironment.sdkName + \"` in version `\" + removalVersion + \"`.\" + useInsteadSuffix;\n    return new MagicSDKWarning(SDKWarningCode.DeprecationNotice, message);\n}\n//# sourceMappingURL=sdk-exceptions.js.map"]},"metadata":{},"sourceType":"module"}