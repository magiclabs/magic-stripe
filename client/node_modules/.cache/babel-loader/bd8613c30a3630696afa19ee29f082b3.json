{"ast":null,"code":"// use WeakMap to store the object->key mapping\n// so the objects can be garbage collected.\n// WeakMap uses a hashtable under the hood, so the lookup\n// complexity is almost O(1).\nvar table = new WeakMap(); // counter of the key\n\nvar counter = 0; // hashes an array of objects and returns a string\n\nexport default function hash(args) {\n  if (!args.length) return '';\n  var key = 'arg';\n\n  for (var i = 0; i < args.length; ++i) {\n    if (args[i] === null) {\n      key += '@null';\n      continue;\n    }\n\n    var _hash = void 0;\n\n    if (typeof args[i] !== 'object' && typeof args[i] !== 'function') {\n      // need to consider the case that args[i] is a string:\n      // args[i]        _hash\n      // \"undefined\" -> '\"undefined\"'\n      // undefined   -> 'undefined'\n      // 123         -> '123'\n      // \"null\"      -> '\"null\"'\n      if (typeof args[i] === 'string') {\n        _hash = '\"' + args[i] + '\"';\n      } else {\n        _hash = String(args[i]);\n      }\n    } else {\n      if (!table.has(args[i])) {\n        _hash = counter;\n        table.set(args[i], counter++);\n      } else {\n        _hash = table.get(args[i]);\n      }\n    }\n\n    key += '@' + _hash;\n  }\n\n  return key;\n}","map":{"version":3,"sources":["/Users/maricrisbonzo/Desktop/magic-apps/membership-site/client/node_modules/swr/esm/libs/hash.js"],"names":["table","WeakMap","counter","hash","args","length","key","i","_hash","String","has","set","get"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,KAAK,GAAG,IAAIC,OAAJ,EAAZ,C,CACA;;AACA,IAAIC,OAAO,GAAG,CAAd,C,CACA;;AACA,eAAe,SAASC,IAAT,CAAcC,IAAd,EAAoB;AAC/B,MAAI,CAACA,IAAI,CAACC,MAAV,EACI,OAAO,EAAP;AACJ,MAAIC,GAAG,GAAG,KAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACC,MAAzB,EAAiC,EAAEE,CAAnC,EAAsC;AAClC,QAAIH,IAAI,CAACG,CAAD,CAAJ,KAAY,IAAhB,EAAsB;AAClBD,MAAAA,GAAG,IAAI,OAAP;AACA;AACH;;AACD,QAAIE,KAAK,GAAG,KAAK,CAAjB;;AACA,QAAI,OAAOJ,IAAI,CAACG,CAAD,CAAX,KAAmB,QAAnB,IAA+B,OAAOH,IAAI,CAACG,CAAD,CAAX,KAAmB,UAAtD,EAAkE;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,UAAI,OAAOH,IAAI,CAACG,CAAD,CAAX,KAAmB,QAAvB,EAAiC;AAC7BC,QAAAA,KAAK,GAAG,MAAMJ,IAAI,CAACG,CAAD,CAAV,GAAgB,GAAxB;AACH,OAFD,MAGK;AACDC,QAAAA,KAAK,GAAGC,MAAM,CAACL,IAAI,CAACG,CAAD,CAAL,CAAd;AACH;AACJ,KAbD,MAcK;AACD,UAAI,CAACP,KAAK,CAACU,GAAN,CAAUN,IAAI,CAACG,CAAD,CAAd,CAAL,EAAyB;AACrBC,QAAAA,KAAK,GAAGN,OAAR;AACAF,QAAAA,KAAK,CAACW,GAAN,CAAUP,IAAI,CAACG,CAAD,CAAd,EAAmBL,OAAO,EAA1B;AACH,OAHD,MAIK;AACDM,QAAAA,KAAK,GAAGR,KAAK,CAACY,GAAN,CAAUR,IAAI,CAACG,CAAD,CAAd,CAAR;AACH;AACJ;;AACDD,IAAAA,GAAG,IAAI,MAAME,KAAb;AACH;;AACD,SAAOF,GAAP;AACH","sourcesContent":["// use WeakMap to store the object->key mapping\n// so the objects can be garbage collected.\n// WeakMap uses a hashtable under the hood, so the lookup\n// complexity is almost O(1).\nvar table = new WeakMap();\n// counter of the key\nvar counter = 0;\n// hashes an array of objects and returns a string\nexport default function hash(args) {\n    if (!args.length)\n        return '';\n    var key = 'arg';\n    for (var i = 0; i < args.length; ++i) {\n        if (args[i] === null) {\n            key += '@null';\n            continue;\n        }\n        var _hash = void 0;\n        if (typeof args[i] !== 'object' && typeof args[i] !== 'function') {\n            // need to consider the case that args[i] is a string:\n            // args[i]        _hash\n            // \"undefined\" -> '\"undefined\"'\n            // undefined   -> 'undefined'\n            // 123         -> '123'\n            // \"null\"      -> '\"null\"'\n            if (typeof args[i] === 'string') {\n                _hash = '\"' + args[i] + '\"';\n            }\n            else {\n                _hash = String(args[i]);\n            }\n        }\n        else {\n            if (!table.has(args[i])) {\n                _hash = counter;\n                table.set(args[i], counter++);\n            }\n            else {\n                _hash = table.get(args[i]);\n            }\n        }\n        key += '@' + _hash;\n    }\n    return key;\n}\n"]},"metadata":{},"sourceType":"module"}