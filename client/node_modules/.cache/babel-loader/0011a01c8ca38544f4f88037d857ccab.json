{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { MagicPayloadMethod } from '@magic-sdk/types';\nimport { BaseModule } from './base-module';\nimport { createJsonRpcRequestPayload } from '../core/json-rpc';\nimport { SDKEnvironment } from '../core/sdk-environment';\n\nvar AuthModule =\n/** @class */\nfunction (_super) {\n  __extends(AuthModule, _super);\n\n  function AuthModule() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Initiate the \"magic link\" login flow for a user. If the flow is successful,\n   * this method will return a Decentralized ID token (with a default lifespan\n   * of 15 minutes).\n   */\n\n\n  AuthModule.prototype.loginWithMagicLink = function (configuration) {\n    var email = configuration.email,\n        _a = configuration.showUI,\n        showUI = _a === void 0 ? true : _a,\n        redirectURI = configuration.redirectURI;\n    var requestPayload = createJsonRpcRequestPayload(MagicPayloadMethod.LoginWithMagicLink, [{\n      email: email,\n      showUI: showUI,\n      redirectURI: redirectURI\n    }]);\n    return this.request(requestPayload);\n  };\n  /**\n   * Log a user in with a special one-time-use credential token. This is\n   * currently used during magic link flows with a configured redirect to\n   * hydrate the user session at the end of the flow. If the flow is successful,\n   * this method will return a Decentralized ID token (with a default lifespan\n   * of 15 minutes).\n   *\n   * If no argument is provided, a credential is automatically parsed from\n   * `window.location.search`.\n   */\n\n\n  AuthModule.prototype.loginWithCredential = function (credentialOrQueryString) {\n    var credentialResolved = credentialOrQueryString !== null && credentialOrQueryString !== void 0 ? credentialOrQueryString : '';\n\n    if (!credentialOrQueryString && SDKEnvironment.platform === 'web') {\n      credentialResolved = window.location.search; // Remove the query from the redirect callback as a precaution.\n\n      var urlWithoutQuery = window.location.origin + window.location.pathname;\n      window.history.replaceState(null, '', urlWithoutQuery);\n    }\n\n    var requestPayload = createJsonRpcRequestPayload(MagicPayloadMethod.LoginWithCredential, [credentialResolved]);\n    return this.request(requestPayload);\n  };\n\n  return AuthModule;\n}(BaseModule);\n\nexport { AuthModule };","map":{"version":3,"sources":["../../../src/modules/auth.ts"],"names":[],"mappings":";AAAA,SAAS,kBAAT,QAAoE,kBAApE;AACA,SAAS,UAAT,QAA2B,eAA3B;AACA,SAAS,2BAAT,QAA4C,kBAA5C;AACA,SAAS,cAAT,QAA+B,yBAA/B;;AAQA,IAAA,UAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAgC,EAAA,SAAA,CAAA,UAAA,EAAA,MAAA,CAAA;;AAAhC,WAAA,UAAA,GAAA;;AAuCC;AAtCC;;;;AAIG;;;AACI,EAAA,UAAA,CAAA,SAAA,CAAA,kBAAA,GAAP,UAA0B,aAA1B,EAAwE;AAC9D,QAAA,KAAA,GAAA,aAAA,CAAA,KAAA;AAAA,QAAO,EAAA,GAAA,aAAA,CAAA,MAAP;AAAA,QAAO,MAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,EAAP;AAAA,QAAsB,WAAA,GAAA,aAAA,CAAA,WAAtB;AACR,QAAM,cAAc,GAAG,2BAA2B,CAAC,kBAAkB,CAAC,kBAApB,EAAwC,CACxF;AAAE,MAAA,KAAK,EAAA,KAAP;AAAS,MAAA,MAAM,EAAA,MAAf;AAAiB,MAAA,WAAW,EAAA;AAA5B,KADwF,CAAxC,CAAlD;AAGA,WAAO,KAAK,OAAL,CAAsD,cAAtD,CAAP;AACD,GANM;AAQP;;;;;;;;;AASG;;;AACI,EAAA,UAAA,CAAA,SAAA,CAAA,mBAAA,GAAP,UAA2B,uBAA3B,EAA2D;AACzD,QAAI,kBAAkB,GAAG,uBAAuB,KAAA,IAAvB,IAAA,uBAAuB,KAAA,KAAA,CAAvB,GAAA,uBAAA,GAA2B,EAApD;;AAEA,QAAI,CAAC,uBAAD,IAA4B,cAAc,CAAC,QAAf,KAA4B,KAA5D,EAAmE;AACjE,MAAA,kBAAkB,GAAG,MAAM,CAAC,QAAP,CAAgB,MAArC,CADiE,CAGjE;;AACA,UAAM,eAAe,GAAG,MAAM,CAAC,QAAP,CAAgB,MAAhB,GAAyB,MAAM,CAAC,QAAP,CAAgB,QAAjE;AACA,MAAA,MAAM,CAAC,OAAP,CAAe,YAAf,CAA4B,IAA5B,EAAkC,EAAlC,EAAsC,eAAtC;AACD;;AAED,QAAM,cAAc,GAAG,2BAA2B,CAAC,kBAAkB,CAAC,mBAApB,EAAyC,CAAC,kBAAD,CAAzC,CAAlD;AAEA,WAAO,KAAK,OAAL,CAA4B,cAA5B,CAAP;AACD,GAdM;;AAeT,SAAA,UAAA;AAAC,CAvCD,CAAgC,UAAhC,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { MagicPayloadMethod } from '@magic-sdk/types';\nimport { BaseModule } from './base-module';\nimport { createJsonRpcRequestPayload } from '../core/json-rpc';\nimport { SDKEnvironment } from '../core/sdk-environment';\nvar AuthModule = /** @class */ (function (_super) {\n    __extends(AuthModule, _super);\n    function AuthModule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Initiate the \"magic link\" login flow for a user. If the flow is successful,\n     * this method will return a Decentralized ID token (with a default lifespan\n     * of 15 minutes).\n     */\n    AuthModule.prototype.loginWithMagicLink = function (configuration) {\n        var email = configuration.email, _a = configuration.showUI, showUI = _a === void 0 ? true : _a, redirectURI = configuration.redirectURI;\n        var requestPayload = createJsonRpcRequestPayload(MagicPayloadMethod.LoginWithMagicLink, [\n            { email: email, showUI: showUI, redirectURI: redirectURI },\n        ]);\n        return this.request(requestPayload);\n    };\n    /**\n     * Log a user in with a special one-time-use credential token. This is\n     * currently used during magic link flows with a configured redirect to\n     * hydrate the user session at the end of the flow. If the flow is successful,\n     * this method will return a Decentralized ID token (with a default lifespan\n     * of 15 minutes).\n     *\n     * If no argument is provided, a credential is automatically parsed from\n     * `window.location.search`.\n     */\n    AuthModule.prototype.loginWithCredential = function (credentialOrQueryString) {\n        var credentialResolved = credentialOrQueryString !== null && credentialOrQueryString !== void 0 ? credentialOrQueryString : '';\n        if (!credentialOrQueryString && SDKEnvironment.platform === 'web') {\n            credentialResolved = window.location.search;\n            // Remove the query from the redirect callback as a precaution.\n            var urlWithoutQuery = window.location.origin + window.location.pathname;\n            window.history.replaceState(null, '', urlWithoutQuery);\n        }\n        var requestPayload = createJsonRpcRequestPayload(MagicPayloadMethod.LoginWithCredential, [credentialResolved]);\n        return this.request(requestPayload);\n    };\n    return AuthModule;\n}(BaseModule));\nexport { AuthModule };\n//# sourceMappingURL=auth.js.map"]},"metadata":{},"sourceType":"module"}