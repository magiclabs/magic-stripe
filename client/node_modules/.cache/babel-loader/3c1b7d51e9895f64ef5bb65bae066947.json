{"ast":null,"code":"import React, { useRef, useReducer, useCallback, useMemo } from 'react';\nimport '@react-aria/interactions';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { classNames } from '../../../../libs/class-names.js';\nimport 'color';\nimport 'blueimp-md5';\nimport '@artsy/fresnel';\nimport { useTheme } from '../../../theme/use-theme.js';\nimport { Icon } from '../../../icons/icon-base.js';\nimport { Exclaim } from '../../../icons/monochrome/exclaim.js';\nimport { Info } from '../../../icons/monochrome/info.js';\nimport { SuccessFilled } from '../../../icons/monochrome/success-filled.js';\nimport { Warning } from '../../../icons/monochrome/warning.js';\nimport { FlexRow } from '../../../layout/flexbox/flexbox.js';\nimport { Inset } from '../../../layout/inset/inset.js';\nimport { useIsMounted } from 'usable-react';\nimport '@seznam/compose-react-refs';\nimport '../../../theme/inverse-theme-semantics.js';\nimport { ThemeProvider } from '../../../theme/theme-provider.js';\nimport { useSlide } from '../../../../hooks/transitions.js';\nimport { EphemeralPortal } from '../../../layout/ephemeral-portal.js';\nimport 'watch-resize';\nimport { ToastContext } from '../use-toast.js';\nimport modules_1680eb67 from './toast-provider.less.js';\nlet toastID = 0;\nconst toastIcons = {\n  success: () => SuccessFilled,\n  warning: () => Warning,\n  error: () => Exclaim,\n  info: () => Info\n};\n\nconst ToastProvider = props => {\n  const {\n    position,\n    children\n  } = props;\n  const isMounted = useIsMounted();\n  const theme = useTheme();\n  const toastsRef = useRef([]);\n  const forceUpdate = useReducer(x => x + 1, 0)[1];\n  const removeToast = useCallback(id => {\n    toastsRef.current = toastsRef.current.filter(toast => toast.id !== id);\n    forceUpdate();\n  }, []);\n  const createToast = useCallback(options => {\n    const {\n      message,\n      messageOnly,\n      type = 'info',\n      lifespan = 2000\n    } = options;\n    const id = ++toastID;\n    toastsRef.current.push({\n      message,\n      messageOnly,\n      type,\n      id\n    });\n    forceUpdate();\n    setTimeout(() => {\n      if (isMounted()) removeToast(id);\n    }, lifespan);\n    return id;\n  }, []);\n  const toastCtx = useMemo(() => ({\n    createToast,\n    removeToast\n  }), [createToast, removeToast]);\n  const getSlideProps = useSlide();\n  const toasts = (position === null || position === void 0 ? void 0 : position.startsWith('top')) ? [...toastsRef.current] : [...toastsRef.current].reverse();\n  const activeToasts = toasts.map(toast => {\n    return React.createElement(motion.div, Object.assign({\n      layout: true,\n      className: classNames([modules_1680eb67.toast, modules_1680eb67[toast.type]]),\n      \"data-mg-toast-id\": toast.id,\n      key: toast.id\n    }, getSlideProps({\n      x: 0,\n      y: (position === null || position === void 0 ? void 0 : position.startsWith('top')) ? -10 : 10\n    })), React.createElement(FlexRow, {\n      vertical: \"flex-start\"\n    }, !toast.messageOnly && React.createElement(Inset, {\n      top: 2\n    }, React.createElement(Icon, {\n      inline: false,\n      size: 20,\n      type: toastIcons[toast.type]()\n    })), React.createElement(\"div\", {\n      role: \"alert\",\n      className: modules_1680eb67.message\n    }, toast.message)));\n  });\n  return React.createElement(ToastContext.Provider, {\n    value: toastCtx\n  }, children, React.createElement(EphemeralPortal, null, React.createElement(ThemeProvider, {\n    theme: theme\n  }, React.createElement(Inset, {\n    all: 40\n  }, React.createElement(\"div\", {\n    className: modules_1680eb67.ToastNotifications\n  }, React.createElement(\"div\", {\n    className: classNames([modules_1680eb67.toastContainer, modules_1680eb67[`position_${position}`]])\n  }, React.createElement(AnimatePresence, null, activeToasts)))))));\n};\n\nToastProvider.defaultProps = {\n  position: 'top'\n};\nexport { ToastProvider };","map":{"version":3,"sources":["../../../../../../src/components/feedback/toast/toast-provider/toast-provider.tsx"],"names":["MonochromeIcons.SuccessFilled","MonochromeIcons.Warning","MonochromeIcons.Exclaim","MonochromeIcons.Info","styles"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useReducer, useRef } from 'react';\nimport { useIsMounted } from 'usable-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { ToastContext, ToastDefinition } from '../use-toast';\nimport { EphemeralPortal, Inset, FlexRow } from '../../../layout';\nimport { ThemeProvider } from '../../../theme';\nimport { useTheme } from '../../../theme/use-theme';\nimport { classNames } from '../../../../libs/class-names';\nimport { useSlide } from '../../../../hooks/transitions';\nimport { Icon, MonochromeIcons } from '../../../icons';\n\nimport styles from './toast-provider.less';\n\nlet toastID = 0;\n\nconst toastIcons = {\n  success: () => MonochromeIcons.SuccessFilled,\n  warning: () => MonochromeIcons.Warning,\n  error: () => MonochromeIcons.Exclaim,\n  info: () => MonochromeIcons.Info,\n};\n\ninterface ToastProviderProps {\n  position?: 'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end';\n}\n\nexport const ToastProvider: React.FC<ToastProviderProps> = (props) => {\n  const { position, children } = props;\n\n  const isMounted = useIsMounted();\n  const theme = useTheme();\n  const toastsRef = useRef<ToastDefinition[]>([]);\n  const forceUpdate = useReducer((x: number) => x + 1, 0)[1];\n\n  const removeToast: ToastContext['removeToast'] = useCallback((id: number) => {\n    toastsRef.current = toastsRef.current.filter((toast) => toast.id !== id);\n    forceUpdate();\n  }, []);\n\n  const createToast: ToastContext['createToast'] = useCallback((options) => {\n    const { message, messageOnly, type = 'info', lifespan = 2000 } = options;\n    const id = ++toastID;\n\n    toastsRef.current.push({ message, messageOnly, type, id });\n    forceUpdate();\n\n    setTimeout(() => {\n      if (isMounted()) removeToast(id);\n    }, lifespan);\n\n    return id;\n  }, []);\n\n  const toastCtx = useMemo(() => ({ createToast, removeToast }), [createToast, removeToast]);\n  const getSlideProps = useSlide();\n  const toasts = position?.startsWith('top') ? [...toastsRef.current] : [...toastsRef.current].reverse();\n  const activeToasts = toasts.map((toast) => {\n    return (\n      <motion.div\n        layout\n        className={classNames([styles.toast, styles[toast.type]])}\n        data-mg-toast-id={toast.id}\n        key={toast.id}\n        {...getSlideProps({ x: 0, y: position?.startsWith('top') ? -10 : 10 })}\n      >\n        <FlexRow vertical=\"flex-start\">\n          {!toast.messageOnly && (\n            <Inset top={2}>\n              <Icon inline={false} size={20} type={toastIcons[toast.type]()} />\n            </Inset>\n          )}\n\n          <div role=\"alert\" className={styles.message}>\n            {toast.message}\n          </div>\n        </FlexRow>\n      </motion.div>\n    );\n  });\n\n  return (\n    <ToastContext.Provider value={toastCtx}>\n      {children}\n\n      <EphemeralPortal>\n        <ThemeProvider theme={theme}>\n          <Inset all={40}>\n            <div className={styles.ToastNotifications}>\n              <div className={classNames([styles.toastContainer, styles[`position_${position}`]])}>\n                <AnimatePresence>{activeToasts}</AnimatePresence>\n              </div>\n            </div>\n          </Inset>\n        </ThemeProvider>\n      </EphemeralPortal>\n    </ToastContext.Provider>\n  );\n};\n\nToastProvider.defaultProps = {\n  position: 'top',\n};\n"]},"metadata":{},"sourceType":"module"}