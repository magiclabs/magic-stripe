{"ast":null,"code":"import React from 'react';\nimport { mergeProps } from '../../libs/merge-props.js';\nimport 'color';\nimport 'blueimp-md5';\nimport { getThemeVariables } from '../../libs/theme/theme-variables.js';\nimport { useTheme } from './use-theme.js';\n/**\r\n * There are some design cases where `{color}_lighter` / `{color}_darker` semantics\r\n * should be reversed. Wrapping elements with this component will inverse the\r\n * expected theme semantics to support these edge cases.\r\n *\r\n * In other words, `{color}_lighter` will become `{color}_darker` and vice versa.\r\n *\r\n * Use with care.\r\n */\n\nconst InverseThemeSemantics = props => {\n  const {\n    active,\n    children\n  } = props;\n  const theme = useTheme({\n    inverseSemantics: true\n  });\n  const {\n    variables: style\n  } = getThemeVariables(theme);\n  const wrappedChildren = React.Children.map(children, child => {\n    if (React.isValidElement(child)) {\n      return React.cloneElement(child, mergeProps(Object.assign(Object.assign({}, child.props), {\n        style\n      })));\n    }\n\n    return child;\n  });\n  return active ? React.createElement(React.Fragment, null, wrappedChildren) : React.createElement(React.Fragment, null, children);\n};\n\nInverseThemeSemantics.defaultProps = {\n  active: true\n};\nexport { InverseThemeSemantics };","map":{"version":3,"sources":["../../../../src/components/theme/inverse-theme-semantics.tsx"],"names":[],"mappings":";;;;;;AASA;;;;;;;;;;MASa,qBAAqB,GAA0C,KAAD,IAAM;AAC/E,QAAM;AAAE,IAAA,MAAF;AAAU,IAAA;AAAV,MAAuB,KAA7B;AAEA,QAAM,KAAK,GAAG,QAAQ,CAAC;AAAE,IAAA,gBAAgB,EAAE;AAApB,GAAD,CAAtB;AACA,QAAM;AAAE,IAAA,SAAS,EAAE;AAAb,MAAuB,iBAAiB,CAAC,KAAD,CAA9C;AAEA,QAAM,eAAe,GAAG,KAAK,CAAC,QAAN,CAAe,GAAf,CAAmB,QAAnB,EAA8B,KAAD,IAAM;AACzD,QAAI,KAAK,CAAC,cAAN,CAAqB,KAArB,CAAJ,EAAiC;AAC/B,aAAO,KAAK,CAAC,YAAN,CACL,KADK,EAGL,UAAU,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACL,KAAK,CAAC,KADD,CAAA,EACM;AACd,QAAA;AADc,OADN,CAAA,CAHL,CAAP;AAQD;;AAED,WAAO,KAAP;AACD,GAbuB,CAAxB;AAeA,SAAO,MAAM,GAAG,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EAAG,eAAH,CAAH,GAA4B,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EAAG,QAAH,CAAzC;AACF,C;;AAEA,qBAAqB,CAAC,YAAtB,GAAqC;AACnC,EAAA,MAAM,EAAE;AAD2B,CAArC","sourcesContent":["import React from 'react';\nimport { useTheme } from './use-theme';\nimport { mergeProps } from '../../libs/merge-props';\nimport { getThemeVariables } from '../../libs/theme';\n\ninterface InverseThemeSemanticsProps {\n  active?: boolean;\n}\n\n/**\n * There are some design cases where `{color}_lighter` / `{color}_darker` semantics\n * should be reversed. Wrapping elements with this component will inverse the\n * expected theme semantics to support these edge cases.\n *\n * In other words, `{color}_lighter` will become `{color}_darker` and vice versa.\n *\n * Use with care.\n */\nexport const InverseThemeSemantics: React.FC<InverseThemeSemanticsProps> = (props) => {\n  const { active, children } = props;\n\n  const theme = useTheme({ inverseSemantics: true });\n  const { variables: style } = getThemeVariables(theme);\n\n  const wrappedChildren = React.Children.map(children, (child) => {\n    if (React.isValidElement(child)) {\n      return React.cloneElement(\n        child,\n\n        mergeProps({\n          ...child.props,\n          style,\n        }),\n      );\n    }\n\n    return child;\n  });\n\n  return active ? <>{wrappedChildren}</> : <>{children}</>;\n};\n\nInverseThemeSemantics.defaultProps = {\n  active: true,\n};\n"]},"metadata":{},"sourceType":"module"}