import { __rest } from '../../../_virtual/_tslib.js';
import React from 'react';
import { useHover, usePress } from '@react-aria/interactions';
import { useFocusRing } from '@react-aria/focus';
import { AnimatePresence, motion } from 'framer-motion';
import { classNames } from '../../../libs/class-names.js';
import { mergeProps } from '../../../libs/merge-props.js';
import 'color';
import 'blueimp-md5';
import '@artsy/fresnel';
import { useTheme } from '../../theme/use-theme.js';
import { forwardRefWrapper } from '../../../libs/forward-ref-wrapper.js';
import { IconColorProvider, Icon } from '../../icons/icon-base.js';
import 'usable-react';
import '@seznam/compose-react-refs';
import { InverseThemeSemantics } from '../../theme/inverse-theme-semantics.js';
import '@react-aria/ssr';
import '../../theme/theme-provider.js';
import { Spacer } from '../../layout/spacer.js';
import { useScaleIn } from '../../../hooks/transitions.js';
import 'react-dom';
import 'watch-resize';
import modules_15fffc63 from './text-button.less.js';

/**
 * Determines a _default_ color for icons nested in a `<TextButton>`.
 */
function useIconColor(baseColor, inverseSemantics, isHovered, isPressed) {
    const theme = useTheme({ inverseSemantics });
    let tone = 'base';
    // ":hover" state
    if (isHovered) {
        tone = theme.isLightTheme ? 'lighter' : 'darker';
    }
    // ":active" state
    if (isPressed) {
        tone = theme.isLightTheme ? 'darkest' : 'lightest';
    }
    return baseColor ? theme.hex[baseColor][tone] : undefined;
}
const TextButton = /* @__PURE__ */ forwardRefWrapper('TextButton', { size: 'md', color: 'primary' }, (props, externalRef) => {
    const { onPress, className, disabled, size, color, leadingIcon, trailingIcon, children } = props, otherProps = __rest(props, ["onPress", "className", "disabled", "size", "color", "leadingIcon", "trailingIcon", "children"]);
    const { isFocusVisible, focusProps } = useFocusRing();
    const { isHovered, hoverProps } = useHover({ isDisabled: disabled });
    const { isPressed, pressProps } = usePress({ onPress, isDisabled: disabled });
    const getScaleProps = useScaleIn();
    const inverseSemantics = color === 'secondary';
    const iconColor = useIconColor(color, inverseSemantics, isHovered, isPressed);
    return (React.createElement(IconColorProvider, { colorA: iconColor },
        React.createElement(InverseThemeSemantics, { active: inverseSemantics },
            React.createElement("button", Object.assign({ className: classNames([
                    className,
                    modules_15fffc63.TextButton,
                    modules_15fffc63[size],
                    modules_15fffc63[`size_${size}`],
                    modules_15fffc63[`color_${color}`],
                    disabled && modules_15fffc63.disabled,
                    isPressed && modules_15fffc63.active,
                ]), type: "button", disabled: disabled, "aria-disabled": disabled }, mergeProps(pressProps, focusProps, hoverProps, otherProps), { ref: externalRef }),
                React.createElement(AnimatePresence, null, isFocusVisible && (React.createElement(motion.span, Object.assign({ "aria-hidden": "true", className: modules_15fffc63.focusRing }, getScaleProps(1.05))))),
                leadingIcon && (React.createElement(React.Fragment, null,
                    React.createElement(Icon, { size: size === 'sm' ? 20 : 24, type: leadingIcon }),
                    React.createElement(Spacer, { size: 8 }))),
                React.createElement("span", { className: modules_15fffc63.buttonLabel }, children),
                trailingIcon && (React.createElement(React.Fragment, null,
                    React.createElement(Spacer, { size: 8 }),
                    React.createElement(Icon, { size: size === 'sm' ? 20 : 24, type: trailingIcon })))))));
});

export { TextButton };
//# sourceMappingURL=text-button.js.map
