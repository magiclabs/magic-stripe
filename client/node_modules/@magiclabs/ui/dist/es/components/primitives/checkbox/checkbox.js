import { __rest } from '../../../_virtual/_tslib.js';
import React, { useRef, useEffect } from 'react';
import { usePress, useHover } from '@react-aria/interactions';
import { useFocusRing } from '@react-aria/focus';
import { AnimatePresence, motion } from 'framer-motion';
import { classNames } from '../../../libs/class-names.js';
import { mergeProps } from '../../../libs/merge-props.js';
import 'color';
import 'blueimp-md5';
import '@artsy/fresnel';
import { forwardRefWrapper } from '../../../libs/forward-ref-wrapper.js';
import { Icon } from '../../icons/icon-base.js';
import 'usable-react';
import composeRefs from '@seznam/compose-react-refs';
import '../../theme/inverse-theme-semantics.js';
import '@react-aria/ssr';
import '../../theme/theme-provider.js';
import { Spacer } from '../../layout/spacer.js';
import { useScaleIn, useScale } from '../../../hooks/transitions.js';
import 'react-dom';
import 'watch-resize';
import modules_d386e407 from './checkbox.less.js';

/* eslint-disable jsx-a11y/label-has-associated-control */
const CheckmarkIcon = {
    SVGContents: ({ fill }) => {
        return (React.createElement("path", Object.assign({ d: "M12.9374 0.446429L13.2945 0.848214C13.5177 1.02679 13.5177 1.38393 13.2945 1.60714L5.25879 9.59822C5.03558 9.77679 4.67843 9.77679 4.49986 9.59822L0.660575 5.71429C0.43736 5.49107 0.43736 5.17857 0.660575 4.95536L1.01772 4.59821C1.24093 4.375 1.59807 4.375 1.77665 4.59821L4.857 7.67857L12.1784 0.446429C12.357 0.267857 12.7141 0.267857 12.9374 0.446429Z" }, fill)));
    },
    viewbox: [0, 0, 14, 10],
    color: (theme) => theme.hex.secondary.base,
};
const Checkbox = /* @__PURE__ */ forwardRefWrapper('Checkbox', { color: 'primary' }, (props, externalRef) => {
    const { onPress, disabled, checked, label, indeterminate, color } = props, otherProps = __rest(props, ["onPress", "disabled", "checked", "label", "indeterminate", "color"]);
    const inputRef = useRef(null);
    const { isFocusVisible, focusProps } = useFocusRing();
    const { pressProps, isPressed } = usePress({ onPress, isDisabled: disabled });
    const { isHovered, hoverProps } = useHover({ isDisabled: disabled });
    const getScaleInProps = useScaleIn();
    const getScaleProps = useScale();
    useEffect(() => {
        if (inputRef.current) {
            inputRef.current.indeterminate = !!indeterminate;
        }
    }, [indeterminate]);
    return (React.createElement("label", { className: modules_d386e407.Checkbox },
        React.createElement("input", Object.assign({ type: "checkbox", disabled: disabled, "aria-disabled": disabled, checked: checked, tabIndex: 0 }, mergeProps(pressProps, focusProps, hoverProps, otherProps), { ref: composeRefs(inputRef, externalRef) })),
        React.createElement("span", { className: classNames([
                modules_d386e407.checkmark,
                modules_d386e407[`color_${color}`],
                disabled && modules_d386e407.disabled,
                checked && modules_d386e407.checked,
                isFocusVisible && modules_d386e407.focusVisible,
                isPressed && modules_d386e407.active,
                isHovered && modules_d386e407.hover,
                indeterminate && modules_d386e407.indeterminate,
            ]), "aria-hidden": "true" },
            React.createElement(AnimatePresence, null, isFocusVisible && (React.createElement(motion.span, Object.assign({ "aria-hidden": "true", className: modules_d386e407.focusRing }, getScaleInProps(1.1))))),
            React.createElement(AnimatePresence, { initial: false },
                checked && !indeterminate && (React.createElement(motion.span, Object.assign({ className: modules_d386e407.checkmarkIcon }, getScaleProps(0.7), { key: 0 }),
                    React.createElement(Icon, { size: 14, type: CheckmarkIcon }))),
                checked && !!indeterminate && (React.createElement(motion.span, Object.assign({ className: modules_d386e407.indeterminancyIcon }, getScaleProps(0.7), { key: 1 }),
                    React.createElement("span", null))))),
        label && (React.createElement(React.Fragment, null,
            React.createElement(Spacer, { size: 8, inline: true }),
            React.createElement("span", null, label)))));
});

export { Checkbox };
//# sourceMappingURL=checkbox.js.map
