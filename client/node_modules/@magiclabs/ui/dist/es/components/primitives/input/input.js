import { __rest } from '../../../_virtual/_tslib.js';
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { useFocus } from '@react-aria/interactions';
import { AnimatePresence, motion } from 'framer-motion';
import { classNames } from '../../../libs/class-names.js';
import { mergeProps } from '../../../libs/merge-props.js';
import 'color';
import 'blueimp-md5';
import '@artsy/fresnel';
import { useTheme } from '../../theme/use-theme.js';
import { forwardRefWrapper } from '../../../libs/forward-ref-wrapper.js';
import { Icon } from '../../icons/icon-base.js';
import { AsteriskBold } from '../../icons/monochrome/asterisk-bold.js';
import { Exclaim } from '../../icons/monochrome/exclaim.js';
import { FlexColumn, FlexRow } from '../../layout/flexbox/flexbox.js';
import { Outset } from '../../layout/outset/outset.js';
import 'usable-react';
import composeRefs from '@seznam/compose-react-refs';
import '../../theme/inverse-theme-semantics.js';
import '@react-aria/ssr';
import '../../theme/theme-provider.js';
import { useScale, useFade } from '../../../hooks/transitions.js';
import 'react-dom';
import 'watch-resize';
import modules_57a1d797 from './input.less.js';

/* eslint-disable jsx-a11y/label-has-associated-control */
const Input = /* @__PURE__ */ forwardRefWrapper('Input', { size: 'md' }, (props, externalRef) => {
    const { id, required, disabled, label, errorMessage, validateOnBlur, size, prefix, suffix } = props, otherProps = __rest(props, ["id", "required", "disabled", "label", "errorMessage", "validateOnBlur", "size", "prefix", "suffix"]);
    const [hasError, setHasError] = useState(!!errorMessage);
    useEffect(() => {
        setHasError(!!errorMessage);
    }, [errorMessage]);
    const onBlur = useCallback((e) => {
        if (validateOnBlur) {
            const valid = e.target.checkValidity();
            setHasError(!valid || !!errorMessage);
        }
    }, [errorMessage]);
    const [isFocused, onFocusChange] = useState(false);
    const { focusProps } = useFocus({ isDisabled: disabled, onBlur, onFocusChange });
    const inputRef = useRef(null);
    const focusOnInput = useCallback(() => {
        if (inputRef.current)
            inputRef.current.focus();
    }, []);
    const getScaleProps = useScale();
    const getFadeProps = useFade();
    const theme = useTheme();
    return (React.createElement(FlexColumn, null,
        label && (React.createElement(Outset, { bottom: 8 },
            React.createElement("label", { htmlFor: id, className: classNames([modules_57a1d797.InputLabel, modules_57a1d797[`size_${size}`]]) },
                React.createElement(FlexRow, { alignItems: "flex-end" },
                    React.createElement(Outset, { right: 3, trim: "horizontal" },
                        React.createElement("span", null, label),
                        required && React.createElement(Icon, { size: 10, color: theme.hex.primary.base, type: AsteriskBold })))))),
        React.createElement(FlexRow, { alignItems: "center", onClick: focusOnInput, className: classNames([
                modules_57a1d797.Input,
                modules_57a1d797[`size_${size}`],
                disabled && modules_57a1d797.disabled,
                isFocused && modules_57a1d797.focus,
                hasError && modules_57a1d797.hasError,
            ]) },
            React.createElement(AnimatePresence, null, isFocused && (React.createElement(motion.span, Object.assign({ "aria-hidden": "true", className: modules_57a1d797.focusRing }, getFadeProps(), { transition: { duration: 0.3 } })))),
            React.createElement(AnimatePresence, { initial: false, exitBeforeEnter: true }, prefix && (React.createElement(motion.div, Object.assign({ className: modules_57a1d797.prefix }, getScaleProps(0.7), { key: 0 }), prefix))),
            React.createElement("input", Object.assign({ id: id }, mergeProps(focusProps, otherProps), { ref: composeRefs(inputRef, externalRef) })),
            React.createElement(AnimatePresence, { initial: false, exitBeforeEnter: true },
                suffix && !hasError && (React.createElement(motion.div, Object.assign({ className: modules_57a1d797.suffix }, getScaleProps(0.7), { key: 0 }), suffix)),
                hasError && (React.createElement(motion.div, Object.assign({ className: modules_57a1d797.suffix }, getScaleProps(0.7), { key: 1 }),
                    React.createElement(Icon, { type: Exclaim, color: theme.hex.error.base }))))),
        errorMessage && (React.createElement(Outset, { top: 8, left: 7 },
            React.createElement("span", { className: classNames([modules_57a1d797.InputErrorMessage, modules_57a1d797[`size_${size}`]]) }, errorMessage)))));
});

export { Input };
//# sourceMappingURL=input.js.map
