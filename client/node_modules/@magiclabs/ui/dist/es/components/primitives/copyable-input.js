import { __rest } from '../../_virtual/_tslib.js';
import React, { useRef, useState, useEffect } from 'react';
import { usePress } from '@react-aria/interactions';
import '@react-aria/focus';
import 'framer-motion';
import { mergeProps } from '../../libs/merge-props.js';
import 'color';
import 'blueimp-md5';
import '@artsy/fresnel';
import { forwardRefWrapper } from '../../libs/forward-ref-wrapper.js';
import { Icon } from '../icons/icon-base.js';
import { Copy } from '../icons/monochrome/copy.js';
import 'usable-react';
import composeRefs from '@seznam/compose-react-refs';
import '../theme/inverse-theme-semantics.js';
import '@react-aria/ssr';
import '../theme/theme-provider.js';
import 'react-dom';
import 'watch-resize';
import { TextButton } from './text-button/text-button.js';
import { Input } from './input/input.js';
import './radio/radio.js';
import '../feedback/alert/alert.js';
import '../feedback/toast/toast-provider/toast-provider.js';
import 'react-popper-2';
import { AnchoredTooltip } from '../feedback/anchored-tooltip.js';
import { useClipboard } from '../../hooks/use-clipboard.js';

const CopyableInput = /* @__PURE__ */ forwardRefWrapper('CopyableInput', (props, externalRef) => {
    const inputRef = useRef(null);
    const [copyTooltipText, setCopyTooltipText] = useState('Copy');
    const { value, defaultValue, onCopy, size } = props, otherProps = __rest(props, ["value", "defaultValue", "onCopy", "size"]);
    useEffect(() => {
        if (copyTooltipText !== 'Copy') {
            const timeout = setTimeout(() => setCopyTooltipText('Copy'), 1000);
            return () => clearTimeout(timeout);
        }
        return undefined;
    }, [copyTooltipText]);
    const { copy, ref: clipboardRef } = useClipboard(() => {
        setCopyTooltipText('Copied!');
        if (onCopy)
            onCopy();
    });
    const { pressProps } = usePress({ onPress: copy });
    const suffix = (React.createElement(AnchoredTooltip, { toggle: true, delay: 0, anchor: React.createElement(TextButton, Object.assign({ size: size === 'lg' ? 'md' : size }, mergeProps(pressProps)),
            React.createElement(Icon, { type: Copy })) },
        React.createElement("p", { style: { textAlign: 'center' } }, copyTooltipText)));
    return (React.createElement(Input, Object.assign({ value: value, defaultValue: defaultValue, suffix: suffix, size: size }, otherProps, { ref: composeRefs(inputRef, externalRef, clipboardRef) })));
});

export { CopyableInput };
//# sourceMappingURL=copyable-input.js.map
