import { __rest } from '../../../_virtual/_tslib.js';
import React from 'react';
import { usePress } from '@react-aria/interactions';
import { useFocusRing } from '@react-aria/focus';
import { AnimatePresence, motion } from 'framer-motion';
import { classNames } from '../../../libs/class-names.js';
import { mergeProps } from '../../../libs/merge-props.js';
import 'color';
import 'blueimp-md5';
import '@artsy/fresnel';
import { useTheme } from '../../theme/use-theme.js';
import { forwardRefWrapper } from '../../../libs/forward-ref-wrapper.js';
import { IconColorProvider, Icon } from '../../icons/icon-base.js';
import 'usable-react';
import '@seznam/compose-react-refs';
import { InverseThemeSemantics } from '../../theme/inverse-theme-semantics.js';
import '@react-aria/ssr';
import '../../theme/theme-provider.js';
import { Spacer } from '../../layout/spacer.js';
import { useScaleIn } from '../../../hooks/transitions.js';
import 'react-dom';
import 'watch-resize';
import modules_7956c93f from './call-to-action.less.js';

/**
 * Determines a _default_ color for icons nested in a `<CallToAction>`.
 */
function useIconColor(baseColor, inverseSemantics, outline) {
    const theme = useTheme({ inverseSemantics });
    let iconBaseColor;
    switch (baseColor) {
        case 'primary':
            iconBaseColor = outline ? 'tertiary' : 'secondary';
            break;
        case 'secondary':
            iconBaseColor = outline ? 'secondary' : 'tertiary';
            break;
        case 'tertiary':
            iconBaseColor = outline ? 'tertiary' : 'secondary';
            break;
        case 'error':
            iconBaseColor = outline ? 'error' : 'secondary';
            break;
        case 'warning':
            iconBaseColor = outline ? 'warning' : 'secondary';
            break;
        case 'success':
            iconBaseColor = outline ? 'success' : 'secondary';
            break;
        default:
            iconBaseColor = undefined;
    }
    return iconBaseColor ? theme.hex[iconBaseColor].base : undefined;
}
const CallToAction = /* @__PURE__ */ forwardRefWrapper('CallToAction', { color: 'primary', size: 'md' }, (props, externalRef) => {
    const { children, onPress, className, disabled, outline, color, size, leadingIcon, trailingIcon } = props, otherProps = __rest(props, ["children", "onPress", "className", "disabled", "outline", "color", "size", "leadingIcon", "trailingIcon"]);
    const { isFocusVisible, focusProps } = useFocusRing();
    const { pressProps, isPressed } = usePress({ onPress, isDisabled: disabled });
    const getScaleProps = useScaleIn();
    const inverseSemantics = (color === 'secondary' && outline) || (color === 'tertiary' && !outline);
    const iconColor = useIconColor(color, inverseSemantics, outline);
    return (React.createElement(IconColorProvider, { colorA: iconColor },
        React.createElement(InverseThemeSemantics, { active: inverseSemantics },
            React.createElement("button", Object.assign({ className: classNames([
                    className,
                    modules_7956c93f.CallToAction,
                    modules_7956c93f[`size_${size}`],
                    modules_7956c93f[`color_${color}`],
                    disabled && modules_7956c93f.disabled,
                    outline && modules_7956c93f.outline,
                    isPressed && modules_7956c93f.active,
                ]), type: "button", disabled: disabled, "aria-disabled": disabled }, mergeProps(pressProps, focusProps, otherProps), { ref: externalRef }),
                React.createElement(AnimatePresence, null, isFocusVisible && (React.createElement(motion.span, Object.assign({ "aria-hidden": "true", className: modules_7956c93f.focusRing }, getScaleProps(1.05))))),
                leadingIcon && (React.createElement(React.Fragment, null,
                    React.createElement(Icon, { size: size === 'sm' ? 20 : 24, type: leadingIcon }),
                    React.createElement(Spacer, { size: 8 }))),
                React.createElement("span", { className: modules_7956c93f.buttonLabel }, children),
                trailingIcon && (React.createElement(React.Fragment, null,
                    React.createElement(Spacer, { size: 8 }),
                    React.createElement(Icon, { size: size === 'sm' ? 20 : 24, type: trailingIcon })))))));
});

export { CallToAction };
//# sourceMappingURL=call-to-action.js.map
