import { __rest } from '../../../_virtual/_tslib.js';
import React from 'react';
import { usePress } from '@react-aria/interactions';
import { useFocusRing } from '@react-aria/focus';
import { AnimatePresence, motion } from 'framer-motion';
import { classNames } from '../../../libs/class-names.js';
import { mergeProps } from '../../../libs/merge-props.js';
import { forwardRefWrapper } from '../../../libs/forward-ref-wrapper.js';
import { useScaleIn } from '../../../hooks/transitions.js';
import modules_0d6d3c28 from './toggle-button.less.js';

const ToggleButton = /* @__PURE__ */ forwardRefWrapper('ToggleButton', { color: 'primary' }, (props, externalRef) => {
    const { onPress, className, disabled, checked, color } = props, otherProps = __rest(props, ["onPress", "className", "disabled", "checked", "color"]);
    const { isFocusVisible, focusProps } = useFocusRing();
    const { pressProps, isPressed } = usePress({ onPress, isDisabled: disabled });
    const getScaleProps = useScaleIn();
    return (React.createElement("button", Object.assign({ className: classNames([
            className,
            modules_0d6d3c28.ToggleButton,
            modules_0d6d3c28[`color_${color}`],
            disabled && modules_0d6d3c28.disabled,
            checked && modules_0d6d3c28.checked,
            isFocusVisible && modules_0d6d3c28.focusVisible,
            isPressed && modules_0d6d3c28.active,
        ]), type: "button", role: "switch", disabled: disabled, "aria-disabled": disabled, "aria-checked": checked, tabIndex: 0 }, mergeProps(pressProps, focusProps, otherProps), { ref: externalRef }),
        React.createElement(AnimatePresence, null, isFocusVisible && React.createElement(motion.span, Object.assign({ "aria-hidden": "true", className: modules_0d6d3c28.focusRing }, getScaleProps(1.1))))));
});

export { ToggleButton };
//# sourceMappingURL=toggle-button.js.map
