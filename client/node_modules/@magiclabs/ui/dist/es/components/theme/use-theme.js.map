{"version":3,"file":"use-theme.js","sources":["../../../../src/components/theme/use-theme.ts"],"sourcesContent":["import { useContext, createContext } from 'react';\nimport { Theme, DEFAULT_THEME, createTheme } from '../../libs/theme';\n\nexport interface ThemeContext {\n  theme: Theme | null;\n}\n\nexport const ThemeContext = /* @__PURE__ */ createContext<ThemeContext>({\n  theme: null,\n});\n\ninterface UseThemeOptions {\n  /**\n   * There are some design cases where `{color}_lighter` / `{color}_darker`\n   * semantics should be reversed. When this option is true, `{color}_lighter`\n   * becomes `{color}_darker` and vice versa.\n   *\n   * Use with care.\n   */\n  inverseSemantics?: boolean;\n}\n\nexport function useTheme(options?: UseThemeOptions) {\n  const theme = useContext(ThemeContext).theme ?? DEFAULT_THEME;\n\n  if (options?.inverseSemantics) {\n    const themeWithInverseSemantics = createTheme({ ...theme.config, inverseSemantics: true });\n    return themeWithInverseSemantics;\n  }\n\n  return theme;\n}\n"],"names":[],"mappings":";;;;;MAOa,YAAY,mBAAmB,aAAa,CAAe;IACtE,KAAK,EAAE,IAAI;CACZ,EAAE;SAaa,QAAQ,CAAC,OAAyB;;IAChD,MAAM,KAAK,SAAG,UAAU,CAAC,YAAY,CAAC,CAAC,KAAK,mCAAI,aAAa,CAAC;IAE9D,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,gBAAgB,EAAE;QAC7B,MAAM,yBAAyB,GAAG,WAAW,iCAAM,KAAK,CAAC,MAAM,KAAE,gBAAgB,EAAE,IAAI,IAAG,CAAC;QAC3F,OAAO,yBAAyB,CAAC;KAClC;IAED,OAAO,KAAK,CAAC;AACf;;;;"}