import React from 'react';
import { mergeProps } from '../../libs/merge-props.js';
import 'color';
import 'blueimp-md5';
import { getThemeVariables } from '../../libs/theme/theme-variables.js';
import { useTheme } from './use-theme.js';

/**
 * There are some design cases where `{color}_lighter` / `{color}_darker` semantics
 * should be reversed. Wrapping elements with this component will inverse the
 * expected theme semantics to support these edge cases.
 *
 * In other words, `{color}_lighter` will become `{color}_darker` and vice versa.
 *
 * Use with care.
 */
const InverseThemeSemantics = (props) => {
    const { active, children } = props;
    const theme = useTheme({ inverseSemantics: true });
    const { variables: style } = getThemeVariables(theme);
    const wrappedChildren = React.Children.map(children, (child) => {
        if (React.isValidElement(child)) {
            return React.cloneElement(child, mergeProps(Object.assign(Object.assign({}, child.props), { style })));
        }
        return child;
    });
    return active ? React.createElement(React.Fragment, null, wrappedChildren) : React.createElement(React.Fragment, null, children);
};
InverseThemeSemantics.defaultProps = {
    active: true,
};

export { InverseThemeSemantics };
//# sourceMappingURL=inverse-theme-semantics.js.map
