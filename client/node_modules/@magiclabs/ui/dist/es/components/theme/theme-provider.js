import React, { useContext, useMemo } from 'react';
import { classNames } from '../../libs/class-names.js';
import { DEFAULT_THEME } from '../../libs/theme/default-theme.js';
import { getThemeVariables } from '../../libs/theme/theme-variables.js';
import { ThemeContext } from './use-theme.js';
import { MediaProvider } from './media-provider.js';
import { useIsomorphicLayoutEffect } from '../../hooks/use-isomorphic-layout-effect.js';

const ThemeProvider = (props) => {
    const { theme = DEFAULT_THEME, children } = props;
    const isRoot = !!useContext(ThemeContext).theme;
    const { variables, applyToDocument } = getThemeVariables(theme);
    useIsomorphicLayoutEffect(() => {
        if (isRoot)
            applyToDocument();
    }, [theme.key, isRoot]);
    const themeVariablesMemoized = useMemo(() => variables, [theme.key]);
    const themeMetadata = classNames([theme.isDarkTheme ? 'dark' : 'light', theme.isLowContrast && 'lowContrast']);
    const themeCtx = useMemo(() => ({ theme }), [theme.key]);
    /*
  
      NOTES
      ~~~~~
  
      We look for the following potential values in the `data-mg-theme` attribute:
  
        - `light` | `dark`
        - `lowContrast`
  
      Our LESS mixins (`#mg.darkTheme`, `#mg.lightTheme`, and `#mg.lowContrast`)
      leverage these values to apply theme-specific styles. Because the attribute
      can be checked in any order, any of the following formats are considered
      valid:
  
        - `[data-mg-theme~='light'] [data-mg-theme~='lowContrast'] ...`
        - `[data-mg-theme~='lowContrast'] [data-mg-theme~='light'] ...`
  
      To get this flexibility, we have to nest the `data-mg-theme` attribute
      at least twice!
  
     */
    const attributes = {
        'data-mg-theme': themeMetadata,
    };
    return (React.createElement(ThemeContext.Provider, { value: themeCtx },
        React.createElement(MediaProvider, null,
            React.createElement("div", Object.assign({}, attributes),
                React.createElement("div", Object.assign({}, attributes, { style: themeVariablesMemoized }), children)))));
};
ThemeProvider.defaultProps = {};
ThemeProvider.displayName = 'ThemeProvider';

export { ThemeProvider };
//# sourceMappingURL=theme-provider.js.map
