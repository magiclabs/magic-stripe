import { __rest } from '../../../_virtual/_tslib.js';
import React from 'react';
import { classNames } from '../../../libs/class-names.js';
import { forwardRefWrapper } from '../../../libs/forward-ref-wrapper.js';
import { useStyles } from '../../../hooks/use-styles.js';
import modules_135aa908 from './flexbox.less.js';

/* eslint-disable no-nested-ternary */
const FlexLayout = /* @__PURE__ */ forwardRefWrapper('FlexLayout', (props, externalRef) => {
    const { inline, justifyContent, alignItems, alignSelf, alignContent, flex: flexStyle, direction: flexDirection, wrap: flexWrap, grow: flexGrow, shrink: flexShrink, basis: flexBasis, style } = props, otherProps = __rest(props, ["inline", "justifyContent", "alignItems", "alignSelf", "alignContent", "flex", "direction", "wrap", "grow", "shrink", "basis", "style"]);
    const containerStyles = useStyles(Object.assign({ justifyContent: justifyContent !== null && justifyContent !== void 0 ? justifyContent : undefined, alignItems: alignItems !== null && alignItems !== void 0 ? alignItems : undefined, alignSelf: alignSelf !== null && alignSelf !== void 0 ? alignSelf : undefined, alignContent: alignContent !== null && alignContent !== void 0 ? alignContent : undefined, flexStyle: flexStyle !== null && flexStyle !== void 0 ? flexStyle : undefined, flexDirection: flexDirection !== null && flexDirection !== void 0 ? flexDirection : undefined, flexWrap: typeof flexWrap === 'boolean' ? (flexWrap ? 'wrap' : 'nowrap') : flexWrap ? `wrap-${flexWrap}` : undefined, flexGrow: flexGrow !== null && flexGrow !== void 0 ? flexGrow : undefined, flexShrink: flexShrink !== null && flexShrink !== void 0 ? flexShrink : undefined, flexBasis: flexBasis !== null && flexBasis !== void 0 ? flexBasis : undefined }, style));
    return React.createElement("div", Object.assign({}, otherProps, { style: containerStyles, ref: externalRef }));
});
const FlexItem = /* @__PURE__ */ forwardRefWrapper('FlexItem', (props, externalRef) => {
    const { className, inline } = props, otherProps = __rest(props, ["className", "inline"]);
    return (React.createElement(FlexLayout, Object.assign({ className: classNames([modules_135aa908.FlexItem, className, inline && modules_135aa908.inlineItem]) }, otherProps, { ref: externalRef })));
});
// -------------------------------------------------------------------------- //
const FlexContainer = /* @__PURE__ */ forwardRefWrapper('FlexContainer', (props, externalRef) => {
    const { className, inline } = props, otherProps = __rest(props, ["className", "inline"]);
    return (React.createElement(FlexLayout, Object.assign({ className: classNames([modules_135aa908.FlexContainer, modules_135aa908.FlexItem, className, inline && modules_135aa908.inlineContainer]) }, otherProps, { ref: externalRef })));
});
const FlexRow = /* @__PURE__ */ forwardRefWrapper('Row', (props, externalRef) => {
    const { reverse, horizontal, vertical } = props, otherProps = __rest(props, ["reverse", "horizontal", "vertical"]);
    const direction = reverse ? 'row-reverse' : 'row';
    return (React.createElement(FlexContainer, Object.assign({ direction: direction, justifyContent: horizontal, alignItems: vertical }, otherProps, { ref: externalRef })));
});
const FlexColumn = /* @__PURE__ */ forwardRefWrapper('Column', (props, externalRef) => {
    const { reverse, horizontal, vertical } = props, otherProps = __rest(props, ["reverse", "horizontal", "vertical"]);
    const direction = reverse ? 'column-reverse' : 'column';
    return (React.createElement(FlexContainer, Object.assign({ direction: direction, justifyContent: vertical, alignItems: horizontal }, otherProps, { ref: externalRef })));
});

export { FlexColumn, FlexContainer, FlexItem, FlexRow };
//# sourceMappingURL=flexbox.js.map
