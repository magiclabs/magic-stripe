import React, { useRef, useEffect, useCallback } from 'react';
import { useHover } from '@react-aria/interactions';
import { classNames } from '../../../../libs/class-names.js';
import { mergeProps } from '../../../../libs/merge-props.js';
import 'color';
import 'blueimp-md5';
import '@artsy/fresnel';
import { useTheme } from '../../../theme/use-theme.js';
import { forwardRefWrapper } from '../../../../libs/forward-ref-wrapper.js';
import { IconColorProvider, Icon } from '../../../icons/icon-base.js';
import composeRefs from '@seznam/compose-react-refs';
import '../../../theme/inverse-theme-semantics.js';
import '../../../theme/theme-provider.js';
import { Spacer } from '../../spacer.js';
import modules_5db374a8 from './tab.less.js';

function getPrevTabID(tabIDs, index) {
    const maxIndex = tabIDs.length - 1;
    const nextIndex = index <= 0 ? maxIndex : index - 1;
    return tabIDs[nextIndex];
}
function getNextTabID(tabIDs, index) {
    const maxIndex = tabIDs.length - 1;
    const nextIndex = index >= maxIndex ? 0 : index + 1;
    return tabIDs[nextIndex];
}
/**
 * Determines a _default_ color for icons nested in a `<Tab>`.
 */
function useIconColor(orientation, isHovered, isSelected) {
    const theme = useTheme();
    if (orientation === 'horizontal') {
        if (isHovered && !isSelected)
            return theme.hex.primary.darker;
        if (isSelected)
            return theme.hex.secondary.base;
        return theme.hex.tertiary.base;
    }
    return theme.hex.tertiary.base;
}
const Tab = /* @__PURE__ */ forwardRefWrapper('Tab', (props, externalRef) => {
    const { id, panelID, allTabIDs, index, activateTab, selected, orientation, size, useAnimation, icon, children, } = props;
    const ref = useRef(null);
    useEffect(() => {
        // If the current tab is selected, give it focus
        if (selected && ref.current)
            ref.current.focus();
    }, [selected]);
    const handleClick = useCallback((e) => {
        e.preventDefault();
        activateTab(id);
    }, [id]);
    const handleKeyDown = useCallback((e) => {
        const prevTabID = getPrevTabID(allTabIDs, index);
        const nextTabID = getNextTabID(allTabIDs, index);
        const handleTabChange = (tabID) => {
            e.preventDefault();
            activateTab(tabID);
        };
        const handleArrowKey = (assertOrientation, tabID) => {
            if (orientation === assertOrientation) {
                handleTabChange(tabID);
            }
        };
        switch (e.key) {
            case 'ArrowRight':
                handleArrowKey('horizontal', nextTabID);
                break;
            case 'ArrowLeft':
                handleArrowKey('horizontal', prevTabID);
                break;
            case 'ArrowUp':
                handleArrowKey('vertical', prevTabID);
                break;
            case 'ArrowDown':
                handleArrowKey('vertical', nextTabID);
                break;
            case 'Home':
                handleTabChange(allTabIDs[0]);
                break;
            case 'End':
                handleTabChange(allTabIDs[allTabIDs.length - 1]);
                break;
        }
    }, [allTabIDs, index, orientation]);
    const { isHovered, hoverProps } = useHover({ isDisabled: false });
    const iconColor = useIconColor(orientation, isHovered, selected);
    return (React.createElement(IconColorProvider, { colorA: iconColor },
        React.createElement("button", Object.assign({ className: classNames([
                modules_5db374a8.Tab,
                modules_5db374a8[`size_${size}`],
                selected && modules_5db374a8.selected,
                modules_5db374a8[orientation],
                useAnimation && modules_5db374a8.withAnimation,
            ]), id: id, type: "button", role: "tab", "aria-selected": selected, "aria-controls": panelID, tabIndex: selected ? 0 : -1 }, mergeProps(hoverProps, {
            onClick: handleClick,
            onKeyDown: handleKeyDown,
        }), { ref: composeRefs(ref, externalRef) }),
            icon && (React.createElement(React.Fragment, null,
                React.createElement(Icon, { className: modules_5db374a8.icon, size: size === 'sm' ? 20 : 24, type: icon }),
                React.createElement(Spacer, { size: 8 }))),
            children)));
});

export { Tab };
//# sourceMappingURL=tab.js.map
