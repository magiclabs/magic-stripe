import React from 'react';
import { classNames } from '../../../libs/class-names.js';
import { mergeProps } from '../../../libs/merge-props.js';
import { useStyles } from '../../../hooks/use-styles.js';
import modules_c0cb627f from './inset.less.js';

function resolveStyleValue(source) {
    return typeof source === 'number' ? `${source}px` : source;
}
const Inset = (props) => {
    const { wrapItemsWith, top, right, bottom, left, all, trim, children } = props;
    const style = useStyles(all
        ? {
            padding: resolveStyleValue(all),
        }
        : {
            paddingTop: resolveStyleValue(top),
            paddingRight: resolveStyleValue(right),
            paddingBottom: resolveStyleValue(bottom),
            paddingLeft: resolveStyleValue(left),
        });
    const numChildren = React.Children.count(children);
    const wrappedChildren = React.Children.map(children, (child, i) => {
        const isFirstChild = i === 0;
        const isLastChild = i === numChildren - 1;
        const className = classNames([
            modules_c0cb627f.Inset,
            isFirstChild && modules_c0cb627f.isFirstChild,
            isLastChild && modules_c0cb627f.isLastChild,
            trim === 'horizontal' && modules_c0cb627f.trimHorizontally,
            trim === 'vertical' && modules_c0cb627f.trimVertically,
        ]);
        if (wrapItemsWith) {
            return React.createElement(wrapItemsWith, { className, style }, child);
        }
        if (React.isValidElement(child)) {
            return React.cloneElement(child, mergeProps(child.props, { className, style }));
        }
        return child;
    });
    return React.createElement(React.Fragment, null, wrappedChildren);
};

export { Inset };
//# sourceMappingURL=inset.js.map
