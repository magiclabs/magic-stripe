import React, { useContext, useState, useLayoutEffect, createContext } from 'react';
import { SSRProvider as SSRProvider$1 } from '@react-aria/ssr';

const canUseDOM = /* @__PURE__ */ Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);
const defaultSSRContext = { isServer: !canUseDOM, isClient: canUseDOM };
const SSRContext = /* @__PURE__ */ createContext(defaultSSRContext);
const SSRProvider = (props) => {
    const { children } = props;
    // Copy the default context so that strict equality
    // checks against the context value are falsey.
    const ctx = Object.assign({}, defaultSSRContext);
    return (React.createElement(SSRContext.Provider, { value: ctx },
        React.createElement(SSRProvider$1, null, children)));
};
function useSSR() {
    const ctx = useContext(SSRContext);
    const isInSSRContext = ctx !== defaultSSRContext;
    const [isHydrating, setIsHydrating] = useState(canUseDOM && isInSSRContext);
    if (canUseDOM) {
        useLayoutEffect(() => setIsHydrating(false), []);
    }
    return Object.assign(Object.assign({}, ctx), { isHydrating });
}

export { SSRProvider, useSSR };
//# sourceMappingURL=ssr-provider.js.map
