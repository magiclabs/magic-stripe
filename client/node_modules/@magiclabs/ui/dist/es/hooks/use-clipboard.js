import { __awaiter } from '../_virtual/_tslib.js';
import { useRef, useCallback } from 'react';
import { useSSR } from '../components/ssr-provider.js';

/* eslint-disable @typescript-eslint/prefer-regexp-exec */
/**
 * Copies text to the native clipboard, either via the `navigator.clipboard`
 * API, or old `document.execCommand('copy')` hacks!
 *
 * Based on this excellent StackOverflow answer:
 * https://stackoverflow.com/a/45308151
 */
function copyToClipboard(text) {
    var _a, _b, _c, _d, _e;
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield navigator.clipboard.writeText(text);
        }
        catch (_f) {
            const textarea = document.createElement('textarea');
            // Move it off-screen.
            textarea.style.position = 'absolute';
            textarea.style.left = '-2147483647em';
            // Set to readonly to prevent mobile devices opening a keyboard when
            // text is .select()'ed.
            textarea.setAttribute('readonly', true);
            document.body.appendChild(textarea);
            textarea.value = text;
            // Check if there is any content selected previously.
            const selected = ((_b = (_a = document.getSelection()) === null || _a === void 0 ? void 0 : _a.rangeCount) !== null && _b !== void 0 ? _b : NaN) > 0 ? (_c = document.getSelection()) === null || _c === void 0 ? void 0 : _c.getRangeAt(0) : false;
            // iOS Safari blocks programmatic execCommand copying normally, without this hack.
            // https://stackoverflow.com/questions/34045777/copy-to-clipboard-using-javascript-in-ios
            if (navigator.userAgent.match(/ipad|ipod|iphone/i)) {
                const editable = textarea.contentEditable;
                textarea.contentEditable = true;
                const range = document.createRange();
                range.selectNodeContents(textarea);
                const selection = window.getSelection();
                selection === null || selection === void 0 ? void 0 : selection.removeAllRanges();
                selection === null || selection === void 0 ? void 0 : selection.addRange(range);
                textarea.setSelectionRange(0, 999999);
                textarea.contentEditable = editable;
            }
            else {
                textarea.select();
            }
            document.execCommand('copy');
            // Restore previous selection.
            if (selected) {
                (_d = document.getSelection()) === null || _d === void 0 ? void 0 : _d.removeAllRanges();
                (_e = document.getSelection()) === null || _e === void 0 ? void 0 : _e.addRange(selected);
            }
        }
    });
}
/**
 * Creates a memoized callback—`copy`—that interacts with the user's computer clipboard.
 * Also provides a `ref` to attach to inputs, which can then be used as a source
 * for the clipboard value.
 */
function useClipboard(onCopy) {
    const ref = useRef(null);
    const { isServer } = useSSR();
    const copy = useCallback((source) => __awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c, _d, _e, _f;
        if (isServer)
            return;
        const text = typeof source === 'string'
            ? String(source)
            : (_f = (_d = (_b = (_a = ref.current) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : (_c = ref.current) === null || _c === void 0 ? void 0 : _c.textContent) !== null && _d !== void 0 ? _d : (_e = source === null || source === void 0 ? void 0 : source.target) === null || _e === void 0 ? void 0 : _e.value) !== null && _f !== void 0 ? _f : '';
        yield copyToClipboard(text);
        if (onCopy)
            onCopy(text);
    }), [onCopy, isServer]);
    return { copy, ref };
}

export { useClipboard };
//# sourceMappingURL=use-clipboard.js.map
