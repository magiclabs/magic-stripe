import React from 'react';
import { Theme } from '../../libs/theme';
interface IconColorContext {
    colorA: string;
    colorB: string;
    opacityA: number;
    opacityB: number;
}
declare const IconColorContext: React.Context<IconColorContext>;
/**
 * Creates a React context that overrides the fallback
 * color properties of icons rendered within.
 */
export declare const IconColorProvider: React.FC<Partial<IconColorContext>>;
declare type MonochromeSVGContents = React.FC<{
    fill: {
        fill: string;
        fillOpacity: number;
    };
    stroke: {
        stroke: string;
        strokeOpacity: number;
    };
    theme: Theme;
}>;
export interface MonochromeIconDefinition {
    SVGContents: MonochromeSVGContents;
    viewbox: [number, number, number, number];
    color?: string | ((theme: Theme) => string);
    opacity?: number | ((theme: Theme) => number);
}
interface MonochromeColor {
    color?: string;
    opacity?: number;
}
interface MonochromeIconBaseProps extends MonochromeColor, React.HTMLAttributes<HTMLSpanElement> {
    type: MonochromeIconDefinition;
    size?: number | {
        width?: number;
        height?: number;
    };
    disabled?: boolean;
    inline?: boolean;
}
export declare const Icon: React.ForwardRefExoticComponent<MonochromeIconBaseProps & React.RefAttributes<HTMLSpanElement>>;
declare type DuotoneSVGContents = React.FC<{
    fillA: {
        fill: string;
        fillOpacity: number;
    };
    fillB: {
        fill: string;
        fillOpacity: number;
    };
    strokeA: {
        stroke: string;
        strokeOpacity: number;
    };
    strokeB: {
        stroke: string;
        strokeOpacity: number;
    };
    theme: Theme;
}>;
export interface DuotoneIconDefinition {
    SVGContents: DuotoneSVGContents;
    viewbox: [number, number, number, number];
    colorA?: string | ((theme: Theme) => string);
    colorB?: string | ((theme: Theme) => string);
    opacityA?: number | ((theme: Theme) => number);
    opacityB?: number | ((theme: Theme) => number);
}
interface DuotoneColor {
    colorA?: string;
    colorB?: string;
    opacityA?: number;
    opacityB?: number;
}
interface DuotoneIconBaseProps extends DuotoneColor, React.HTMLAttributes<HTMLSpanElement> {
    type: DuotoneIconDefinition;
    size?: number | {
        width?: number;
        height?: number;
    };
    disabled?: boolean;
    inline?: boolean;
}
export declare const DuotoneIcon: React.ForwardRefExoticComponent<DuotoneIconBaseProps & React.RefAttributes<HTMLSpanElement>>;
export {};
