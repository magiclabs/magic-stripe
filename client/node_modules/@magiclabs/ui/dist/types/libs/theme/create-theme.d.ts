import Color from 'color';
import { Breakpoint, ThemeType } from './theme-types';
interface RgbaResolver {
    string(alpha?: string | number): string;
    array(alpha?: string | number): [string, string, string, string];
}
declare type ColorDefinition = string | {
    base: string;
    lighter: string;
    lightest: string;
    darker: string;
    darkest: string;
};
interface ThemeConfig {
    primaryColor: ColorDefinition;
    lightColor: ColorDefinition;
    darkColor: ColorDefinition;
    midColor: ColorDefinition;
    successColor: ColorDefinition;
    warningColor: ColorDefinition;
    errorColor: ColorDefinition;
    shift?: [number, number];
    type?: ThemeType;
    font?: {
        sansSerif?: string;
        monospace?: string;
    };
    breakpoints?: Record<Exclude<Breakpoint, 'xs'>, number>;
    /**
     * There are some design cases where `{color}_lighter` / `{color}_darker`
     * semantics should be reversed. When this option is true, `{color}_lighter`
     * becomes `{color}_darker` and vice versa.
     *
     * Use with care.
     */
    inverseSemantics?: boolean;
}
/**
 * Return a partial `ThemeContext` object with `secondaryColor` and `tertiary`
 * set for greatest contrast.
 */
export declare function createTheme<T extends ThemeConfig>(config: T): {
    isDarkTheme: boolean;
    isLightTheme: boolean;
    isLowContrast: boolean;
    hex: {
        primary: {
            base: string;
            lighter: string;
            lightest: string;
            darker: string;
            darkest: string;
        };
        secondary: {
            base: string;
            lighter: string;
            lightest: string;
            darker: string;
            darkest: string;
        };
        tertiary: {
            base: string;
            lighter: string;
            lightest: string;
            darker: string;
            darkest: string;
        };
        success: {
            base: string;
            lighter: string;
            lightest: string;
            darker: string;
            darkest: string;
        };
        warning: {
            base: string;
            lighter: string;
            lightest: string;
            darker: string;
            darkest: string;
        };
        error: {
            base: string;
            lighter: string;
            lightest: string;
            darker: string;
            darkest: string;
        };
        light: {
            base: string;
            lighter: string;
            lightest: string;
            darker: string;
            darkest: string;
        };
        dark: {
            base: string;
            lighter: string;
            lightest: string;
            darker: string;
            darkest: string;
        };
        mid: {
            base: string;
            lighter: string;
            lightest: string;
            darker: string;
            darkest: string;
        };
    };
    rgba: {
        primary: {
            base: RgbaResolver;
            lighter: RgbaResolver;
            lightest: RgbaResolver;
            darker: RgbaResolver;
            darkest: RgbaResolver;
        };
        secondary: {
            base: RgbaResolver;
            lighter: RgbaResolver;
            lightest: RgbaResolver;
            darker: RgbaResolver;
            darkest: RgbaResolver;
        };
        tertiary: {
            base: RgbaResolver;
            lighter: RgbaResolver;
            lightest: RgbaResolver;
            darker: RgbaResolver;
            darkest: RgbaResolver;
        };
        success: {
            base: RgbaResolver;
            lighter: RgbaResolver;
            lightest: RgbaResolver;
            darker: RgbaResolver;
            darkest: RgbaResolver;
        };
        warning: {
            base: RgbaResolver;
            lighter: RgbaResolver;
            lightest: RgbaResolver;
            darker: RgbaResolver;
            darkest: RgbaResolver;
        };
        error: {
            base: RgbaResolver;
            lighter: RgbaResolver;
            lightest: RgbaResolver;
            darker: RgbaResolver;
            darkest: RgbaResolver;
        };
        light: {
            base: RgbaResolver;
            lighter: RgbaResolver;
            lightest: RgbaResolver;
            darker: RgbaResolver;
            darkest: RgbaResolver;
        };
        dark: {
            base: RgbaResolver;
            lighter: RgbaResolver;
            lightest: RgbaResolver;
            darker: RgbaResolver;
            darkest: RgbaResolver;
        };
        mid: {
            base: RgbaResolver;
            lighter: RgbaResolver;
            lightest: RgbaResolver;
            darker: RgbaResolver;
            darkest: RgbaResolver;
        };
    };
    color: {
        primary: {
            base: Color<string>;
            lighter: Color<string>;
            lightest: Color<string>;
            darker: Color<string>;
            darkest: Color<string>;
        };
        secondary: {
            base: Color<string>;
            lighter: Color<string>;
            lightest: Color<string>;
            darker: Color<string>;
            darkest: Color<string>;
        };
        tertiary: {
            base: Color<string>;
            lighter: Color<string>;
            lightest: Color<string>;
            darker: Color<string>;
            darkest: Color<string>;
        };
        success: {
            base: Color<string>;
            lighter: Color<string>;
            lightest: Color<string>;
            darker: Color<string>;
            darkest: Color<string>;
        };
        warning: {
            base: Color<string>;
            lighter: Color<string>;
            lightest: Color<string>;
            darker: Color<string>;
            darkest: Color<string>;
        };
        error: {
            base: Color<string>;
            lighter: Color<string>;
            lightest: Color<string>;
            darker: Color<string>;
            darkest: Color<string>;
        };
        light: {
            base: Color<string>;
            lighter: Color<string>;
            lightest: Color<string>;
            darker: Color<string>;
            darkest: Color<string>;
        };
        dark: {
            base: Color<string>;
            lighter: Color<string>;
            lightest: Color<string>;
            darker: Color<string>;
            darkest: Color<string>;
        };
        mid: {
            base: Color<string>;
            lighter: Color<string>;
            lightest: Color<string>;
            darker: Color<string>;
            darkest: Color<string>;
        };
    };
    font: {
        sansSerif: string;
        monospace: string;
    };
    breakpoints: Record<Breakpoint, number>;
    key: string;
    config: T;
};
export {};
