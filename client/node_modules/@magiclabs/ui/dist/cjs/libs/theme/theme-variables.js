'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var createMedia = require('./create-media.js');

function getThemeVariables(theme) {
    const createCSSVariableGroup = (name, rgba) => ({
        [`--mg__${name}`]: rgba.base.array().slice(0, 3).join(', '),
        [`--mg__${name}_lighter`]: rgba.lighter.array().slice(0, 3).join(', '),
        [`--mg__${name}_lightest`]: rgba.lightest.array().slice(0, 3).join(', '),
        [`--mg__${name}_darker`]: rgba.darker.array().slice(0, 3).join(', '),
        [`--mg__${name}_darkest`]: rgba.darkest.array().slice(0, 3).join(', '),
    });
    const variables = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, createCSSVariableGroup('primary', theme.rgba.primary)), createCSSVariableGroup('secondary', theme.rgba.secondary)), createCSSVariableGroup('tertiary', theme.rgba.tertiary)), createCSSVariableGroup('success', theme.rgba.success)), createCSSVariableGroup('warning', theme.rgba.warning)), createCSSVariableGroup('error', theme.rgba.error)), createCSSVariableGroup('light', theme.rgba.light)), createCSSVariableGroup('dark', theme.rgba.dark)), createCSSVariableGroup('mid', theme.rgba.mid)), { '--mg__font_sansSerif': theme.font.sansSerif, '--mg__font_monospace': theme.font.monospace });
    return {
        variables,
        toCSS() {
            /* eslint-disable prettier/prettier */
            // Map theme variables to `:root` CSS block
            const cssVars = Object.keys(variables).map((property) => `  ${property}:${variables[property]};`).join('\n');
            const cssVarsFormatted = ['/* [@magiclabs/ui] Root CSS Variables */', ':root {', cssVars, '}'].join('\n');
            // Convert media queries to CSS (via `@artsy/fresnel`)
            const mediaStyles = createMedia.createMedia(theme.breakpoints).createMediaStyle();
            const mediaStylesFormatted = ['/* [@artsy/fresnel] Media Queries */', mediaStyles].join('\n');
            /* eslint-enable prettier/prettier */
            // Put it all together with nice formatting!
            return [cssVarsFormatted, mediaStylesFormatted].join('\n\n');
        },
        applyToDocument() {
            // For each CSS variable, we'll map it to the current `Document`.
            for (const property of Object.keys(variables)) {
                document.documentElement.style.setProperty(property, variables[property]);
            }
            // FYI: We don't need to do anything with media queries from `@artsy/fresnel`
            // here, those are handled client-side by that package internally.
        },
    };
}

exports.getThemeVariables = getThemeVariables;
//# sourceMappingURL=theme-variables.js.map
