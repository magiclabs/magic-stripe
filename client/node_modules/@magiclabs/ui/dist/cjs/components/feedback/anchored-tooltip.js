'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../_virtual/_tslib.js');
var React = require('react');
var interactions = require('@react-aria/interactions');
var mergeProps = require('../../libs/merge-props.js');
var usableReact = require('usable-react');
var ssrProvider = require('../ssr-provider.js');
var tooltip = require('./tooltip/tooltip.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

/**
 * A high-level tooltip component. Under the hood, this component wires up the
 * supplied `anchor` with mouse/touch events to show or hide the tooltip.
 */
const AnchoredTooltip = (props) => {
    const { toggle, initialToggleValue, anchor: tooltipAnchor, delay } = props, otherProps = _tslib.__rest(props, ["toggle", "initialToggleValue", "anchor", "delay"]);
    const [focusWithin, setFocusWithinState] = React.useState(false);
    const [hover, setHoverState] = React.useState(false);
    const [showTooltip, setShowTooltip] = React.useState(toggle ? initialToggleValue : false);
    const anchorRef = React.useRef(null);
    const tooltipRef = React.useRef(null);
    const { isServer } = ssrProvider.useSSR();
    if (!isServer) {
        usableReact.useClickOutside([tooltipRef.current, anchorRef.current], () => setShowTooltip(false), []);
    }
    const { isFocusVisible } = interactions.useFocusVisible();
    const { focusWithinProps } = interactions.useFocusWithin({
        onFocusWithinChange: React.useCallback((isFocused) => setFocusWithinState(isFocused && isFocusVisible), [isFocusVisible]),
    });
    const { hoverProps } = interactions.useHover({
        onHoverChange: React.useCallback((isHovered) => setHoverState(isHovered), []),
    });
    React.useEffect(() => {
        setShowTooltip(focusWithin || hover);
    }, [focusWithin, hover]);
    const anchor = (React__default['default'].createElement("div", Object.assign({}, mergeProps.mergeProps(hoverProps, focusWithinProps), { ref: anchorRef }), tooltipAnchor));
    return React__default['default'].createElement(tooltip.Tooltip, Object.assign({ in: showTooltip, anchor: anchor, delay: toggle ? 0 : delay }, otherProps, { ref: tooltipRef }));
};

exports.AnchoredTooltip = AnchoredTooltip;
//# sourceMappingURL=anchored-tooltip.js.map
