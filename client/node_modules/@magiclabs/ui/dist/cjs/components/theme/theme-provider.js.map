{"version":3,"file":"theme-provider.js","sources":["../../../../src/components/theme/theme-provider.tsx"],"sourcesContent":["import React, { useContext, useMemo } from 'react';\nimport { Theme } from '../../libs/theme/theme-types';\nimport { getThemeVariables } from '../../libs/theme/theme-variables';\nimport { DEFAULT_THEME } from '../../libs/theme/default-theme';\nimport { classNames } from '../../libs/class-names';\nimport { ThemeContext } from './use-theme';\nimport { MediaProvider } from './media-provider';\nimport { useIsomorphicLayoutEffect } from '../../hooks/use-isomorphic-layout-effect';\n\ninterface ThemeProviderProps {\n  theme?: Theme;\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = (props) => {\n  const { theme = DEFAULT_THEME, children } = props;\n\n  const isRoot = !!useContext(ThemeContext).theme;\n  const { variables, applyToDocument } = getThemeVariables(theme);\n\n  useIsomorphicLayoutEffect(() => {\n    if (isRoot) applyToDocument();\n  }, [theme.key, isRoot]);\n\n  const themeVariablesMemoized = useMemo(() => variables, [theme.key]);\n  const themeMetadata = classNames([theme.isDarkTheme ? 'dark' : 'light', theme.isLowContrast && 'lowContrast']);\n  const themeCtx: ThemeContext = useMemo(() => ({ theme }), [theme.key]);\n\n  /*\n\n    NOTES\n    ~~~~~\n\n    We look for the following potential values in the `data-mg-theme` attribute:\n\n      - `light` | `dark`\n      - `lowContrast`\n\n    Our LESS mixins (`#mg.darkTheme`, `#mg.lightTheme`, and `#mg.lowContrast`)\n    leverage these values to apply theme-specific styles. Because the attribute\n    can be checked in any order, any of the following formats are considered\n    valid:\n\n      - `[data-mg-theme~='light'] [data-mg-theme~='lowContrast'] ...`\n      - `[data-mg-theme~='lowContrast'] [data-mg-theme~='light'] ...`\n\n    To get this flexibility, we have to nest the `data-mg-theme` attribute\n    at least twice!\n\n   */\n\n  const attributes = {\n    'data-mg-theme': themeMetadata,\n  };\n\n  return (\n    <ThemeContext.Provider value={themeCtx}>\n      <MediaProvider>\n        <div {...attributes}>\n          <div {...attributes} style={themeVariablesMemoized as any}>\n            {children}\n          </div>\n        </div>\n      </MediaProvider>\n    </ThemeContext.Provider>\n  );\n};\n\nThemeProvider.defaultProps = {};\n\nThemeProvider.displayName = 'ThemeProvider';\n"],"names":["DEFAULT_THEME","useContext","ThemeContext","getThemeVariables","useIsomorphicLayoutEffect","useMemo","classNames","React","MediaProvider"],"mappings":";;;;;;;;;;;;;;;;MAaa,aAAa,GAAiC,CAAC,KAAK;IAC/D,MAAM,EAAE,KAAK,GAAGA,0BAAa,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC;IAElD,MAAM,MAAM,GAAG,CAAC,CAACC,gBAAU,CAACC,qBAAY,CAAC,CAAC,KAAK,CAAC;IAChD,MAAM,EAAE,SAAS,EAAE,eAAe,EAAE,GAAGC,gCAAiB,CAAC,KAAK,CAAC,CAAC;IAEhEC,mDAAyB,CAAC;QACxB,IAAI,MAAM;YAAE,eAAe,EAAE,CAAC;KAC/B,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC;IAExB,MAAM,sBAAsB,GAAGC,aAAO,CAAC,MAAM,SAAS,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IACrE,MAAM,aAAa,GAAGC,qBAAU,CAAC,CAAC,KAAK,CAAC,WAAW,GAAG,MAAM,GAAG,OAAO,EAAE,KAAK,CAAC,aAAa,IAAI,aAAa,CAAC,CAAC,CAAC;IAC/G,MAAM,QAAQ,GAAiBD,aAAO,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;IAyBvE,MAAM,UAAU,GAAG;QACjB,eAAe,EAAE,aAAa;KAC/B,CAAC;IAEF,QACEE,wCAACL,qBAAY,CAAC,QAAQ,IAAC,KAAK,EAAE,QAAQ;QACpCK,wCAACC,2BAAa;YACZD,iEAAS,UAAU;gBACjBA,iEAAS,UAAU,IAAE,KAAK,EAAE,sBAA6B,KACtD,QAAQ,CACL,CACF,CACQ,CACM,EACxB;AACJ,EAAE;AAEF,aAAa,CAAC,YAAY,GAAG,EAAE,CAAC;AAEhC,aAAa,CAAC,WAAW,GAAG,eAAe;;;;"}