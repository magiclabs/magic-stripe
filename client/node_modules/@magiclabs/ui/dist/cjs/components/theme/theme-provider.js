'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var classNames = require('../../libs/class-names.js');
var defaultTheme = require('../../libs/theme/default-theme.js');
var themeVariables = require('../../libs/theme/theme-variables.js');
var useTheme = require('./use-theme.js');
var mediaProvider = require('./media-provider.js');
var useIsomorphicLayoutEffect = require('../../hooks/use-isomorphic-layout-effect.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

const ThemeProvider = (props) => {
    const { theme = defaultTheme.DEFAULT_THEME, children } = props;
    const isRoot = !!React.useContext(useTheme.ThemeContext).theme;
    const { variables, applyToDocument } = themeVariables.getThemeVariables(theme);
    useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
        if (isRoot)
            applyToDocument();
    }, [theme.key, isRoot]);
    const themeVariablesMemoized = React.useMemo(() => variables, [theme.key]);
    const themeMetadata = classNames.classNames([theme.isDarkTheme ? 'dark' : 'light', theme.isLowContrast && 'lowContrast']);
    const themeCtx = React.useMemo(() => ({ theme }), [theme.key]);
    /*
  
      NOTES
      ~~~~~
  
      We look for the following potential values in the `data-mg-theme` attribute:
  
        - `light` | `dark`
        - `lowContrast`
  
      Our LESS mixins (`#mg.darkTheme`, `#mg.lightTheme`, and `#mg.lowContrast`)
      leverage these values to apply theme-specific styles. Because the attribute
      can be checked in any order, any of the following formats are considered
      valid:
  
        - `[data-mg-theme~='light'] [data-mg-theme~='lowContrast'] ...`
        - `[data-mg-theme~='lowContrast'] [data-mg-theme~='light'] ...`
  
      To get this flexibility, we have to nest the `data-mg-theme` attribute
      at least twice!
  
     */
    const attributes = {
        'data-mg-theme': themeMetadata,
    };
    return (React__default['default'].createElement(useTheme.ThemeContext.Provider, { value: themeCtx },
        React__default['default'].createElement(mediaProvider.MediaProvider, null,
            React__default['default'].createElement("div", Object.assign({}, attributes),
                React__default['default'].createElement("div", Object.assign({}, attributes, { style: themeVariablesMemoized }), children)))));
};
ThemeProvider.defaultProps = {};
ThemeProvider.displayName = 'ThemeProvider';

exports.ThemeProvider = ThemeProvider;
//# sourceMappingURL=theme-provider.js.map
