'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var mergeProps = require('../../libs/merge-props.js');
require('color');
require('blueimp-md5');
var themeVariables = require('../../libs/theme/theme-variables.js');
var useTheme = require('./use-theme.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

/**
 * There are some design cases where `{color}_lighter` / `{color}_darker` semantics
 * should be reversed. Wrapping elements with this component will inverse the
 * expected theme semantics to support these edge cases.
 *
 * In other words, `{color}_lighter` will become `{color}_darker` and vice versa.
 *
 * Use with care.
 */
const InverseThemeSemantics = (props) => {
    const { active, children } = props;
    const theme = useTheme.useTheme({ inverseSemantics: true });
    const { variables: style } = themeVariables.getThemeVariables(theme);
    const wrappedChildren = React__default['default'].Children.map(children, (child) => {
        if (React__default['default'].isValidElement(child)) {
            return React__default['default'].cloneElement(child, mergeProps.mergeProps(Object.assign(Object.assign({}, child.props), { style })));
        }
        return child;
    });
    return active ? React__default['default'].createElement(React__default['default'].Fragment, null, wrappedChildren) : React__default['default'].createElement(React__default['default'].Fragment, null, children);
};
InverseThemeSemantics.defaultProps = {
    active: true,
};

exports.InverseThemeSemantics = InverseThemeSemantics;
//# sourceMappingURL=inverse-theme-semantics.js.map
