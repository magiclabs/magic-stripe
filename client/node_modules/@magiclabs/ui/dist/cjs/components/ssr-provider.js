'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var ssr = require('@react-aria/ssr');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

const canUseDOM = /* @__PURE__ */ Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);
const defaultSSRContext = { isServer: !canUseDOM, isClient: canUseDOM };
const SSRContext = /* @__PURE__ */ React.createContext(defaultSSRContext);
const SSRProvider = (props) => {
    const { children } = props;
    // Copy the default context so that strict equality
    // checks against the context value are falsey.
    const ctx = Object.assign({}, defaultSSRContext);
    return (React__default['default'].createElement(SSRContext.Provider, { value: ctx },
        React__default['default'].createElement(ssr.SSRProvider, null, children)));
};
function useSSR() {
    const ctx = React.useContext(SSRContext);
    const isInSSRContext = ctx !== defaultSSRContext;
    const [isHydrating, setIsHydrating] = React.useState(canUseDOM && isInSSRContext);
    if (canUseDOM) {
        React.useLayoutEffect(() => setIsHydrating(false), []);
    }
    return Object.assign(Object.assign({}, ctx), { isHydrating });
}

exports.SSRProvider = SSRProvider;
exports.useSSR = useSSR;
//# sourceMappingURL=ssr-provider.js.map
