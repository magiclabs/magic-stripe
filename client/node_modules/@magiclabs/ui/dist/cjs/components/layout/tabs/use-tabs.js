'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var usableReact = require('usable-react');
var tab = require('./tab/tab.js');
var tabList = require('./tab-list/tab-list.js');
var tabPanel = require('./tab-panel.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

function formatTabID(tablistID = 0, key) {
    return `mg-useTabs-tabID__${tablistID}-${key}`;
}
function formatPanelID(tablistID = 0, key) {
    return `mg-useTabs-panelID__${tablistID}-${key}`;
}
function useTabs(config) {
    const { id: tablistID, label: tablistLabel, size = 'md', orientation = 'horizontal', tabs } = config;
    const isMounted = usableReact.useIsMounted();
    const tabIDs = tabs.map(({ id }) => formatTabID(tablistID, id));
    const panelIDs = tabs.map(({ id }) => formatPanelID(tablistID, id));
    const [useAnimation, setUseAnimation] = React.useState(false);
    const [activeTabID, setActiveTabID] = React.useState(tabIDs[0]);
    const [indicatorAttributes, setIndicatorAttributes] = React.useState({
        width: 0,
        height: 0,
        offsetLeft: 0,
        offsetTop: 0,
    });
    // We save a `tabsRef` using the `tabsRefCallback` to get a current list of
    // React refs for each rendered tab button.
    const tabRefs = React.useRef({});
    const tabRefsCallback = React.useCallback((node) => {
        if (node)
            tabRefs.current[node.id] = node;
    }, []);
    /**
     * Updates the saved `width` and `offsetLeft` attributes to re-position the
     * selected tab indicator.
     */
    const updateAttributes = React.useCallback((tabID) => {
        const ref = tabRefs.current[tabID];
        if (ref && isMounted()) {
            setIndicatorAttributes({
                width: ref.getBoundingClientRect().width,
                height: ref.getBoundingClientRect().height,
                offsetLeft: ref.offsetLeft,
                offsetTop: ref.offsetTop,
            });
        }
    }, []);
    /**
     * Sets the active tab ID and updates the selected tab indicator attributes.
     */
    const activateTab = React.useCallback((tabID) => {
        if (isMounted()) {
            setActiveTabID(tabID);
            updateAttributes(tabID);
            setUseAnimation(true);
        }
    }, [updateAttributes]);
    // Set the initial selected tab indicator attributes.
    React.useEffect(() => {
        updateAttributes(activeTabID);
    }, []);
    // If the `window` resizes, we update the selected tab indicator attributes.
    const addEvent = usableReact.useDomEvent(window);
    addEvent('resize', () => {
        updateAttributes(activeTabID);
        setUseAnimation(true);
    });
    const tablist = (React__default['default'].createElement(tabList.TabList, { orientation: orientation, label: tablistLabel, indicatorAttributes: indicatorAttributes, useAnimation: useAnimation }, tabs.map(({ id, label, icon }, i) => {
        const isSelected = activeTabID === tabIDs[i];
        return (React__default['default'].createElement(tab.Tab, { id: tabIDs[i], panelID: panelIDs[i], allTabIDs: tabIDs, index: i, activateTab: activateTab, selected: isSelected, orientation: orientation, size: size, useAnimation: useAnimation, ref: tabRefsCallback, icon: icon, key: id }, label));
    })));
    const tabpanel = tabs.map(({ id, content }, i) => {
        return (React__default['default'].createElement(tabPanel.TabPanel, { id: panelIDs[i], tabID: tabIDs[i], selected: activeTabID === tabIDs[i], key: id }, content));
    });
    return { tablist, tabpanel };
}

exports.useTabs = useTabs;
//# sourceMappingURL=use-tabs.js.map
