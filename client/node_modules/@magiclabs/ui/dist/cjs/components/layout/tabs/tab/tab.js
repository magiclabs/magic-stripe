'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var interactions = require('@react-aria/interactions');
var classNames = require('../../../../libs/class-names.js');
var mergeProps = require('../../../../libs/merge-props.js');
require('color');
require('blueimp-md5');
require('@artsy/fresnel');
var useTheme = require('../../../theme/use-theme.js');
var forwardRefWrapper = require('../../../../libs/forward-ref-wrapper.js');
var iconBase = require('../../../icons/icon-base.js');
var composeRefs = require('@seznam/compose-react-refs');
require('../../../theme/inverse-theme-semantics.js');
require('../../../theme/theme-provider.js');
var spacer = require('../../spacer.js');
var tab = require('./tab.less.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var composeRefs__default = /*#__PURE__*/_interopDefaultLegacy(composeRefs);

function getPrevTabID(tabIDs, index) {
    const maxIndex = tabIDs.length - 1;
    const nextIndex = index <= 0 ? maxIndex : index - 1;
    return tabIDs[nextIndex];
}
function getNextTabID(tabIDs, index) {
    const maxIndex = tabIDs.length - 1;
    const nextIndex = index >= maxIndex ? 0 : index + 1;
    return tabIDs[nextIndex];
}
/**
 * Determines a _default_ color for icons nested in a `<Tab>`.
 */
function useIconColor(orientation, isHovered, isSelected) {
    const theme = useTheme.useTheme();
    if (orientation === 'horizontal') {
        if (isHovered && !isSelected)
            return theme.hex.primary.darker;
        if (isSelected)
            return theme.hex.secondary.base;
        return theme.hex.tertiary.base;
    }
    return theme.hex.tertiary.base;
}
const Tab = /* @__PURE__ */ forwardRefWrapper.forwardRefWrapper('Tab', (props, externalRef) => {
    const { id, panelID, allTabIDs, index, activateTab, selected, orientation, size, useAnimation, icon, children, } = props;
    const ref = React.useRef(null);
    React.useEffect(() => {
        // If the current tab is selected, give it focus
        if (selected && ref.current)
            ref.current.focus();
    }, [selected]);
    const handleClick = React.useCallback((e) => {
        e.preventDefault();
        activateTab(id);
    }, [id]);
    const handleKeyDown = React.useCallback((e) => {
        const prevTabID = getPrevTabID(allTabIDs, index);
        const nextTabID = getNextTabID(allTabIDs, index);
        const handleTabChange = (tabID) => {
            e.preventDefault();
            activateTab(tabID);
        };
        const handleArrowKey = (assertOrientation, tabID) => {
            if (orientation === assertOrientation) {
                handleTabChange(tabID);
            }
        };
        switch (e.key) {
            case 'ArrowRight':
                handleArrowKey('horizontal', nextTabID);
                break;
            case 'ArrowLeft':
                handleArrowKey('horizontal', prevTabID);
                break;
            case 'ArrowUp':
                handleArrowKey('vertical', prevTabID);
                break;
            case 'ArrowDown':
                handleArrowKey('vertical', nextTabID);
                break;
            case 'Home':
                handleTabChange(allTabIDs[0]);
                break;
            case 'End':
                handleTabChange(allTabIDs[allTabIDs.length - 1]);
                break;
        }
    }, [allTabIDs, index, orientation]);
    const { isHovered, hoverProps } = interactions.useHover({ isDisabled: false });
    const iconColor = useIconColor(orientation, isHovered, selected);
    return (React__default['default'].createElement(iconBase.IconColorProvider, { colorA: iconColor },
        React__default['default'].createElement("button", Object.assign({ className: classNames.classNames([
                tab.default.Tab,
                tab.default[`size_${size}`],
                selected && tab.default.selected,
                tab.default[orientation],
                useAnimation && tab.default.withAnimation,
            ]), id: id, type: "button", role: "tab", "aria-selected": selected, "aria-controls": panelID, tabIndex: selected ? 0 : -1 }, mergeProps.mergeProps(hoverProps, {
            onClick: handleClick,
            onKeyDown: handleKeyDown,
        }), { ref: composeRefs__default['default'](ref, externalRef) }),
            icon && (React__default['default'].createElement(React__default['default'].Fragment, null,
                React__default['default'].createElement(iconBase.Icon, { className: tab.default.icon, size: size === 'sm' ? 20 : 24, type: icon }),
                React__default['default'].createElement(spacer.Spacer, { size: 8 }))),
            children)));
});

exports.Tab = Tab;
//# sourceMappingURL=tab.js.map
