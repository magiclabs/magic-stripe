'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../_virtual/_tslib.js');
var React = require('react');
var classNames = require('../../libs/class-names.js');
var useTheme = require('../theme/use-theme.js');
var forwardRefWrapper = require('../../libs/forward-ref-wrapper.js');
var iconBase = require('./icon-base.less.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

const defaultIconColorContext = {
    colorA: 'var(--mg__Icon_colorA)',
    colorB: 'var(--mg__Icon_colorB)',
    opacityA: 1,
    opacityB: 1,
};
const IconColorContext = /* @__PURE__ */ React.createContext(defaultIconColorContext);
/**
 * Creates a React context that overrides the fallback
 * color properties of icons rendered within.
 */
const IconColorProvider = (props) => {
    const { children } = props, otherProps = _tslib.__rest(props, ["children"]);
    return (React__default['default'].createElement(IconColorContext.Provider, { value: Object.assign(Object.assign({}, defaultIconColorContext), otherProps) }, children));
};
const Icon = /* @__PURE__ */ forwardRefWrapper.forwardRefWrapper('Icon', { inline: true }, (props, externalRef) => {
    var _a, _b;
    const { type, color, opacity, size, disabled, inline, className } = props, otherProps = _tslib.__rest(props, ["type", "color", "opacity", "size", "disabled", "inline", "className"]);
    const theme = useTheme.useTheme();
    const [viewboxX, viewboxY, viewboxWidth, viewboxHeight] = type.viewbox;
    const propWidth = typeof size === 'number' ? size : size === null || size === void 0 ? void 0 : size.width;
    const propHeight = typeof size === 'number' ? size : size === null || size === void 0 ? void 0 : size.height;
    const { width, height } = useAspectRatio(type.viewbox, propWidth, propHeight);
    // --- Color/opacity values
    const currentColor = (_a = color !== null && color !== void 0 ? color : useDefaultValue(theme, type.color)) !== null && _a !== void 0 ? _a : React.useContext(IconColorContext).colorA;
    const currentOpacity = (_b = opacity !== null && opacity !== void 0 ? opacity : useDefaultValue(theme, type.opacity)) !== null && _b !== void 0 ? _b : React.useContext(IconColorContext).opacityA;
    return (React__default['default'].createElement("span", Object.assign({ className: classNames.classNames([iconBase.default.IconBase, inline && iconBase.default.inline, className]), "aria-hidden": "true" }, otherProps, { ref: externalRef }),
        React__default['default'].createElement("svg", { width: typeof size === 'number' ? size : width, height: typeof size === 'number' ? size : height, viewBox: `${viewboxX} ${viewboxY} ${viewboxWidth} ${viewboxHeight}`, fill: "none", stroke: "none", xmlns: "http://www.w3.org/2000/svg" },
            React__default['default'].createElement(type.SVGContents, { fill: useSVGProps('fill', currentColor, currentOpacity), stroke: useSVGProps('stroke', currentColor, currentOpacity), theme: theme }))));
});
const DuotoneIcon = /* @__PURE__ */ forwardRefWrapper.forwardRefWrapper('DuotoneIcon', { inline: true }, (props, externalRef) => {
    var _a, _b, _c, _d;
    const { type, colorA, colorB, opacityA, opacityB, size, disabled, inline, className } = props, otherProps = _tslib.__rest(props, ["type", "colorA", "colorB", "opacityA", "opacityB", "size", "disabled", "inline", "className"]);
    const theme = useTheme.useTheme();
    const [viewboxX, viewboxY, viewboxWidth, viewboxHeight] = type.viewbox;
    const propWidth = typeof size === 'number' ? size : size === null || size === void 0 ? void 0 : size.width;
    const propHeight = typeof size === 'number' ? size : size === null || size === void 0 ? void 0 : size.height;
    const { width, height } = useAspectRatio(type.viewbox, propWidth, propHeight);
    // --- "A" color/opacity values
    const currentColorA = (_a = colorA !== null && colorA !== void 0 ? colorA : useDefaultValue(theme, type.colorA)) !== null && _a !== void 0 ? _a : React.useContext(IconColorContext).colorA;
    const currentOpacityA = (_b = opacityA !== null && opacityA !== void 0 ? opacityA : useDefaultValue(theme, type.opacityA)) !== null && _b !== void 0 ? _b : React.useContext(IconColorContext).opacityA;
    // --- "B" color/opacity values
    const currentColorB = (_c = colorB !== null && colorB !== void 0 ? colorB : useDefaultValue(theme, type.colorB)) !== null && _c !== void 0 ? _c : React.useContext(IconColorContext).colorB;
    const currentOpacityB = (_d = opacityB !== null && opacityB !== void 0 ? opacityB : useDefaultValue(theme, type.opacityB)) !== null && _d !== void 0 ? _d : React.useContext(IconColorContext).opacityB;
    return (React__default['default'].createElement("span", Object.assign({ className: classNames.classNames([iconBase.default.IconBase, inline && iconBase.default.inline, className]), "aria-hidden": "true" }, otherProps, { ref: externalRef }),
        React__default['default'].createElement("svg", { width: typeof size === 'number' ? size : width, height: typeof size === 'number' ? size : height, viewBox: `${viewboxX} ${viewboxY} ${viewboxWidth} ${viewboxHeight}`, fill: "none", stroke: "none", xmlns: "http://www.w3.org/2000/svg" },
            React__default['default'].createElement(type.SVGContents, { fillA: useSVGProps('fill', currentColorA, currentOpacityA), fillB: useSVGProps('fill', currentColorB, currentOpacityB), strokeA: useSVGProps('stroke', currentColorA, currentOpacityA), strokeB: useSVGProps('stroke', currentColorB, currentOpacityB), theme: theme }))));
});
// --- Utilities ------------------------------------------------------------ //
/**
 * Returns a memoized value representing
 * the default icon color or opacity.
 */
function useDefaultValue(theme, resolver) {
    return React.useMemo(() => (typeof resolver === 'function' ? resolver(theme) : resolver), [theme === null || theme === void 0 ? void 0 : theme.key]);
}
function useSVGProps(property, color, opacity) {
    return React.useMemo(() => ({ [property]: color, [`${property}Opacity`]: opacity }), [color, opacity]);
}
/**
 * From the given `viewbox`, calculates a
 * width and height value that respects the
 * icon's aspect ratio.
 */
function useAspectRatio(viewbox, propWidth, propHeight) {
    const viewboxWidth = viewbox[2];
    const viewboxHeight = viewbox[3];
    let width = Math.ceil(propWidth !== null && propWidth !== void 0 ? propWidth : viewboxWidth);
    let height = Math.ceil(propHeight !== null && propHeight !== void 0 ? propHeight : viewboxHeight);
    const aspectRatio = viewboxWidth / viewboxHeight;
    if (!!propWidth && !propHeight)
        height = Math.ceil(width / aspectRatio);
    if (!!propHeight && !propWidth)
        width = Math.ceil(height * aspectRatio);
    return { width, height };
}

exports.DuotoneIcon = DuotoneIcon;
exports.Icon = Icon;
exports.IconColorProvider = IconColorProvider;
//# sourceMappingURL=icon-base.js.map
