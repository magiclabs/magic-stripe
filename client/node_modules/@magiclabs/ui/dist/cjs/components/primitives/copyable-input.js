'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../_virtual/_tslib.js');
var React = require('react');
var interactions = require('@react-aria/interactions');
require('@react-aria/focus');
require('framer-motion');
var mergeProps = require('../../libs/merge-props.js');
require('color');
require('blueimp-md5');
require('@artsy/fresnel');
var forwardRefWrapper = require('../../libs/forward-ref-wrapper.js');
var iconBase = require('../icons/icon-base.js');
var copy = require('../icons/monochrome/copy.js');
require('usable-react');
var composeRefs = require('@seznam/compose-react-refs');
require('../theme/inverse-theme-semantics.js');
require('@react-aria/ssr');
require('../theme/theme-provider.js');
require('react-dom');
require('watch-resize');
var textButton = require('./text-button/text-button.js');
var input = require('./input/input.js');
require('./radio/radio.js');
require('../feedback/alert/alert.js');
require('../feedback/toast/toast-provider/toast-provider.js');
require('react-popper-2');
var anchoredTooltip = require('../feedback/anchored-tooltip.js');
var useClipboard = require('../../hooks/use-clipboard.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var composeRefs__default = /*#__PURE__*/_interopDefaultLegacy(composeRefs);

const CopyableInput = /* @__PURE__ */ forwardRefWrapper.forwardRefWrapper('CopyableInput', (props, externalRef) => {
    const inputRef = React.useRef(null);
    const [copyTooltipText, setCopyTooltipText] = React.useState('Copy');
    const { value, defaultValue, onCopy, size } = props, otherProps = _tslib.__rest(props, ["value", "defaultValue", "onCopy", "size"]);
    React.useEffect(() => {
        if (copyTooltipText !== 'Copy') {
            const timeout = setTimeout(() => setCopyTooltipText('Copy'), 1000);
            return () => clearTimeout(timeout);
        }
        return undefined;
    }, [copyTooltipText]);
    const { copy: copy$1, ref: clipboardRef } = useClipboard.useClipboard(() => {
        setCopyTooltipText('Copied!');
        if (onCopy)
            onCopy();
    });
    const { pressProps } = interactions.usePress({ onPress: copy$1 });
    const suffix = (React__default['default'].createElement(anchoredTooltip.AnchoredTooltip, { toggle: true, delay: 0, anchor: React__default['default'].createElement(textButton.TextButton, Object.assign({ size: size === 'lg' ? 'md' : size }, mergeProps.mergeProps(pressProps)),
            React__default['default'].createElement(iconBase.Icon, { type: copy.Copy })) },
        React__default['default'].createElement("p", { style: { textAlign: 'center' } }, copyTooltipText)));
    return (React__default['default'].createElement(input.Input, Object.assign({ value: value, defaultValue: defaultValue, suffix: suffix, size: size }, otherProps, { ref: composeRefs__default['default'](inputRef, externalRef, clipboardRef) })));
});

exports.CopyableInput = CopyableInput;
//# sourceMappingURL=copyable-input.js.map
