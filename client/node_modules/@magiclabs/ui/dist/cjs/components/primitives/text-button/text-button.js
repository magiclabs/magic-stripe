'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../_virtual/_tslib.js');
var React = require('react');
var interactions = require('@react-aria/interactions');
var focus = require('@react-aria/focus');
var framerMotion = require('framer-motion');
var classNames = require('../../../libs/class-names.js');
var mergeProps = require('../../../libs/merge-props.js');
require('color');
require('blueimp-md5');
require('@artsy/fresnel');
var useTheme = require('../../theme/use-theme.js');
var forwardRefWrapper = require('../../../libs/forward-ref-wrapper.js');
var iconBase = require('../../icons/icon-base.js');
require('usable-react');
require('@seznam/compose-react-refs');
var inverseThemeSemantics = require('../../theme/inverse-theme-semantics.js');
require('@react-aria/ssr');
require('../../theme/theme-provider.js');
var spacer = require('../../layout/spacer.js');
var transitions = require('../../../hooks/transitions.js');
require('react-dom');
require('watch-resize');
var textButton = require('./text-button.less.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

/**
 * Determines a _default_ color for icons nested in a `<TextButton>`.
 */
function useIconColor(baseColor, inverseSemantics, isHovered, isPressed) {
    const theme = useTheme.useTheme({ inverseSemantics });
    let tone = 'base';
    // ":hover" state
    if (isHovered) {
        tone = theme.isLightTheme ? 'lighter' : 'darker';
    }
    // ":active" state
    if (isPressed) {
        tone = theme.isLightTheme ? 'darkest' : 'lightest';
    }
    return baseColor ? theme.hex[baseColor][tone] : undefined;
}
const TextButton = /* @__PURE__ */ forwardRefWrapper.forwardRefWrapper('TextButton', { size: 'md', color: 'primary' }, (props, externalRef) => {
    const { onPress, className, disabled, size, color, leadingIcon, trailingIcon, children } = props, otherProps = _tslib.__rest(props, ["onPress", "className", "disabled", "size", "color", "leadingIcon", "trailingIcon", "children"]);
    const { isFocusVisible, focusProps } = focus.useFocusRing();
    const { isHovered, hoverProps } = interactions.useHover({ isDisabled: disabled });
    const { isPressed, pressProps } = interactions.usePress({ onPress, isDisabled: disabled });
    const getScaleProps = transitions.useScaleIn();
    const inverseSemantics = color === 'secondary';
    const iconColor = useIconColor(color, inverseSemantics, isHovered, isPressed);
    return (React__default['default'].createElement(iconBase.IconColorProvider, { colorA: iconColor },
        React__default['default'].createElement(inverseThemeSemantics.InverseThemeSemantics, { active: inverseSemantics },
            React__default['default'].createElement("button", Object.assign({ className: classNames.classNames([
                    className,
                    textButton.default.TextButton,
                    textButton.default[size],
                    textButton.default[`size_${size}`],
                    textButton.default[`color_${color}`],
                    disabled && textButton.default.disabled,
                    isPressed && textButton.default.active,
                ]), type: "button", disabled: disabled, "aria-disabled": disabled }, mergeProps.mergeProps(pressProps, focusProps, hoverProps, otherProps), { ref: externalRef }),
                React__default['default'].createElement(framerMotion.AnimatePresence, null, isFocusVisible && (React__default['default'].createElement(framerMotion.motion.span, Object.assign({ "aria-hidden": "true", className: textButton.default.focusRing }, getScaleProps(1.05))))),
                leadingIcon && (React__default['default'].createElement(React__default['default'].Fragment, null,
                    React__default['default'].createElement(iconBase.Icon, { size: size === 'sm' ? 20 : 24, type: leadingIcon }),
                    React__default['default'].createElement(spacer.Spacer, { size: 8 }))),
                React__default['default'].createElement("span", { className: textButton.default.buttonLabel }, children),
                trailingIcon && (React__default['default'].createElement(React__default['default'].Fragment, null,
                    React__default['default'].createElement(spacer.Spacer, { size: 8 }),
                    React__default['default'].createElement(iconBase.Icon, { size: size === 'sm' ? 20 : 24, type: trailingIcon })))))));
});

exports.TextButton = TextButton;
//# sourceMappingURL=text-button.js.map
