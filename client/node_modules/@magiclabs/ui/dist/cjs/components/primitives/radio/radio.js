'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../_virtual/_tslib.js');
var React = require('react');
var interactions = require('@react-aria/interactions');
var focus = require('@react-aria/focus');
var framerMotion = require('framer-motion');
var classNames = require('../../../libs/class-names.js');
var mergeProps = require('../../../libs/merge-props.js');
require('color');
require('blueimp-md5');
require('@artsy/fresnel');
var forwardRefWrapper = require('../../../libs/forward-ref-wrapper.js');
require('usable-react');
var composeRefs = require('@seznam/compose-react-refs');
require('../../theme/inverse-theme-semantics.js');
require('@react-aria/ssr');
require('../../theme/theme-provider.js');
var spacer = require('../../layout/spacer.js');
var transitions = require('../../../hooks/transitions.js');
require('react-dom');
require('watch-resize');
var radio = require('./radio.less.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var composeRefs__default = /*#__PURE__*/_interopDefaultLegacy(composeRefs);

/* eslint-disable jsx-a11y/label-has-associated-control */
const RadioGroupContext = /* @__PURE__ */ React.createContext({});
const RadioGroup = (props) => {
    const { name, selectedValue, onChange, children } = props;
    return React__default['default'].createElement(RadioGroupContext.Provider, { value: { name, selectedValue, onChange } }, children);
};
RadioGroup.defaultProps = {
    onChange: () => { },
};
RadioGroup.displayName = 'RadioGroup';
const Radio = /* @__PURE__ */ forwardRefWrapper.forwardRefWrapper('Radio', { color: 'primary' }, (props, externalRef) => {
    const { onPress, disabled, checked, label, color, value } = props, otherProps = _tslib.__rest(props, ["onPress", "disabled", "checked", "label", "color", "value"]);
    const inputRef = React.useRef(null);
    const { isFocusVisible, focusProps } = focus.useFocusRing();
    const { pressProps, isPressed } = interactions.usePress({ onPress, isDisabled: disabled });
    const { isHovered, hoverProps } = interactions.useHover({ isDisabled: disabled });
    const getScaleInProps = transitions.useScaleIn();
    const getScaleProps = transitions.useScale();
    const { name, selectedValue, onChange } = React.useContext(RadioGroupContext);
    const isChecked = checked ||
        (Array.isArray(value)
            ? value.every((i) => i === selectedValue)
            : selectedValue === value && typeof value !== 'undefined' && value !== null);
    return (React__default['default'].createElement("label", { className: radio.default.Radio },
        React__default['default'].createElement("input", Object.assign({ type: "radio", disabled: disabled, "aria-disabled": disabled, tabIndex: 0, value: value, checked: isChecked }, mergeProps.mergeProps({ name, onChange }, pressProps, focusProps, hoverProps, otherProps), { ref: composeRefs__default['default'](inputRef, externalRef) })),
        React__default['default'].createElement("span", { className: classNames.classNames([
                radio.default.radiomark,
                radio.default[`color_${color}`],
                disabled && radio.default.disabled,
                isChecked && radio.default.checked,
                isFocusVisible && radio.default.focusVisible,
                isPressed && radio.default.active,
                isHovered && radio.default.hover,
            ]), "aria-hidden": "true" },
            React__default['default'].createElement(framerMotion.AnimatePresence, null, isFocusVisible && (React__default['default'].createElement(framerMotion.motion.span, Object.assign({ "aria-hidden": "true", className: radio.default.focusRing }, getScaleInProps(1.1))))),
            React__default['default'].createElement(framerMotion.AnimatePresence, { initial: false }, isChecked && (React__default['default'].createElement(framerMotion.motion.span, Object.assign({ className: radio.default.radiomarkIcon }, getScaleProps(0.7), { key: 0 }),
                React__default['default'].createElement("span", null))))),
        label && (React__default['default'].createElement(React__default['default'].Fragment, null,
            React__default['default'].createElement(spacer.Spacer, { size: 8, inline: true }),
            React__default['default'].createElement("span", null, label)))));
});

exports.Radio = Radio;
exports.RadioGroup = RadioGroup;
//# sourceMappingURL=radio.js.map
