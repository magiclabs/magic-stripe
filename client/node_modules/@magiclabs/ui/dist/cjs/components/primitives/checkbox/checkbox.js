'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../_virtual/_tslib.js');
var React = require('react');
var interactions = require('@react-aria/interactions');
var focus = require('@react-aria/focus');
var framerMotion = require('framer-motion');
var classNames = require('../../../libs/class-names.js');
var mergeProps = require('../../../libs/merge-props.js');
require('color');
require('blueimp-md5');
require('@artsy/fresnel');
var forwardRefWrapper = require('../../../libs/forward-ref-wrapper.js');
var iconBase = require('../../icons/icon-base.js');
require('usable-react');
var composeRefs = require('@seznam/compose-react-refs');
require('../../theme/inverse-theme-semantics.js');
require('@react-aria/ssr');
require('../../theme/theme-provider.js');
var spacer = require('../../layout/spacer.js');
var transitions = require('../../../hooks/transitions.js');
require('react-dom');
require('watch-resize');
var checkbox = require('./checkbox.less.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var composeRefs__default = /*#__PURE__*/_interopDefaultLegacy(composeRefs);

/* eslint-disable jsx-a11y/label-has-associated-control */
const CheckmarkIcon = {
    SVGContents: ({ fill }) => {
        return (React__default['default'].createElement("path", Object.assign({ d: "M12.9374 0.446429L13.2945 0.848214C13.5177 1.02679 13.5177 1.38393 13.2945 1.60714L5.25879 9.59822C5.03558 9.77679 4.67843 9.77679 4.49986 9.59822L0.660575 5.71429C0.43736 5.49107 0.43736 5.17857 0.660575 4.95536L1.01772 4.59821C1.24093 4.375 1.59807 4.375 1.77665 4.59821L4.857 7.67857L12.1784 0.446429C12.357 0.267857 12.7141 0.267857 12.9374 0.446429Z" }, fill)));
    },
    viewbox: [0, 0, 14, 10],
    color: (theme) => theme.hex.secondary.base,
};
const Checkbox = /* @__PURE__ */ forwardRefWrapper.forwardRefWrapper('Checkbox', { color: 'primary' }, (props, externalRef) => {
    const { onPress, disabled, checked, label, indeterminate, color } = props, otherProps = _tslib.__rest(props, ["onPress", "disabled", "checked", "label", "indeterminate", "color"]);
    const inputRef = React.useRef(null);
    const { isFocusVisible, focusProps } = focus.useFocusRing();
    const { pressProps, isPressed } = interactions.usePress({ onPress, isDisabled: disabled });
    const { isHovered, hoverProps } = interactions.useHover({ isDisabled: disabled });
    const getScaleInProps = transitions.useScaleIn();
    const getScaleProps = transitions.useScale();
    React.useEffect(() => {
        if (inputRef.current) {
            inputRef.current.indeterminate = !!indeterminate;
        }
    }, [indeterminate]);
    return (React__default['default'].createElement("label", { className: checkbox.default.Checkbox },
        React__default['default'].createElement("input", Object.assign({ type: "checkbox", disabled: disabled, "aria-disabled": disabled, checked: checked, tabIndex: 0 }, mergeProps.mergeProps(pressProps, focusProps, hoverProps, otherProps), { ref: composeRefs__default['default'](inputRef, externalRef) })),
        React__default['default'].createElement("span", { className: classNames.classNames([
                checkbox.default.checkmark,
                checkbox.default[`color_${color}`],
                disabled && checkbox.default.disabled,
                checked && checkbox.default.checked,
                isFocusVisible && checkbox.default.focusVisible,
                isPressed && checkbox.default.active,
                isHovered && checkbox.default.hover,
                indeterminate && checkbox.default.indeterminate,
            ]), "aria-hidden": "true" },
            React__default['default'].createElement(framerMotion.AnimatePresence, null, isFocusVisible && (React__default['default'].createElement(framerMotion.motion.span, Object.assign({ "aria-hidden": "true", className: checkbox.default.focusRing }, getScaleInProps(1.1))))),
            React__default['default'].createElement(framerMotion.AnimatePresence, { initial: false },
                checked && !indeterminate && (React__default['default'].createElement(framerMotion.motion.span, Object.assign({ className: checkbox.default.checkmarkIcon }, getScaleProps(0.7), { key: 0 }),
                    React__default['default'].createElement(iconBase.Icon, { size: 14, type: CheckmarkIcon }))),
                checked && !!indeterminate && (React__default['default'].createElement(framerMotion.motion.span, Object.assign({ className: checkbox.default.indeterminancyIcon }, getScaleProps(0.7), { key: 1 }),
                    React__default['default'].createElement("span", null))))),
        label && (React__default['default'].createElement(React__default['default'].Fragment, null,
            React__default['default'].createElement(spacer.Spacer, { size: 8, inline: true }),
            React__default['default'].createElement("span", null, label)))));
});

exports.Checkbox = Checkbox;
//# sourceMappingURL=checkbox.js.map
