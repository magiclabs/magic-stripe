{"version":3,"file":"copyable-input.js","sources":["../../../../src/components/primitives/copyable-input.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport composeRefs from '@seznam/compose-react-refs';\nimport { usePress } from '@react-aria/interactions';\nimport { Input } from './input/input';\nimport { Icon, MonochromeIcons } from '../icons';\nimport { AnchoredTooltip } from '../feedback';\nimport { useClipboard } from '../../hooks/use-clipboard';\nimport { forwardRefWrapper } from '../../libs/forward-ref-wrapper';\nimport { TextButton } from '.';\nimport { mergeProps } from '../../libs/merge-props';\n\ninterface CopyInputProps extends React.ComponentProps<typeof Input> {\n  onCopy?: () => void;\n}\n\nexport const CopyableInput = /* @__PURE__ */ forwardRefWrapper<HTMLInputElement, CopyInputProps>(\n  'CopyableInput',\n\n  (props, externalRef) => {\n    const inputRef = useRef<HTMLInputElement | null>(null);\n    const [copyTooltipText, setCopyTooltipText] = useState('Copy');\n\n    const { value, defaultValue, onCopy, size, ...otherProps } = props;\n\n    useEffect(() => {\n      if (copyTooltipText !== 'Copy') {\n        const timeout = setTimeout(() => setCopyTooltipText('Copy'), 1000);\n        return () => clearTimeout(timeout);\n      }\n\n      return undefined;\n    }, [copyTooltipText]);\n\n    const { copy, ref: clipboardRef } = useClipboard(() => {\n      setCopyTooltipText('Copied!');\n      if (onCopy) onCopy();\n    });\n\n    const { pressProps } = usePress({ onPress: copy });\n\n    const suffix = (\n      <AnchoredTooltip\n        toggle\n        delay={0}\n        anchor={\n          <TextButton size={size === 'lg' ? 'md' : size} {...mergeProps(pressProps)}>\n            <Icon type={MonochromeIcons.Copy} />\n          </TextButton>\n        }\n      >\n        <p style={{ textAlign: 'center' }}>{copyTooltipText}</p>\n      </AnchoredTooltip>\n    );\n\n    return (\n      <Input\n        value={value}\n        defaultValue={defaultValue}\n        suffix={suffix}\n        size={size}\n        {...otherProps}\n        ref={composeRefs(inputRef, externalRef, clipboardRef)}\n      />\n    );\n  },\n);\n"],"names":["forwardRefWrapper","useRef","useState","useEffect","copy","useClipboard","usePress","React","AnchoredTooltip","TextButton","mergeProps","Icon","MonochromeIcons.Copy","Input","composeRefs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAea,aAAa,mBAAmBA,mCAAiB,CAC5D,eAAe,EAEf,CAAC,KAAK,EAAE,WAAW;IACjB,MAAM,QAAQ,GAAGC,YAAM,CAA0B,IAAI,CAAC,CAAC;IACvD,MAAM,CAAC,eAAe,EAAE,kBAAkB,CAAC,GAAGC,cAAQ,CAAC,MAAM,CAAC,CAAC;IAE/D,MAAM,EAAE,KAAK,EAAE,YAAY,EAAE,MAAM,EAAE,IAAI,KAAoB,KAAK,EAApB,UAAU,iBAAK,KAAK,EAA5D,2CAAoD,CAAQ,CAAC;IAEnEC,eAAS,CAAC;QACR,IAAI,eAAe,KAAK,MAAM,EAAE;YAC9B,MAAM,OAAO,GAAG,UAAU,CAAC,MAAM,kBAAkB,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;YACnE,OAAO,MAAM,YAAY,CAAC,OAAO,CAAC,CAAC;SACpC;QAED,OAAO,SAAS,CAAC;KAClB,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC;IAEtB,MAAM,QAAEC,MAAI,EAAE,GAAG,EAAE,YAAY,EAAE,GAAGC,yBAAY,CAAC;QAC/C,kBAAkB,CAAC,SAAS,CAAC,CAAC;QAC9B,IAAI,MAAM;YAAE,MAAM,EAAE,CAAC;KACtB,CAAC,CAAC;IAEH,MAAM,EAAE,UAAU,EAAE,GAAGC,qBAAQ,CAAC,EAAE,OAAO,EAAEF,MAAI,EAAE,CAAC,CAAC;IAEnD,MAAM,MAAM,IACVG,wCAACC,+BAAe,IACd,MAAM,QACN,KAAK,EAAE,CAAC,EACR,MAAM,EACJD,wCAACE,qBAAU,kBAAC,IAAI,EAAE,IAAI,KAAK,IAAI,GAAG,IAAI,GAAG,IAAI,IAAMC,qBAAU,CAAC,UAAU,CAAC;YACvEH,wCAACI,aAAI,IAAC,IAAI,EAAEC,SAAoB,GAAI,CACzB;QAGfL,+CAAG,KAAK,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,IAAG,eAAe,CAAK,CACxC,CACnB,CAAC;IAEF,QACEA,wCAACM,WAAK,kBACJ,KAAK,EAAE,KAAK,EACZ,YAAY,EAAE,YAAY,EAC1B,MAAM,EAAE,MAAM,EACd,IAAI,EAAE,IAAI,IACN,UAAU,IACd,GAAG,EAAEC,+BAAW,CAAC,QAAQ,EAAE,WAAW,EAAE,YAAY,CAAC,IACrD,EACF;AACJ,CAAC;;;;"}