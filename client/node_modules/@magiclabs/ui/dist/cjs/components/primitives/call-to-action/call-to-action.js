'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../_virtual/_tslib.js');
var React = require('react');
var interactions = require('@react-aria/interactions');
var focus = require('@react-aria/focus');
var framerMotion = require('framer-motion');
var classNames = require('../../../libs/class-names.js');
var mergeProps = require('../../../libs/merge-props.js');
require('color');
require('blueimp-md5');
require('@artsy/fresnel');
var useTheme = require('../../theme/use-theme.js');
var forwardRefWrapper = require('../../../libs/forward-ref-wrapper.js');
var iconBase = require('../../icons/icon-base.js');
require('usable-react');
require('@seznam/compose-react-refs');
var inverseThemeSemantics = require('../../theme/inverse-theme-semantics.js');
require('@react-aria/ssr');
require('../../theme/theme-provider.js');
var spacer = require('../../layout/spacer.js');
var transitions = require('../../../hooks/transitions.js');
require('react-dom');
require('watch-resize');
var callToAction = require('./call-to-action.less.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

/**
 * Determines a _default_ color for icons nested in a `<CallToAction>`.
 */
function useIconColor(baseColor, inverseSemantics, outline) {
    const theme = useTheme.useTheme({ inverseSemantics });
    let iconBaseColor;
    switch (baseColor) {
        case 'primary':
            iconBaseColor = outline ? 'tertiary' : 'secondary';
            break;
        case 'secondary':
            iconBaseColor = outline ? 'secondary' : 'tertiary';
            break;
        case 'tertiary':
            iconBaseColor = outline ? 'tertiary' : 'secondary';
            break;
        case 'error':
            iconBaseColor = outline ? 'error' : 'secondary';
            break;
        case 'warning':
            iconBaseColor = outline ? 'warning' : 'secondary';
            break;
        case 'success':
            iconBaseColor = outline ? 'success' : 'secondary';
            break;
        default:
            iconBaseColor = undefined;
    }
    return iconBaseColor ? theme.hex[iconBaseColor].base : undefined;
}
const CallToAction = /* @__PURE__ */ forwardRefWrapper.forwardRefWrapper('CallToAction', { color: 'primary', size: 'md' }, (props, externalRef) => {
    const { children, onPress, className, disabled, outline, color, size, leadingIcon, trailingIcon } = props, otherProps = _tslib.__rest(props, ["children", "onPress", "className", "disabled", "outline", "color", "size", "leadingIcon", "trailingIcon"]);
    const { isFocusVisible, focusProps } = focus.useFocusRing();
    const { pressProps, isPressed } = interactions.usePress({ onPress, isDisabled: disabled });
    const getScaleProps = transitions.useScaleIn();
    const inverseSemantics = (color === 'secondary' && outline) || (color === 'tertiary' && !outline);
    const iconColor = useIconColor(color, inverseSemantics, outline);
    return (React__default['default'].createElement(iconBase.IconColorProvider, { colorA: iconColor },
        React__default['default'].createElement(inverseThemeSemantics.InverseThemeSemantics, { active: inverseSemantics },
            React__default['default'].createElement("button", Object.assign({ className: classNames.classNames([
                    className,
                    callToAction.default.CallToAction,
                    callToAction.default[`size_${size}`],
                    callToAction.default[`color_${color}`],
                    disabled && callToAction.default.disabled,
                    outline && callToAction.default.outline,
                    isPressed && callToAction.default.active,
                ]), type: "button", disabled: disabled, "aria-disabled": disabled }, mergeProps.mergeProps(pressProps, focusProps, otherProps), { ref: externalRef }),
                React__default['default'].createElement(framerMotion.AnimatePresence, null, isFocusVisible && (React__default['default'].createElement(framerMotion.motion.span, Object.assign({ "aria-hidden": "true", className: callToAction.default.focusRing }, getScaleProps(1.05))))),
                leadingIcon && (React__default['default'].createElement(React__default['default'].Fragment, null,
                    React__default['default'].createElement(iconBase.Icon, { size: size === 'sm' ? 20 : 24, type: leadingIcon }),
                    React__default['default'].createElement(spacer.Spacer, { size: 8 }))),
                React__default['default'].createElement("span", { className: callToAction.default.buttonLabel }, children),
                trailingIcon && (React__default['default'].createElement(React__default['default'].Fragment, null,
                    React__default['default'].createElement(spacer.Spacer, { size: 8 }),
                    React__default['default'].createElement(iconBase.Icon, { size: size === 'sm' ? 20 : 24, type: trailingIcon })))))));
});

exports.CallToAction = CallToAction;
//# sourceMappingURL=call-to-action.js.map
