/*
  StorybookJS is lacking some official support for TypeScript,
  so this file fills in some of the missing pieces.

  Sourced from:
    https://gist.github.com/rabelloo/bae0397d6a331d939eacdb3e8849220f
 */

import React, { ReactElement } from 'react';
import {
  ArgType as BaseArgType,
  Args as DefaultArgs,
  StoryContext,
  BaseDecorators,
  Parameters as DefaultParameters,
} from '@storybook/addons';
import type { Meta as BaseMeta, Story as BaseStory } from '@storybook/react/types-6-0';
import { Control, Table } from './storybook-controls';

type ExtendedParameters = DefaultParameters & {
  // Custom typings of `docs` parameters are inferred from here:
  // https://storybook.js.org/docs/react/writing-docs/doc-blocks
  docs?: {
    description?: {
      component?: string;
      story?: string;
    };
    source?: {
      type?: 'auto' | 'dynamic' | 'code'; // 'auto' is default
      code?: string;
    };
  };

  // Custom typings to support `storybook-addon-designs`
  design?: {
    type: 'figma';
    url: string;
  };
};

type ExtendedBaseStory<Args> = Omit<BaseStory<Args>, 'argTypes' | 'parameters'>;
type ExtendedBaseMeta<Args> = Omit<BaseMeta<Args>, 'argTypes' | 'parameters'>;

interface ArgType<T> extends BaseArgType {
  control?: Control<T> | Control<T>['type'];
  defaultValue?: T;
  table?: Table;
  [key: string]: unknown;
}

type ArgTypes<Props> = {
  [key in keyof Props]?: ArgType<Props[key]>;
};

/**
 * Augments `Annotation` from `@storybook/addons`
 * for better `argTypes` types.
 */
interface Annotation<Args> {
  /**
   * ArgTypes encode basic metadata for args, such as `name`, `description`,
   * `defaultValue` for an arg. These get automatically filled in by Storybook
   * Docs.
   *
   * @see [Control annotations](https://github.com/storybookjs/storybook/blob/91e9dee33faa8eff0b342a366845de7100415367/addons/controls/README.md#control-annotations)
   */
  argTypes?: ArgTypes<Args>;
  parameters?: ExtendedParameters;
  decorators?: BaseDecorators<ReactElement<unknown>>;
  includeStories?: string[] | RegExp;
  excludeStories?: string[] | RegExp;
}

export interface StoryMetadata<Args = DefaultArgs> extends ExtendedBaseMeta<Args>, Annotation<Args> {
  component: React.FC<Args>;
}

export interface Story<Args = DefaultArgs> extends ExtendedBaseStory<Args>, Annotation<Args> {
  (args: Args, context: StoryContext): React.ReactElement;
}
