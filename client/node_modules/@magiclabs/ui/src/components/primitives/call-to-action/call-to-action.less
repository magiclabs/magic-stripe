@import (reference) '../../../styles/index.less';

.createCallToActionStyles(@baseColor, @textColor, @outlineColor: @baseColor, @focusColor: @baseColor) {
  @themedBaseColor: #mg.getThemeColor(@baseColor);
  @themedTextColor: #mg.getThemeColor(@textColor);
  @themedOutlineColor: #mg.getThemeColor(@outlineColor);
  @themedFocusColor: #mg.getThemeColor(@focusColor);

  // Positioning / Alignment
  display: inline-flex;
  align-items: center;
  justify-content: center;
  position: relative;
  box-sizing: border-box;

  // Margins / Paddings
  margin: 0;
  &.size_sm { padding: 6px 24px; }
  &.size_md { padding: 10px 24px; }
  &.size_lg { padding: 16px 24px; }

  // Border / Background
  border-width: 1px;
  border-color: transparent;
  border-style: solid;
  border-radius: #mg.variables()[maxInt] * 1px;
  background-color: @themedBaseColor[];

  // Transition
  transition: 0.2s;
  will-change: transform, color, background-color, border-color;

  // FocusStyles
  outline: none;
  cursor: pointer;
  * { cursor: pointer; }

  .focusRing {
    position: absolute;
    top: -5px;
    left: -5px;
    width: calc(100% + 6px);
    height: calc(100% + 6px);
    border: solid 2px @themedFocusColor[];
    border-radius: #mg.variables()[maxInt] * 1px;
  }

  &.disabled {
    pointer-events: none;
    opacity: 0.4;
  }

  :not(.buttonLabel) { line-height: 0; }

  .buttonLabel {
    display: flex;
    align-items: center;
    justify-content: center;
    color: @themedTextColor[];
    width: 100%;

    white-space: nowrap;
    font-weight: 500;
    text-align: center;

    transition: all 0.2s ease;
  }

  &.size_sm .buttonLabel {
    font-size: 16px;
    line-height: 24px;
  }

  &.size_md .buttonLabel,
  &.size_lg .buttonLabel {
    font-size: 18px;
    line-height: 28px;
  }

  &:hover {
    #mg.themeProperty(background-color, @themedBaseColor[darker], @themedBaseColor[lighter]);
    .buttonLabel { color: @themedTextColor[]; }
  }

  &.active {
    transform: scale(0.95);
    #mg.themeProperty(background-color, @themedBaseColor[darker], @themedBaseColor[lighter]);
    .buttonLabel { color: @themedTextColor[]; }
  }

  // "Outline" button varient
  &.outline {
    background-color: transparent;
    border-color: @themedOutlineColor[];

    .buttonLabel {
      color: @themedOutlineColor[];
    }

    &:hover {
      #mg.themeProperty(background-color, #mg.getThemeColor(mid)[lightest], #mg.getThemeColor(mid)[darkest]);
    }

    &.active {
      #mg.themeProperty(background-color, #mg.getThemeColor(mid)[lightest], #mg.getThemeColor(mid)[darkest]);
    }
  }
}

button.CallToAction {
  // Disable default <button> styles
  outline: none;
  * { user-select: none; }
}

button.CallToAction {
  &.color_primary { .createCallToActionStyles('primary', 'secondary', 'tertiary', 'primary'); }
  &.color_secondary { .createCallToActionStyles('secondary', 'tertiary'); }
  &.color_tertiary { .createCallToActionStyles('tertiary', 'secondary'); }
  &.color_error { .createCallToActionStyles('error', 'secondary'); }
  &.color_warning { .createCallToActionStyles('warning', 'secondary'); }
  &.color_success { .createCallToActionStyles('success', 'secondary'); }
}
