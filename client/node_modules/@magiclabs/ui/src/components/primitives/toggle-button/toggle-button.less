@import (reference) '../../../styles/index.less';

@height: 22px;
@width: @height * 2;

.createToggleButtonStyles(@color) {
  @themedColor: #mg.getThemeColor(@color);


  // Positioning / Alignment
  position: relative;
  display: inline-block;
  box-sizing: border-box;
  height: @height;
  width: @width;

  // Border / Background
  border-radius: #mg.variables()[maxInt] * 1px;
  border-width: 0;
  #mg.themeProperty(background, #mg.getThemeColor(mid)[lighter], #mg.getThemeColor(mid)[darker]);

  // Transition
  transition: all 0.2s ease;
  * { will-change: left; }

  // Focus Styles
  outline: none;
  cursor: pointer;
  .focusRing {
    position: absolute;
    top: -4px;
    left: -4px;
    width: calc(100% + 4px);
    height: calc(100% + 4px);
    border: solid 2px @themedColor[];
    border-radius: #mg.variables()[maxInt] * 1px;
  }

  &.disabled {
    pointer-events: none;
    opacity: 0.4;
  }

  // Checked Styles
  &.checked { background: @themedColor[]; }
  &.checked:after { left: calc(95% - (@height * 0.8)); }
  &.checked.active:after { left: calc(95% - (@height * 0.95)); }
  &.checked.active:after,
  &.checked:hover:after {
    #mg.themeProperty(box-shadow, -2px 0 4px #mg.getThemeColor(tertiary, 0.4)[], -2px 0 4px #mg.getThemeColor(secondary, 0.6)[]);
  }

  // Hover/active checked styles
  &.active:after { width: @height * 0.95; }
  &.active:not(.checked):after { background: @themedColor[] !important; }
  &:hover:not(.active):not(.checked):after { background: @themedColor[] !important; }
  &.active:not(.checked):after,
  &:hover:not(.checked):after {
    background: @themedColor[] !important;
    #mg.themeProperty(box-shadow, 2px 0 4px #mg.getThemeColor(tertiary, 0.4)[], 2px 0 4px #mg.getThemeColor(secondary, 0.6)[]);
  }

  &:after {
    content: '';
    position: absolute;
    display: block;
    top: 50%;
    left: 5%;
    transform: translateY(-50%);
    width: @height * 0.8;
    height: @height * 0.8;
    background: #mg.getThemeColor(secondary)[];
    border-radius: #mg.variables()[maxInt] * 1px;
    transition: all 0.2s ease;
  }
}

button.ToggleButton {
  // Disable default <button> styles
  outline: none;
  padding: 0;
}

button.ToggleButton {
  &.color_primary { .createToggleButtonStyles('primary'); }
  &.color_error { .createToggleButtonStyles('error'); }
  &.color_warning { .createToggleButtonStyles('warning'); }
  &.color_success { .createToggleButtonStyles('success'); }
}
