#mg() {
  /// Emit rules for dark-theme only.
  .darkTheme(@rules) {
    [data-mg-theme~='dark'] & {
      @rules();
    }
  }

  /// Emit rules for light-theme only.
  .lightTheme(@rules)  {
    [data-mg-theme~='light'] & {
      @rules();
    }
  }

  /// Emit rules for low-contrast themes only.
  .lowContrast(@rules) {
    [data-mg-theme~='lowContrast'] & {
      @rules();
    }
  }

  /// Target and theme a single property (providing one value for the "light theme"
  /// and one value for the "dark theme").
  .themeProperty(@property, @lightValue, @darkValue) {
    #mg.lightTheme({@{property}: @lightValue;});
    #mg.darkTheme({@{property}: @darkValue;});
  }

  /// Extract a themed color from the associated CSS variables.
  .getThemeColor(@themedColorVariable, @opacity: 1) {
    darkest: rgba(var(~'--mg__@{themedColorVariable}_darkest'), @opacity);
    darker: rgba(var(~'--mg__@{themedColorVariable}_darker'), @opacity);
    lightest: rgba(var(~'--mg__@{themedColorVariable}_lightest'), @opacity);
    lighter: rgba(var(~'--mg__@{themedColorVariable}_lighter'), @opacity);
    base: rgba(var(~'--mg__@{themedColorVariable}'), @opacity);
  }
}

