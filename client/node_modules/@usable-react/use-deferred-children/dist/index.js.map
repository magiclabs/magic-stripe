{"version":3,"file":"index.js","sources":["../src/index.ts","../../use-initial-render/dist/index.m.js"],"sourcesContent":["import React, { ReactElement, useEffect, useState } from 'react';\nimport { useInitialRender } from '@usable-react/use-initial-render';\n\n/**\n * Checks if old children and new children are different based on React keys.\n *\n * @source https://github.com/reactjs/react-transition-group/blob/master/src/SwitchTransition.js#L6\n */\nfunction areReactChildrenDifferent(\n  oldChildren: ReactElement | ReactElement[],\n  newChildren: ReactElement | ReactElement[],\n) {\n  if (oldChildren === newChildren) return false;\n\n  if (\n    React.isValidElement(oldChildren) &&\n    React.isValidElement(newChildren) &&\n    oldChildren.key != null &&\n    oldChildren.key === newChildren.key\n  ) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Get a copy of the given `children`, deferred to the next update.\n */\nexport function useDeferredChildren(children: ReactElement | ReactElement[]) {\n  const [nextChildren, setNextChildren] = useState(children);\n  const isInitialRender = useInitialRender();\n\n  useEffect(() => {\n    if (!isInitialRender && areReactChildrenDifferent(nextChildren, children)) {\n      setNextChildren(children);\n    }\n  }, [nextChildren, children]);\n\n  return nextChildren;\n}\n","import{useRef as r,useEffect as t}from\"react\";function n(){var n=r(!0);return t(function(){n.current=!1},[]),n.current}export{n as useInitialRender};\n//# sourceMappingURL=index.m.js.map\n"],"names":["children","isInitialRender","useState","nextChildren","setNextChildren","useRef","useEffect","current","oldChildren","newChildren","React","isValidElement","key"],"mappings":"qHA6BoCA,OCtB5BC,IDuBkCC,WAASF,GAA1CG,OAAcC,OACfH,GCxBAA,EAAkBI,UAAAA,GACxBC,YAAU,WACRL,EAAgBM,SAAAA,GACf,IACIN,EAAgBM,SD4BvB,OANAD,YAAU,WAzBZ,IACEE,EACAC,EAwBOR,IAzBPO,EAyBoDL,MAxBpDM,EAwBkET,IAnBhEU,EAAMC,eAAeH,IACrBE,EAAMC,eAAeF,IACF,MAAnBD,EAAYI,KACZJ,EAAYI,MAAQH,EAAYG,KAiB9BR,EAAgBJ,IAEjB,CAACG,EAAcH,IAEXG"}