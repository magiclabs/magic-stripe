{"version":3,"file":"index.js","sources":["../src/type-guards.ts","../src/index.ts"],"sourcesContent":["import { MutableRefObject, RefObject } from 'react';\n\nexport function isDocument(obj: any): obj is Document {\n  return obj instanceof HTMLDocument;\n}\n\nexport function isWindow(obj: any): obj is Window {\n  return obj instanceof Window;\n}\n\nexport function isRefObject<T>(obj: any): obj is RefObject<T> | MutableRefObject<T> {\n  return !!obj.current;\n}\n\nexport function isElement(obj: any): obj is HTMLElement {\n  try {\n    // Using W3 DOM2 (works for FF, Opera and Chrome)\n    return obj instanceof HTMLElement;\n  } catch (e) {\n    // Browsers not supporting W3 DOM2 don't have HTMLElement and\n    // an exception is thrown and we end up here. Testing some\n    // properties that all elements have (works on IE7)\n    return (\n      typeof obj === 'object' &&\n      obj.nodeType === 1 &&\n      typeof obj.style === 'object' &&\n      typeof obj.ownerDocument === 'object'\n    );\n  }\n}\n","/* eslint-disable no-shadow */\n\nimport { MutableRefObject, RefObject, useCallback, useEffect, useRef } from 'react';\nimport { isDocument, isElement, isRefObject, isWindow } from './type-guards';\n\nexport type UseDomEventRemoveListenerFunction = () => void;\nexport type UseDomEventAddListenerFunction<T extends HTMLElement | Window | Document> = T extends HTMLElement\n  ? <K extends keyof HTMLElementEventMap>(\n      eventName: K,\n      listener: (this: T, event: HTMLElementEventMap[K]) => any,\n      options?: boolean | AddEventListenerOptions | undefined,\n    ) => UseDomEventRemoveListenerFunction\n  : T extends Window\n  ? <K extends keyof WindowEventMap>(\n      eventName: K,\n      listener: (this: T, event: WindowEventMap[K]) => any,\n      options?: boolean | AddEventListenerOptions,\n    ) => UseDomEventRemoveListenerFunction\n  : T extends Document\n  ? <K extends keyof DocumentEventMap>(\n      eventName: K,\n      listener: (this: T, event: DocumentEventMap[K]) => any,\n      options?: boolean | AddEventListenerOptions,\n    ) => UseDomEventRemoveListenerFunction\n  : never;\n\n/**\n * Creates a React hook that registers DOM event listeners on the given\n * `element`. The effect returns a `void` function that can be used to remove\n * the event listener manually. Event listeners created this way are\n * automatically cleaned up before the component unmounts.\n */\nexport function useDomEvent<T extends HTMLElement | Window | Document>(\n  element: T | MutableRefObject<T> | RefObject<T>,\n) {\n  const addListener: UseDomEventAddListenerFunction<T> = ((...eventListenerParams: any[]) => {\n    const [eventName, listener, options] = eventListenerParams as Parameters<T['addEventListener']>;\n    const savedListener = useRef(listener);\n    const savedOptions = useRef(options);\n    const removeListenerRef = useRef(() => {});\n\n    useEffect(() => {\n      savedListener.current = listener;\n    }, [listener]);\n\n    useEffect(() => {\n      savedOptions.current = options;\n    }, [options]);\n\n    useEffect(() => {\n      if (isWindow(element) || isDocument(element) || isElement(element)) {\n        const listener = (e: any) => (savedListener.current as any)(e);\n        element.addEventListener(eventName, listener, savedOptions.current);\n        removeListenerRef.current = () => {\n          element.removeEventListener(eventName, listener, savedOptions.current);\n        };\n        return removeListenerRef.current;\n      }\n\n      if (isRefObject<T>(element)) {\n        if (!!element.current && isElement(element.current)) {\n          const listener = (e: any) => (savedListener.current as any)(e);\n          element.current.addEventListener(eventName, listener, savedOptions.current);\n          removeListenerRef.current = () => {\n            element.current!.removeEventListener(eventName, listener, savedOptions.current);\n          };\n          return removeListenerRef.current;\n        }\n      }\n\n      return undefined;\n    }, [eventName, element]);\n\n    return useCallback(() => removeListenerRef.current(), [eventName, element]);\n  }) as UseDomEventAddListenerFunction<T>;\n\n  return addListener;\n}\n"],"names":["isDocument","obj","HTMLDocument","isWindow","Window","isRefObject","current","isElement","HTMLElement","e","nodeType","style","ownerDocument","element","eventListenerParams","eventName","listener","options","savedListener","useRef","savedOptions","removeListenerRef","useEffect","addEventListener","removeEventListener","useCallback"],"mappings":"gCAEgBA,EAAWC,GACzB,OAAOA,aAAeC,sBAGRC,EAASF,GACvB,OAAOA,aAAeG,gBAGRC,EAAeJ,GAC7B,QAASA,EAAIK,iBAGCC,EAAUN,GACxB,IAEE,OAAOA,aAAeO,YACtB,MAAOC,GAIP,MACiB,iBAARR,GACU,IAAjBA,EAAIS,UACiB,iBAAdT,EAAIU,OACkB,iBAAtBV,EAAIW,4CCOfC,GA2CA,OAzCwD,sCAAIC,2BAAAA,sBACnDC,EAAgCD,KAArBE,EAAqBF,KAAXG,EAAWH,KACjCI,EAAgBC,SAAOH,GACvBI,EAAeD,SAAOF,GACtBI,EAAoBF,SAAO,cAkCjC,OAhCAG,YAAU,WACRJ,EAAcZ,QAAUU,GACvB,CAACA,IAEJM,YAAU,WACRF,EAAad,QAAUW,GACtB,CAACA,IAEJK,YAAU,WACR,GAAInB,EAASU,IAAYb,EAAWa,IAAYN,EAAUM,GAAU,CAClE,IAAMG,EAAW,SAACP,UAAYS,EAAcZ,QAAgBG,IAK5D,OAJAI,EAAQU,iBAAiBR,EAAWC,EAAUI,EAAad,SAC3De,EAAkBf,QAAU,WAC1BO,EAAQW,oBAAoBT,EAAWC,EAAUI,EAAad,UAEzDe,EAAkBf,QAG3B,GAAID,EAAeQ,IACXA,EAAQP,SAAWC,EAAUM,EAAQP,SAAU,CACnD,IAAMU,EAAW,SAACP,UAAYS,EAAcZ,QAAgBG,IAK5D,OAJAI,EAAQP,QAAQiB,iBAAiBR,EAAWC,EAAUI,EAAad,SACnEe,EAAkBf,QAAU,WAC1BO,EAAQP,QAASkB,oBAAoBT,EAAWC,EAAUI,EAAad,UAElEe,EAAkBf,UAK5B,CAACS,EAAWF,IAERY,cAAY,kBAAMJ,EAAkBf,WAAW,CAACS,EAAWF"}