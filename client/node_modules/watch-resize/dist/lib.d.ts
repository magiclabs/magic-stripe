/**
 * Payload received by a `ResizeHandler`.
 */
export interface ResizePayload<T extends HTMLElement> {
    element: T;
    event: UIEvent;
    prevBoundingClientRect: ClientRect | DOMRect;
    destroy: DestroyWatcher;
}
/**
 * A callback function invoked when the
 * watched element emits a "resize" event.
 */
export declare type ResizeHandler<T extends HTMLElement> = (payload: ResizePayload<T>) => void | Promise<void>;
/**
 * A synchronous function to unobserve
 * the element given to `watchResize`.
 */
export declare type DestroyWatcher = () => void;
/**
 * Returns a Promise that resolves when the observer is mounted. The observer
 * fires "resize" events when the given DOM element's width or height changes.
 *
 * The resolved Promise value is a synchronous function which unobserves the
 * element when called.
 *
 * @param element - HTMLElement to observe.
 * @param handler - A callback function invoked whenever the given `element`
 * resizes.
 */
export declare function watchResize<T extends HTMLElement>(element: T, handler: ResizeHandler<T>): Promise<DestroyWatcher>;
