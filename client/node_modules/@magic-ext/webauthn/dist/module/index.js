var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { Extension } from 'magic-sdk';
import { MagicWebAuthnPayloadMethod, WebAuthnSDKErrorCode, } from './types';
import { transformAssertionForServer, transformNewAssertionForServer } from './utils/webauthn.js';
var WebAuthnExtension = /** @class */ (function (_super) {
    __extends(WebAuthnExtension, _super);
    function WebAuthnExtension() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'webauthn';
        _this.config = {};
        return _this;
    }
    WebAuthnExtension.prototype.createWebAuthnNotSupportError = function () {
        this.createError(WebAuthnSDKErrorCode.WebAuthnNotSupported, 'WebAuthn is not supported in this device.', {});
    };
    WebAuthnExtension.prototype.createWebAuthCreateCredentialError = function (message) {
        this.createError(WebAuthnSDKErrorCode.WebAuthnCreateCredentialError, "Error creating credential: " + message, {});
    };
    WebAuthnExtension.prototype.registerNewUser = function (configuration) {
        return __awaiter(this, void 0, void 0, function () {
            var username, _a, nickname, options, credential, err_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!window.PublicKeyCredential) {
                            throw this.createWebAuthnNotSupportError();
                        }
                        username = configuration.username, _a = configuration.nickname, nickname = _a === void 0 ? '' : _a;
                        return [4 /*yield*/, this.request(this.utils.createJsonRpcRequestPayload(MagicWebAuthnPayloadMethod.WebAuthnRegistrationStart, [{ username: username }]))];
                    case 1:
                        options = _b.sent();
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, navigator.credentials.create({
                                publicKey: options.credential_options,
                            })];
                    case 3:
                        credential = (_b.sent());
                        return [3 /*break*/, 5];
                    case 4:
                        err_1 = _b.sent();
                        throw this.createWebAuthCreateCredentialError(err_1);
                    case 5: return [2 /*return*/, this.request(this.utils.createJsonRpcRequestPayload(MagicWebAuthnPayloadMethod.RegisterWithWebAuth, [
                            {
                                id: options.id,
                                nickname: nickname,
                                transport: credential.response.getTransports(),
                                user_agent: navigator.userAgent,
                                registration_response: transformNewAssertionForServer(credential),
                            },
                        ]))];
                }
            });
        });
    };
    WebAuthnExtension.prototype.login = function (configuration) {
        return __awaiter(this, void 0, void 0, function () {
            var username, transformedCredentialRequestOptions, assertion, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!window.PublicKeyCredential) {
                            throw this.createWebAuthnNotSupportError();
                        }
                        username = configuration.username;
                        return [4 /*yield*/, this.request(this.utils.createJsonRpcRequestPayload(MagicWebAuthnPayloadMethod.LoginWithWebAuthn, [{ username: username }]))];
                    case 1:
                        transformedCredentialRequestOptions = _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, navigator.credentials.get({
                                publicKey: transformedCredentialRequestOptions,
                            })];
                    case 3:
                        assertion = (_a.sent());
                        return [3 /*break*/, 5];
                    case 4:
                        err_2 = _a.sent();
                        throw this.createWebAuthCreateCredentialError(err_2);
                    case 5: return [2 /*return*/, this.request(this.utils.createJsonRpcRequestPayload(MagicWebAuthnPayloadMethod.WebAuthnLoginVerify, [
                            {
                                username: username,
                                assertion_response: transformAssertionForServer(assertion),
                            },
                        ]))];
                }
            });
        });
    };
    WebAuthnExtension.prototype.updateInfo = function (configuration) {
        var id = configuration.id, nickname = configuration.nickname;
        var requestPayload = this.utils.createJsonRpcRequestPayload(MagicWebAuthnPayloadMethod.UpdateWebAuthnInfo, [
            {
                webAuthnCredentialsId: id,
                nickname: nickname,
            },
        ]);
        return this.request(requestPayload);
    };
    WebAuthnExtension.prototype.unregisterDevice = function (id) {
        var requestPayload = this.utils.createJsonRpcRequestPayload(MagicWebAuthnPayloadMethod.UnregisterWebAuthDevice, [
            {
                webAuthnCredentialsId: id,
            },
        ]);
        return this.request(requestPayload);
    };
    WebAuthnExtension.prototype.registerNewDevice = function (nickname) {
        if (nickname === void 0) { nickname = ''; }
        return __awaiter(this, void 0, void 0, function () {
            var options, credential, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!window.PublicKeyCredential) {
                            throw this.createWebAuthnNotSupportError();
                        }
                        return [4 /*yield*/, this.request(this.utils.createJsonRpcRequestPayload(MagicWebAuthnPayloadMethod.RegisterWebAuthDeviceStart, []))];
                    case 1:
                        options = _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, navigator.credentials.create({
                                publicKey: options.credential_options,
                            })];
                    case 3:
                        credential = (_a.sent());
                        return [3 /*break*/, 5];
                    case 4:
                        err_3 = _a.sent();
                        throw this.createWebAuthCreateCredentialError(err_3);
                    case 5: return [2 /*return*/, this.request(this.utils.createJsonRpcRequestPayload(MagicWebAuthnPayloadMethod.RegisterWebAuthDevice, [
                            {
                                nickname: nickname,
                                transport: credential.response.getTransports(),
                                user_agent: navigator.userAgent,
                                registration_response: transformNewAssertionForServer(credential),
                            },
                        ]))];
                }
            });
        });
    };
    WebAuthnExtension.prototype.getMetadata = function () {
        var requestPayload = this.utils.createJsonRpcRequestPayload(MagicWebAuthnPayloadMethod.GetWebAuthnInfo, []);
        return this.request(requestPayload);
    };
    return WebAuthnExtension;
}(Extension.Internal));
export { WebAuthnExtension };
//# sourceMappingURL=index.js.map